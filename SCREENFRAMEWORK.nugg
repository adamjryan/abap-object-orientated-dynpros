<?xml version="1.0" encoding="iso-8859-1"?>
<nugget name="SCREENFRAMEWORK">
 <CLAS CLSNAME="ZCL_SCREEN" VERSION="1" LANGU="E" DESCRIPT="Links function group screen to object" UUID="4DD81F7EE2D54B469B0370701A09747C" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="BCUSER" CREATEDON="20130204" CHANGEDBY="ITAJR" CHANGEDON="20130407" CHGDANYON="00000000" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" RSTAT="S" R3RELEASE="620" CLSBCCAT="00">
  <types CLSNAME="ZCL_SCREEN" CMPNAME="TYS_SCREENS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130311" TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="206 " SRCCOLUMN2="21 "/>
  <types CLSNAME="ZCL_SCREEN" CMPNAME="TYT_OBJECTS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130311" TYPTYPE="4" SRCROW1="208 " SRCCOLUMN1="4 " SRCROW2="208 " SRCCOLUMN2="42 "/>
  <publicSection>class ZCL_SCREEN definition
  public
  abstract
  create public .

*&quot;* public components of class ZCL_SCREEN
*&quot;* do not include other source files here!!!
public section.

  data SCREENGROUP type SYREPID read-only .
  data SCREENNUMBER type DYNNR read-only .

  class-methods CALL_PBO .
  methods CONSTRUCTOR
    importing
      !PV_PROGRAM_OF_SCREEN type PROGNAME
      !PV_SCREEN_NUMBER type DYNNR .</publicSection>
  <protectedSection>*&quot;* protected components of class ZCL_SCREEN
*&quot;* do not include other source files here!!!
protected section.

  methods GET_ELEMENTS
    changing
      !PS_ELEMENTS type DATA .</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_SCREEN
*&quot;* do not include other source files here!!!
private section.

  types:
    begin of tys_screens,
      s001  type ref to data,
      s002  type ref to data,
      s003  type ref to data,
      s004  type ref to data,
      s005  type ref to data,
      s006  type ref to data,
      s007  type ref to data,
      s008  type ref to data,
      s009  type ref to data,
      s010  type ref to data,
      s011  type ref to data,
      s012  type ref to data,
      s013  type ref to data,
      s014  type ref to data,
      s015  type ref to data,
      s016  type ref to data,
      s017  type ref to data,
      s018  type ref to data,
      s019  type ref to data,
      s020  type ref to data,
      s021  type ref to data,
      s022  type ref to data,
      s023  type ref to data,
      s024  type ref to data,
      s025  type ref to data,
      s026  type ref to data,
      s027  type ref to data,
      s028  type ref to data,
      s029  type ref to data,
      s030  type ref to data,
      s031  type ref to data,
      s032  type ref to data,
      s033  type ref to data,
      s034  type ref to data,
      s035  type ref to data,
      s036  type ref to data,
      s037  type ref to data,
      s038  type ref to data,
      s039  type ref to data,
      s040  type ref to data,
      s041  type ref to data,
      s042  type ref to data,
      s043  type ref to data,
      s044  type ref to data,
      s045  type ref to data,
      s046  type ref to data,
      s047  type ref to data,
      s048  type ref to data,
      s049  type ref to data,
      s050  type ref to data,
      s051  type ref to data,
      s052  type ref to data,
      s053  type ref to data,
      s054  type ref to data,
      s055  type ref to data,
      s056  type ref to data,
      s057  type ref to data,
      s058  type ref to data,
      s059  type ref to data,
      s060  type ref to data,
      s061  type ref to data,
      s062  type ref to data,
      s063  type ref to data,
      s064  type ref to data,
      s065  type ref to data,
      s066  type ref to data,
      s067  type ref to data,
      s068  type ref to data,
      s069  type ref to data,
      s070  type ref to data,
      s071  type ref to data,
      s072  type ref to data,
      s073  type ref to data,
      s074  type ref to data,
      s075  type ref to data,
      s076  type ref to data,
      s077  type ref to data,
      s078  type ref to data,
      s079  type ref to data,
      s080  type ref to data,
      s081  type ref to data,
      s082  type ref to data,
      s083  type ref to data,
      s084  type ref to data,
      s085  type ref to data,
      s086  type ref to data,
      s087  type ref to data,
      s088  type ref to data,
      s089  type ref to data,
      s090  type ref to data,
      s091  type ref to data,
      s092  type ref to data,
      s093  type ref to data,
      s094  type ref to data,
      s095  type ref to data,
      s096  type ref to data,
      s097  type ref to data,
      s098  type ref to data,
      s099  type ref to data,
      s100  type ref to data,
      s101  type ref to data,
      s102  type ref to data,
      s103  type ref to data,
      s104  type ref to data,
      s105  type ref to data,
      s106  type ref to data,
      s107  type ref to data,
      s108  type ref to data,
      s109  type ref to data,
      s110  type ref to data,
      s111  type ref to data,
      s112  type ref to data,
      s113  type ref to data,
      s114  type ref to data,
      s115  type ref to data,
      s116  type ref to data,
      s117  type ref to data,
      s118  type ref to data,
      s119  type ref to data,
      s120  type ref to data,
      s121  type ref to data,
      s122  type ref to data,
      s123  type ref to data,
      s124  type ref to data,
      s125  type ref to data,
      s126  type ref to data,
      s127  type ref to data,
      s128  type ref to data,
      s129  type ref to data,
      s130  type ref to data,
      s131  type ref to data,
      s132  type ref to data,
      s133  type ref to data,
      s134  type ref to data,
      s135  type ref to data,
      s136  type ref to data,
      s137  type ref to data,
      s138  type ref to data,
      s139  type ref to data,
      s140  type ref to data,
      s141  type ref to data,
      s142  type ref to data,
      s143  type ref to data,
      s144  type ref to data,
      s145  type ref to data,
      s146  type ref to data,
      s147  type ref to data,
      s148  type ref to data,
      s149  type ref to data,
      s150  type ref to data,
      s151  type ref to data,
      s152  type ref to data,
      s153  type ref to data,
      s154  type ref to data,
      s155  type ref to data,
      s156  type ref to data,
      s157  type ref to data,
      s158  type ref to data,
      s159  type ref to data,
      s160  type ref to data,
      s161  type ref to data,
      s162  type ref to data,
      s163  type ref to data,
      s164  type ref to data,
      s165  type ref to data,
      s166  type ref to data,
      s167  type ref to data,
      s168  type ref to data,
      s169  type ref to data,
      s170  type ref to data,
      s171  type ref to data,
      s172  type ref to data,
      s173  type ref to data,
      s174  type ref to data,
      s175  type ref to data,
      s176  type ref to data,
      s177  type ref to data,
      s178  type ref to data,
      s179  type ref to data,
      s180  type ref to data,
      s181  type ref to data,
      s182  type ref to data,
      s183  type ref to data,
      s184  type ref to data,
      s185  type ref to data,
      s186  type ref to data,
      s187  type ref to data,
      s188  type ref to data,
      s189  type ref to data,
      s190  type ref to data,
      s191  type ref to data,
      s192  type ref to data,
      s193  type ref to data,
      s194  type ref to data,
      s195  type ref to data,
      s196  type ref to data,
      s197  type ref to data,
      s198  type ref to data,
      s199  type ref to data,
    end of tys_screens .
  types:
    TYT_objects type table of ref to object .

  class-data CTLRS type TYS_SCREENS .
  class-data:
    INSTANCENUM type n length 3 .
  data T_ELEMENTS type TYT_OBJECTS .

  methods CONSTRUCTOR620
    importing
      !PV_PROGRAM_OF_SCREEN type PROGNAME
      !PV_SCREEN_NUMBER type DYNNR .
  methods PBO .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCL_SCREEN" CMPNAME="CTLRS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130311" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYS_SCREENS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_SCREEN" CMPNAME="INSTANCENUM" VERSION="1" LANGU="E" DESCRIPT="Number of the following screen" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130311" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="212 " SRCCOLUMN1="4 " SRCROW2="212 " SRCCOLUMN2="30 "/>
  <attribute CLSNAME="ZCL_SCREEN" CMPNAME="SCREENGROUP" VERSION="1" LANGU="E" DESCRIPT="ABAP program, current main program" EXPOSURE="2" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SYREPID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SCREEN" CMPNAME="SCREENNUMBER" VERSION="1" LANGU="E" DESCRIPT="Number of the following screen" EXPOSURE="2" STATE="1" EDITORDER="4 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="DYNNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SCREEN" CMPNAME="T_ELEMENTS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130311" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYT_OBJECTS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <method CLSNAME="ZCL_SCREEN" CMPNAME="CALL_PBO" VERSION="1" LANGU="E" DESCRIPT="Internal Use Only" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130217" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method call_pbo.

  data:
    lo_weakref      type ref to cl_abap_weak_reference,
    lo_screen       type ref to zcl_screen,
    lo_selscreen    type ref to zcl_selectionscreen,
    lo_screenframe  type ref to zcl_screenframe.

  field-symbols:
    &lt;screendataref&gt; type ref to data,
    &lt;s_screendata&gt;  type any,
    &lt;o_weakref&gt;     type ref to object.


  do instancenum times.
    assign component sy-index of structure ctlrs to &lt;screendataref&gt;.
    assign &lt;screendataref&gt;-&gt;* to &lt;s_screendata&gt;.
    if sy-subrc eq 0. &quot;Should always have value - put in for testing.

      assign component &apos;CTLR&apos; of structure &lt;s_screendata&gt; to &lt;o_weakref&gt;.
      lo_weakref ?= &lt;o_weakref&gt;.
      lo_screen ?= lo_weakref-&gt;get( ).

      if  lo_screen is not initial
          and
          lo_screen-&gt;screennumber eq sy-dynnr.

        lo_screen-&gt;pbo( ).

        try.
            lo_selscreen ?= lo_screen.
            lo_selscreen-&gt;pbo( ).
          catch cx_sy_move_cast_error.
            try.
                lo_screenframe ?= lo_screen.
                lo_screenframe-&gt;pbo( ).
              catch cx_sy_move_cast_error.
            endtry.
        endtry.

      else.
        &quot;clear memory - screen is no longer referenced anywhere.
      endif.
    endif.
  enddo.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREEN" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130217" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREEN" CMPNAME="CONSTRUCTOR" SCONAME="PV_PROGRAM_OF_SCREEN" VERSION="1" LANGU="E" DESCRIPT="ABAP Program Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PROGNAME"/>
   <parameter CLSNAME="ZCL_SCREEN" CMPNAME="CONSTRUCTOR" SCONAME="PV_SCREEN_NUMBER" VERSION="1" LANGU="E" DESCRIPT="Number of the following screen" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DYNNR"/>
   <source>method CONSTRUCTOR .
* PV_PROGRAM_OF_SCREEN  TYPE PROGNAME ABAP Program Name
* PV_SCREEN_NUMBER      TYPE DYNNR  Number of the following screen
* PS_ELEMENTS	          TYPE REF TO DATA

  IF sy-saprl &lt; 700. &quot;//TODO confirm version that create structure method is available.
    constructor620(
      PV_PROGRAM_OF_SCREEN = PV_PROGRAM_OF_SCREEN
      PV_SCREEN_NUMBER = PV_SCREEN_NUMBER ).
  ENDIF.
*
*  types:
*    begin of tys_screenid,
*      prog  type progname,
*      dynr  type dynnr,
*    end of tys_screenid .
*
*  data:
*    ls_screen_header  type d020s,
*    lt_d021s          type table of d021s, ls_d021s     type d021s,
*    lt_d021snew       type table of d021s, ls_d021snew  type d021s,
*    lt_flowlogic      type dyn_flowlist,
*    ls_flowlogic      like line of lt_flowlogic,
*    lt_params         type table of d023s,
*    ls_screens        type tys_screenid,
*
*    f1(100),
*    f2(100),
*    f3(100).
*
*  ls_screens-prog = pv_program_of_screen.
*  ls_screens-dynr = pv_screen_number.
*
*  import dynpro
*    ls_screen_header
*    lt_d021s
*    lt_flowlogic
*    lt_params
*  id ls_screens.
*  if sy-subrc ne 0.
*    message &apos;Dynpro Definition not found&apos; type &apos;I&apos;.
*    exit.
*  endif.
*
**  TESTING
***********************************************************************
**call function &apos;ALV_TABLE_CREATE&apos;
**starting new task &apos;new&apos;
**  exporting
**    it_fieldcat                     =
**    i_callback_program              = sy-repid
**    i_formname                      =
***   I_TABNAME                       = &apos;1&apos;
***   I_STYLE_TABLE                   =
***   I_OO_CLASS_REFERENCE            =
***   I_OO_CLASS_NAME                 =
***   I_OO_METHOD                     =
***   I_LENGTH_IN_BYTE                =
*** EXCEPTIONS
***   GENERATE_SUBPOOL_DIR_FULL       = 1
***   OTHERS                          = 2
**          .
**if sy-subrc &lt;&gt; 0.
*** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
***         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
**endif.
**
***CL_ALV_TABLE_CREATE=&gt;CREATE_DYNAMIC_TABLE( )
**TYPE-POOLS: abap.
**data t_comp type abap_componentdescr.
***********************************************************************
*
***********************************************************************
*  constants:
*    c_screenarea  type d021s-fill value &apos;B&apos;, &quot;Bildschirm
*    c_tabstrip    type d021s-fill value &apos;I&apos;,
*    c_pushbutton  type d021s-fill value &apos;P&apos;,
*    c_box         type d021s-fill value &apos;R&apos;,
*    c_field_elem  type d021s-fill value &apos;&apos;.
*
*  data: &quot;Extention of Constants
*     r_ityp  type range of c, rs_ityp like line of r_ityp value &apos;IEQ&apos;.
*  rs_ityp-low = &apos;0&apos;. append rs_ityp to r_ityp. &quot;Indicates data dictinary
*  rs_ityp-low = &apos;1&apos;. append rs_ityp to r_ityp. &quot;DDIC linked short text.
*  rs_ityp-low = &apos;2&apos;. append rs_ityp to r_ityp. &quot;DDIC linked medium text.
*  rs_ityp-low = &apos;3&apos;. append rs_ityp to r_ityp. &quot;DDIC linked long text.
*  rs_ityp-low = &apos;4&apos;. append rs_ityp to r_ityp. &quot;DDIC linked title text.
*  rs_ityp-low = &apos;F&apos;. append rs_ityp to r_ityp. &quot;DDIC linked fixed text.
*  rs_ityp-low = &apos;V&apos;. append rs_ityp to r_ityp. &quot;DDIC linked variable tex
*
*  types:
*    begin of tys_screenarea,
*      name    type d021s-fnam,
*      include type d021s-fnam,
*    end of tys_screenarea.
*
*  data:
*    lv_field_prfx type d021s-fnam value &apos;ZCL_SCREENCTLR=&gt;CTLRS-S$-&gt;&apos;, &quot;screenrefprefix
*    tabix         type i,
*
*    lo_tabstrip   type ref to zcl_tabstrip,
*    lv_tab_idx    type n length 2,
*
*    lo_screenarea type ref to zcl_subscreenarea,
*    lt_screenarea type table of tys_screenarea, ls_screenarea like line of lt_screenarea,
*
*    lo_button     type ref to zcl_tabbutton,
*
*    lo_field    type ref to zcl_screenfield,
*
*    element     like line of t_elements,
*    components  type abap_component_tab, component like line of components,
*
*    type,
*    num_comp    type i,
*    lo_weakref  type ref to cl_abap_weak_reference.
*
*  field-symbols:
*    &lt;p_element&gt;   type any,
*    &lt;ps_elements&gt; type any.
*
*
*  add 1 to instancenum.
*  replace first occurrence of &apos;$&apos; in lv_field_prfx with instancenum.
*
*
*  assign ps_elements-&gt;* to &lt;ps_elements&gt;.
*
*  describe field &lt;ps_elements&gt; type type components num_comp. &quot;components addition needed for non-unicode programs.
*  if type ne &apos;u&apos; and type ne &apos;v&apos;. &quot;Flat and Deep structures.
*    return.&quot;exception raised.
*  endif.
*
*  component-name = &apos;CTLR&apos;.
**  component-type stays the same and therefore is set for this and subsequant use.
**  if add initial assigning is used then this intention can be coded explicitly
**  without adding overhead.
**  component-type ?= cl_abap_datadescr=&gt;describe_by_name( &apos;CL_ABAP_WEAK_REFERENCE&apos; ).
*  component-type ?= cl_abap_datadescr=&gt;describe_by_data( element ).
*  append component to components.
*
*
*  do.
*    add 1 to tabix.
*    read table lt_d021s index tabix into ls_d021s.
*    if sy-subrc &lt;&gt; 0. exit. endif.
*
*    case ls_d021s-fill.
*
*      when c_screenarea.
**    ***************************************************************
**      Create component
*        create object lo_screenarea
*          exporting
*            pv_name = ls_d021s-fnam.
*
**       Add to screen element structure
*        append lo_screenarea to t_elements.
*        component-name = ls_d021s-fnam.
*        append component to components.
*
**       Add to user elements
*        assign component ls_d021s-fnam of structure &lt;ps_elements&gt; to &lt;p_element&gt;.
*        if sy-subrc eq 0.
*          &lt;p_element&gt; = lo_screenarea.
*        endif.
*
**      Screen instance attribute creation
*        ls_screenarea-name = ls_d021s-fnam.
*        concatenate lv_field_prfx ls_d021s-fnam into ls_screenarea-include.
*        append ls_screenarea to lt_screenarea.
*
*      when c_tabstrip.
**    ***************************************************************
**      Create component
**       Create tabstrip (get lines of included componenets from main elements table to pass as contructor parameter)
**       *********************************************************************
*        data:
*          lv_tabnum   type n length 2,
*          controlname type string,
*          lt_subd021s type table of d021s, ls_subd021s type d021s.
*        clear lv_tabnum.
*        clear lt_subd021s.
*
*        loop at lt_d021s from tabix into ls_subd021s.
*
*          case ls_subd021s-ltyp.
*            when &apos;J&apos;.
*              lv_tab_idx = lv_tab_idx + 1.
*              concatenate  &apos;TABSTRIP&apos;  lv_tab_idx  into ls_subd021s-fnam.
*            when &apos;I&apos;.
*              if ls_subd021s-fill eq c_pushbutton.
*                add 1 to lv_tabnum.
*              endif.
*              add 1 to tabix.
*            when others.
*              exit.
*          endcase.
*
*          append ls_subd021s to lt_subd021s.
*
*        endloop.
*
*        field-symbols &lt;control&gt; type cxtab_tabstrip.
*        data  controlref  type ref to cxtab_tabstrip.
*
*        concatenate &apos;(SAPLZ_SCREENS)TABSTRIP&apos; lv_tab_idx into controlname.
*        call function &apos;Z_INITALISE_SCREEN_MEMORY&apos;.&quot;instantiate_function_memory
*        assign (controlname) to &lt;control&gt;.
*        get reference of &lt;control&gt; into controlref.
*
*        create object lo_tabstrip
*          exporting
*            pv_name         = ls_d021s-fnam
*            ps_control      = controlref
*            pv_numberoftabs = lv_tabnum.
*
**       Add to screen element structure
*        append lo_tabstrip to t_elements.
*        component-name = ls_d021s-fnam.
*        append component to components.
*
**       Add to user elements
*        assign component ls_d021s-fnam of structure &lt;ps_elements&gt; to &lt;p_element&gt;.
*        if sy-subrc eq 0.
*          &lt;p_element&gt; = lo_tabstrip.
*        endif.
*
*        lo_tabstrip-&gt;modify_screenattributes( changing pt_d021s = lt_subd021s ).
*
*        clear lv_tabnum.
*
*        loop at lt_subd021s into ls_subd021s.
*          case ls_subd021s-fill. &quot;Sub Include elements
*
*            when c_pushbutton.
**          *********************************************************
*              create object lo_button
*                exporting
*                  pv_name = ls_subd021s-fnam.
*
*              lo_button-&gt;set_label( ls_subd021s-fnam ).
*              lo_tabstrip-&gt;append_tab( lo_button ).
*
**             Add to screen element structure
*              append lo_button to t_elements.
*              component-name = ls_subd021s-fnam.
*              append component to components.
*
**             Add to user elements
*              assign component ls_subd021s-fnam of structure &lt;ps_elements&gt; to &lt;p_element&gt;.
*              if sy-subrc eq 0.
*                &lt;p_element&gt; = lo_button.
*              endif.
*
*              add 1 to lv_tabnum.
*              concatenate lv_field_prfx ls_d021s-fnam &apos;-&gt;TABS-T&apos; lv_tabnum into ls_subd021s-fnam.
*              modify lt_subd021s from ls_subd021s.
*
*            when c_screenarea.
**          *********************************************************
*              ls_screenarea-name = ls_subd021s-fnam.
*              concatenate lv_field_prfx ls_d021s-fnam &apos;-&gt;SCR&apos; into ls_screenarea-include.
*              append ls_screenarea to lt_screenarea.
*
*          endcase.
*        endloop.
*
*        append lines of lt_subd021s to lt_d021snew. &quot;Add updated element attributes to instance table
*        continue.
*
*
*      when c_pushbutton.
**    *********************************************************
**     Create component
*        create object lo_button
*          exporting
*            pv_name = ls_d021s-fnam.
*
*        lo_button-&gt;set_label( ls_d021s-fnam ).
*        ls_d021s-res1 = zcl_ucomm_dispatcher=&gt;add_listener( lo_button ).
*        shift ls_d021s-res1 right by 168 places.
*
**       Add to screen element structure
*        append lo_button to t_elements.
*        component-name = ls_d021s-fnam.
*        append component to components.
*
**       Add to user elements
*        assign component ls_d021s-fnam of structure &lt;ps_elements&gt; to &lt;p_element&gt;.
*        if sy-subrc eq 0.
*          &lt;p_element&gt; = lo_button.
*        endif.
*
**     Screen instance attributes modification
*        concatenate  lv_field_prfx  ls_d021s-fnam &apos;-&gt;LABEL&apos;  into ls_d021s-fnam.
*
*      when c_box.
**    *********************************************************
**     Screen instance attribute creation
*        concatenate  lv_field_prfx  ls_d021s-fnam  into ls_d021s-fnam.
*
*
*      when others. &quot;ls_screen_element-type EQ &apos;CHAR&apos; OR ls_screen_elem
**      when c_field_elem.
**    ***************************************************************
**     Create component
**       create text label object with specific methods for the text type, and with text reference.
*        if ls_d021s-ltyp ne &apos;O&apos;. &quot;Not OK CODE
*          condense ls_d021s-res1.
*          if  ls_d021s-res1 cp &apos;00&apos;
*              and
*              ls_d021s-flg1 eq &apos;80&apos;
**             ls_d021s-flg3 EQ &apos;88&apos;. &quot;can also equal 80 for uninvestigated reasons.
*              and
*              ls_d021s-fmb1 eq &apos;00&apos;.
*
**            read table pt_scr_element_symbols index tabix into ls_element_symbols. &quot;(Set in name symbol (instance) creation above.)
*
*            create object lo_field
*              exporting
*                pv_name       = ls_d021s-fnam
*                pv_screenname = ls_d021s-fnam.
*
*            append lo_field to t_elements.
*
*            component-name = ls_d021s-fnam.
*            append component to components.
*
*            assign component ls_d021s-fnam of structure &lt;ps_elements&gt; to &lt;p_element&gt;.
*            if sy-subrc eq 0.
*              &lt;p_element&gt; = lo_field.
*            endif.
*          endif.
*        endif.
*
**     Screen instance attribute creation
*        if ls_d021s-ltyp eq &apos;O&apos;. &quot;Always OK CODE?
*          ls_d021s-fnam = &apos;OK_CODE&apos;. &quot;(only used if non-subscreen - doesn&apos;t seem to cause error if specified regardless)
*        elseif ls_d021s-ityp not in r_ityp. &quot;(Do not rename DDIC
**          ls_element_symbols-fnam = ls_d021s-fnam. &quot;(Needed for use in zcl_screenfield constructor)
*          concatenate  lv_field_prfx  ls_d021s-fnam &apos;-&gt;VAL-&gt;*&apos; into ls_d021s-fnam.
**         -If field name is too long then raise exception.
*
*          if ls_d021s-type = &apos;CURR&apos;. &quot;//TODO Need to properly handle/link currency fields.
*            ls_d021s-type = &apos;DEC&apos;.
*          endif.
*        endif.
*
*    endcase.
*
*    append ls_d021s to lt_d021snew.
*
*  enddo.
*
*
** Create Screen Elements reference structure.
*  data:
*    structype   type ref to cl_abap_structdescr,
*    s_elements  type ref to data.
*
*  field-symbols:
*    &lt;elements&gt;  type any,
*    &lt;element&gt;   type ref to object,
*    &lt;name&gt;      type d021s-fnam.
*
*
** Generate the custom structure.
*  structype = cl_abap_structdescr=&gt;create( components ).
*  create data s_elements type handle structype.
*  assign s_elements-&gt;* to &lt;elements&gt;.
*
** Add reference to screenctlr as first element.
*  create object lo_weakref
*    exporting
*      oref = me.
*  assign component &apos;CTLR&apos; of structure &lt;elements&gt; to &lt;element&gt;.
*  &lt;element&gt; = lo_weakref.
*
** Add screen element objects to remaining elements where a nameslot has been created for each one.
*  loop at t_elements into element.
*    assign element-&gt;(&apos;name&apos;) to &lt;name&gt;. &quot;Should be interface.
*    assign component &lt;name&gt; of structure &lt;elements&gt; to &lt;element&gt;.
*    if sy-subrc eq 0.
*      &lt;element&gt; = element.
*    endif.
*  endloop.
*
*
** Add a reference of the Screen Elements structure to the static screenctlr screen list.
*  data:
*    structi type i.
*  field-symbols:
*    &lt;sxxx&gt;  type ref to data.
*
*  structi = instancenum.
*  assign component structi of structure zcl_screen=&gt;ctlrs to &lt;sxxx&gt;.
*  &lt;sxxx&gt; = s_elements.
*
*
*
*
** Build Screen Logic
***********************************************************************
*  clear lt_flowlogic.
*  append &apos;PROCESS BEFORE OUTPUT.&apos; to lt_flowlogic.
*
*  append &apos;MODULE screen.&apos; to lt_flowlogic.
*
*  loop at lt_screenarea into ls_screenarea.
*    concatenate &apos;CALL SUBSCREEN&apos; ` ` ls_screenarea-name ` ` &apos;INCLUDING&apos; into ls_flowlogic.
*    append ls_flowlogic to lt_flowlogic.
*
*    concatenate ls_screenarea-include &apos;-&gt;PROG&apos; into ls_flowlogic.
*    append ls_flowlogic to lt_flowlogic.
*    concatenate ls_screenarea-include &apos;-&gt;DYNR.&apos; into ls_flowlogic.
*    append ls_flowlogic to lt_flowlogic.
*  endloop.
*
*  append &apos;MODULE screen_fields.&apos; to lt_flowlogic.
*
*
*  append &apos;PROCESS AFTER INPUT.&apos; to lt_flowlogic.
*
*  loop at lt_screenarea into ls_screenarea.
*    concatenate &apos;CALL SUBSCREEN&apos; ` ` ls_screenarea-name &apos;.&apos; into ls_flowlogic.
*    append ls_flowlogic to lt_flowlogic.
*  endloop.
*
*  append &apos;MODULE screen.&apos; to lt_flowlogic.
***********************************************************************
*
*
*
** Create Screen Instance
***********************************************************************
*  data:
*    lo_abap_objectdescr type ref to cl_abap_objectdescr.
*
*  lo_abap_objectdescr ?= cl_abap_objectdescr=&gt;describe_by_object_ref( me ).
*
*  if lo_abap_objectdescr-&gt;absolute_name = &apos;\CLASS=ZCL_SCREENFRAME&apos;.
**  if ls_screens-dynr eq zcl_screenframe=&gt;screen_definition_number and ls_screens-prog eq &apos;SAPLZ_SCREENS&apos;.
*    clear ls_screen_header-type.
*    if zcl_screenframe=&gt;IS_APPTOOLBAR_ENABLED eq &apos;X&apos;.
*      ls_screen_header-mili = 192.
*    else.
*      ls_screen_header-mili = 196.
*    endif.
*  else.
*    ls_screen_header-type = &apos;I&apos;. &quot;All screens declared as subscreens and framed in a standard outer on z_callscreen
*  endif.
*
*  &quot;All screens instantiated in Z_SCREENS function pool therefore constant
*  screengroup = ls_screens-prog = ls_screen_header-prog = &apos;SAPLZ_SCREENS&apos;. &quot;Defaulted
*  screennumber = ls_screens-dynr = ls_screen_header-dnum = ls_screen_header-fnum = &apos;0&apos; &amp;&amp; instancenum.
*
*  delete dynpro screennumber. &quot;Clear any previous instance remnants.
*
*  generate dynpro
*  ls_screen_header
*  lt_d021snew
*  lt_flowlogic
*  lt_params
*  id ls_screens
*  message f1 line f2 word f3.
*  if sy-subrc &lt;&gt; 0.
**       SY-SUBRC = 0: The screen was generated.
**       SY-SUBRC = 4: The error is in the flow logic.
**       SY-SUBRC = 8: The error is in the field list.
*  endif.
*
*
*
** Notes
***********************************************************************
** Could have test for z_screens function pool and module existance
** - if not then could generate dynamically for complete independence.
*
*
** CL_SYSTEM_TRANSACTION_STATE=&gt;TRANSACTION_FINISHED
** CALL METHOD cl_gui_cfw=&gt;set_new_ok_code( &apos;DETAIL&apos; ).
**  data aaa type ref to
**        CL_GUI_CONTROL.
**        CL_GUI_OBJECT.
*
**method get_screenctlr_name .
***SCREEN_CTLR      Importing Type Ref To ZCL_SCREENHOOK
***SCREEN_CTLR_NAME Returning Type  PROGNAME
**
**  data:
**        lo_typedescr  type ref to cl_abap_typedescr.
**
**
***Procedure to get super class name so that if class is inherited it can
***Would therefore need to return range of names starting with the base cl
************************************************************************
***  lo_classdescr  TYPE REF TO cl_abap_classdescr.
**
***  lo_classdescr ?= cl_abap_classdescr=&gt;describe_by_object_ref( screen_c
***  lo_typedescr = lo_classdescr-&gt;get_super_class_type( ).
****  screen_ctlr_name = lo_typedescr-&gt;get_relative_name( ).
***  screen_ctlr_name = lo_typedescr-&gt;absolute_name.
************************************************************************
**
**  lo_typedescr = cl_abap_typedescr=&gt;describe_by_object_ref( SCREEN_CTLR ).
***  screen_ctlr_name = descr_ref-&gt;get_relative_name( ).
**  screen_ctlr_name = lo_typedescr-&gt;absolute_name.
**
**endmethod.
*
*
**method get_dynnr .
***PV_SCREENCTLR_NAME Importing Type  D020T-DTXT
***PT_SCREENS         Returning Type  TYS_SCREENS
**
**  select
**  d020t~prog
**  d020t~dynr
**  into table PT_SCREENS
**  from d020t
**  where
**  dtxt eq pv_screenctlr_name.
**
**  if PT_SCREENS is initial.
**    message &apos;Associated Screen Not Found&apos; type &apos;S&apos;.
**  endif.
**
**endmethod.
*
*
**method refresh_references.
**
**  field-SYMBOLS:
**  &lt;fs0&gt;  type any,
**  &lt;fs1&gt;  type any.
**
**
**  do.
**    assign component sy-index of structure s_fields to &lt;fs0&gt;.
**    if sy-subrc eq 0.
**      assign &lt;fs0&gt;-&gt;* to &lt;fs0&gt;. &quot;Possible error if no fields have been assigned?
**
**      if &lt;fs0&gt; is not initial.
**        assign component sy-index of structure s_fields to &lt;fs1&gt;.
**        get reference of &lt;fs0&gt; into &lt;fs1&gt;.
**
**      endif.
**    else.
**      exit.
**    endif.
**  enddo.
**
**endmethod.
*
*
**Code for future reference.
***********************************************************************
**cl_swf_utl_iterator.
*
**  CALL FUNCTION &apos;RPY_DYNPRO_READ_NATIVE&apos;
*
**    MESSAGE E004 WITH DYNP_ID  RAISING NOT_FOUND.
*
** Dynprobeschreibungstext importieren
**  CLEAR DYNPROTEXT.
**  SELECT SINGLE * FROM  D020T
**  WHERE  PROG        = PROGNAME
**  AND    DYNR        = DYNNUMB
**  AND    LANG        = HEADER-SPRA.
**  DYNPROTEXT = D020T-DTXT.
**
*** dynprobezogene Feldtexte importieren
**  REFRESH FIELDTEXTS.
**  SELECT        * FROM  D021T  INTO TABLE FIELDTEXTS
**  WHERE  PROG        = PROGNAME
**  AND    DYNR        = DYNNUMB
**  AND    LANG        = HEADER-SPRA.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREEN" CMPNAME="CONSTRUCTOR620" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130311" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREEN" CMPNAME="CONSTRUCTOR620" SCONAME="PV_PROGRAM_OF_SCREEN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130311" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PROGNAME"/>
   <parameter CLSNAME="ZCL_SCREEN" CMPNAME="CONSTRUCTOR620" SCONAME="PV_SCREEN_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130311" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DYNNR"/>
   <source>method constructor620.
* PV_PROGRAM_OF_SCREEN  TYPE PROGNAME ABAP Program Name
* PV_SCREEN_NUMBER      TYPE DYNNR  Number of the following screen

  types:
    begin of tys_screenid,
      prog  type progname,
      dynr  type dynnr,
    end of tys_screenid .

  data:
    ls_screen_header  type d020s,
    lt_d021s          type table of d021s, ls_d021s     type d021s,
    lt_d021snew       type table of d021s, ls_d021snew  type d021s,
    lt_flowlogic      type dyn_flowlist,
    ls_flowlogic      like line of lt_flowlogic,
    lt_params         type table of d023s,
    ls_screens        type tys_screenid,

    f1(100),
    f2(100),
    f3(100).

  ls_screens-prog = pv_program_of_screen.
  ls_screens-dynr = pv_screen_number.

  import dynpro
    ls_screen_header
    lt_d021s
    lt_flowlogic
    lt_params
  id ls_screens.
  if sy-subrc ne 0.
    message &apos;Dynpro Definition not found&apos; type &apos;I&apos;.
    exit.
  endif.


**********************************************************************
  constants:
    c_screenarea  type d021s-fill value &apos;B&apos;, &quot;Bildschirm
    c_tabstrip    type d021s-fill value &apos;I&apos;,
    c_pushbutton  type d021s-fill value &apos;P&apos;,
    c_box         type d021s-fill value &apos;R&apos;,
    c_container   type d021s-fill value &apos;U&apos;,
    c_field_elem  type d021s-fill value &apos;&apos;.

  data: &quot;Extention of Constants
     r_ityp  type range of c, rs_ityp like line of r_ityp value &apos;IEQ&apos;.
  rs_ityp-low = &apos;0&apos;. append rs_ityp to r_ityp. &quot;Indicates data dictinary
  rs_ityp-low = &apos;1&apos;. append rs_ityp to r_ityp. &quot;DDIC linked short text.
  rs_ityp-low = &apos;2&apos;. append rs_ityp to r_ityp. &quot;DDIC linked medium text.
  rs_ityp-low = &apos;3&apos;. append rs_ityp to r_ityp. &quot;DDIC linked long text.
  rs_ityp-low = &apos;4&apos;. append rs_ityp to r_ityp. &quot;DDIC linked title text.
  rs_ityp-low = &apos;F&apos;. append rs_ityp to r_ityp. &quot;DDIC linked fixed text.
  rs_ityp-low = &apos;V&apos;. append rs_ityp to r_ityp. &quot;DDIC linked variable tex

  types:
    begin of tys_screenarea,
      name    type d021s-fnam,
      include type d021s-fnam,
    end of tys_screenarea.

  data:
    lv_field_prfx type d021s-fnam value &apos;ZCL_SCREEN=&gt;CTLRS-S$-&gt;&apos;, &quot;screenrefprefix
    tabix         type i,

    lo_tabstrip   type ref to zcl_tabstrip,
    tabstripnum   type n length 2,

    lo_screenarea type ref to zcl_subscreenarea,
    lt_screenarea type table of tys_screenarea, ls_screenarea like line of lt_screenarea,

    lo_button     type ref to zcl_tabbutton,

    lo_field    type ref to zcl_screenfield,

    element     like line of t_elements,

    lo_weakref  type ref to cl_abap_weak_reference.

  field-symbols:
    &lt;p_element&gt;   type any,
    &lt;ps_elements&gt; type any.


  add 1 to instancenum.
  replace first occurrence of &apos;$&apos; in lv_field_prfx with instancenum.



  types:
    begin of tys_elements,
      ctlr  type ref to object,
      e01   type ref to object,
      e02   type ref to object,
      e03   type ref to object,
      e04   type ref to object,
      e05   type ref to object,
      e06   type ref to object,
      e07   type ref to object,
      e08   type ref to object,
      e09   type ref to object,
      e10   type ref to object,
      e11   type ref to object,
      e12   type ref to object,
      e13   type ref to object,
      e14   type ref to object,
      e15   type ref to object,
      e16   type ref to object,
      e17   type ref to object,
      e18   type ref to object,
      e19   type ref to object,
      e20   type ref to object,
      e21   type ref to object,
      e22   type ref to object,
      e23   type ref to object,
      e24   type ref to object,
      e25   type ref to object,
      e26   type ref to object,
      e27   type ref to object,
      e28   type ref to object,
      e29   type ref to object,
      e30   type ref to object,
      e31   type ref to object,
      e32   type ref to object,
      e33   type ref to object,
      e34   type ref to object,
      e35   type ref to object,
      e36   type ref to object,
      e37   type ref to object,
      e38   type ref to object,
      e39   type ref to object,
      e40   type ref to object,
      e41   type ref to object,
      e42   type ref to object,
      e43   type ref to object,
      e44   type ref to object,
      e45   type ref to object,
      e46   type ref to object,
      e47   type ref to object,
      e48   type ref to object,
      e49   type ref to object,
      e50   type ref to object,
      e51   type ref to object,
      e52   type ref to object,
      e53   type ref to object,
      e54   type ref to object,
      e55   type ref to object,
      e56   type ref to object,
      e57   type ref to object,
      e58   type ref to object,
      e59   type ref to object,
    end of tys_elements.

  data:
    s_elementrefs type ref to tys_elements,
    screenname    type d021s-fnam,
    elementnum    type n length 2 value 0.

  field-symbols:
    &lt;elementref&gt;  type ref to object.


*  data:
*    components  type abap_component_tab, component like line of components.
*  component-name = &apos;CTLR&apos;.
*  component-type stays the same and therefore is set for this and subsequant use.
*  if add initial assigning is used then this intention can be coded explicitly
*  without adding overhead.
*  component-type ?= cl_abap_datadescr=&gt;describe_by_name( &apos;CL_ABAP_WEAK_REFERENCE&apos; ).
*  component-type ?= cl_abap_datadescr=&gt;describe_by_data( element ).
*  append component to components.


* Add reference to screenctlr as first element.
  create object lo_weakref
    exporting
      oref = me.
  append lo_weakref to t_elements.


  do.
    add 1 to tabix.
    read table lt_d021s index tabix into ls_d021s.
    if sy-subrc &lt;&gt; 0. exit. endif.

    case ls_d021s-fill.

      when c_screenarea.
*    ***************************************************************
        add 1 to elementnum.
        concatenate lv_field_prfx &apos;E&apos; elementnum into screenname.

*       Create component
        create object lo_screenarea
          exporting
            pv_name = ls_d021s-fnam
            pv_screenname = screenname.
        append lo_screenarea to t_elements.

*       Screen instance attribute creation
*        ls_d021s-fnam = screenname.

*       Screen logic table addition.
        ls_screenarea-name = ls_d021s-fnam.
        ls_screenarea-include = screenname.
        append ls_screenarea to lt_screenarea.


      when c_tabstrip.
*    ***************************************************************
*      Create component
*       Create tabstrip (get lines of included componenets from main elements table to pass as contructor parameter)
*       *********************************************************************
        data:
          tabstripprefix  type d021s-fnam,
          lv_tabnum       type n length 2,
          lt_subd021s     type table of d021s, ls_subd021s type d021s.
        clear lv_tabnum.
        clear lt_subd021s.


        add 1 to elementnum.
        concatenate lv_field_prfx &apos;E&apos; elementnum &apos;-&gt;&apos; into tabstripprefix.
        add 1 to tabstripnum.
        concatenate &apos;TABSTRIP&apos;  tabstripnum  into screenname.

        loop at lt_d021s from tabix into ls_subd021s.
          case ls_subd021s-ltyp.
            when &apos;J&apos;.
              ls_subd021s-fnam = screenname.
            when &apos;I&apos;.
              if ls_subd021s-fill eq c_pushbutton.
                add 1 to lv_tabnum.
              endif.
              add 1 to tabix.
            when others.
              exit.
          endcase.

          append ls_subd021s to lt_subd021s.
        endloop.


*       Get reference to  control field
*       *********************************************************************
        field-symbols:
          &lt;control&gt;   type cxtab_tabstrip.
        data:
          controlname type string,
          controlref  type ref to cxtab_tabstrip.

        concatenate &apos;(SAPLZ_SCREENS)&apos; screenname into controlname.
        call function &apos;Z_INITALISE_SCREEN_MEMORY&apos;.&quot;instantiate_function_memory
        assign (controlname) to &lt;control&gt;.
        get reference of &lt;control&gt; into controlref.
*       *********************************************************************

        create object lo_tabstrip
          exporting
            pv_name         = ls_d021s-fnam
            pv_screenname   = screenname
            ps_control      = controlref
            pv_numberoftabs = lv_tabnum.
        append lo_tabstrip to t_elements.

        lo_tabstrip-&gt;modify_screenattributes( changing pt_d021s = lt_subd021s ).

        clear lv_tabnum.

        loop at lt_subd021s into ls_subd021s.
          case ls_subd021s-fill. &quot;Sub Include elements

            when c_pushbutton.
*          *********************************************************
              add 1 to lv_tabnum.
              concatenate tabstripprefix &apos;TABS-&gt;T&apos; lv_tabnum  &apos;-&gt;LABEL&apos;  into screenname.

              create object lo_button &quot;//TODO should perhaps be declared by the user and append to tabstrip manually.
                exporting
                  pv_name = ls_subd021s-fnam
                  pv_screenname = screenname.
              append lo_button to t_elements.

*              lo_button-&gt;set_label( ls_subd021s-fnam ).
              lo_tabstrip-&gt;append_tab( lo_button ).

              ls_subd021s-fnam = screenname.
              lo_button-&gt;screenfname = ls_subd021s-fnam. &quot;Makeshift solution to hide tabs

            when c_screenarea.
*          *********************************************************
              concatenate  tabstripprefix  &apos;SCR&apos;  into screenname.

              ls_screenarea-name = ls_subd021s-fnam.
              ls_screenarea-include = screenname.
              append ls_screenarea to lt_screenarea.


          endcase.

          modify lt_subd021s from ls_subd021s.
        endloop.

        append lines of lt_subd021s to lt_d021snew. &quot;Add updated element attributes to instance table
        continue.


      when c_pushbutton.
*    *********************************************************
        add 1 to elementnum.
        concatenate &apos;E&apos; elementnum into screenname.

*       Create component
        create object lo_button
          exporting
            pv_name = ls_d021s-fnam
            pv_screenname = screenname.

        append lo_button to t_elements.

*        lo_button-&gt;set_label( ls_d021s-fnam ).
        ls_d021s-res1 = zcl_ucomm_dispatcher=&gt;add_listener( lo_button ).
        shift ls_d021s-res1 right by 168 places.

*       Screen instance attributes modification
        concatenate  lv_field_prfx screenname &apos;-&gt;LABEL&apos;  into ls_d021s-fnam.


      when c_box.
*    *********************************************************
*        add 1 to elementnum.
*        concatenate &apos;E&apos; elementnum into screenname.
*
**       Screen instance attribute creation
*        concatenate lv_field_prfx  screenname  &apos;-&gt;LABEL&apos; into ls_d021s-fnam.
        add 1 to elementnum.
        concatenate &apos;E&apos; elementnum into screenname.

        create object lo_field
          exporting
            pv_name       = ls_d021s-fnam
            pv_screenname = screenname.
        append lo_field to t_elements.

*        lo_field-&gt;set_value( ls_d021s-fnam ).

*       Screen instance attribute creation
        concatenate  lv_field_prfx  screenname &apos;-&gt;VAL-&gt;*&apos; into ls_d021s-fnam.


      when c_container.


      when others. &quot;ls_screen_element-type EQ &apos;CHAR&apos; OR ls_screen_elem
*      when c_field_elem.
*    ***************************************************************
*       //TODO - create text label object with specific methods for the text type.

        data res1 type d021s-res1.

*       Create component
        if ls_d021s-ltyp eq &apos;O&apos;. &quot;Always OK CODE?
          ls_d021s-fnam = &apos;OK_CODE&apos;. &quot;(only used if non-subscreen - doesn&apos;t seem to cause error if specified regardless)
        else. &quot;Not OK CODE

          if ls_d021s-ityp not in r_ityp. &quot;(Do not rename or create objects for DDIC refererenced elements)
*            res1 = ls_d021s-res1.
*            condense res1.
*            if  res1 cp &apos;00&apos;
*                and
*                ls_d021s-flg1 eq &apos;80&apos;
**               ls_d021s-flg3 EQ &apos;88&apos;. &quot;can also equal 80 for uninvestigated reasons.
*                and
*                ls_d021s-fmb1 eq &apos;00&apos;.

*              read table pt_scr_element_symbols index tabix into ls_element_symbols. &quot;(Set in name symbol (instance) creation above.)

            add 1 to elementnum.
            concatenate &apos;E&apos; elementnum into screenname.

            create object lo_field
              exporting
                pv_name       = ls_d021s-fnam
                pv_screenname = screenname.
            append lo_field to t_elements.

*            lo_field-&gt;set_value( ls_d021s-fnam ).


*             Screen instance attribute creation
            concatenate  lv_field_prfx  screenname &apos;-&gt;VAL-&gt;*&apos; into ls_d021s-fnam.
            lo_field-&gt;screenfname = ls_d021s-fnam.

            if ls_d021s-type = &apos;CURR&apos;. &quot;//TODO Need to properly handle/link currency fields.
              ls_d021s-type = &apos;DEC&apos;.
            endif.

*            endif.

          endif.

        endif.

    endcase.

    append ls_d021s to lt_d021snew.

  enddo.



  data:
    ref type ref to object.

  field-symbols:
    &lt;name&gt;  type d021s-fnam.


*  Add screen elements to screen reference structure.
**********************************************************************
  create data s_elementrefs.

  loop at t_elements into ref.
    assign component sy-tabix of structure s_elementrefs-&gt;* to &lt;p_element&gt;.
    if sy-subrc eq 0.
      &lt;p_element&gt; ?= ref.
    endif.
  endloop.

* Add a reference of the Screen Elements structure to the static screenctlr screen list.
  data:
    structi type i.
  field-symbols:
    &lt;sxxx&gt;  type ref to data.

  structi = instancenum.
  assign component structi of structure zcl_screen=&gt;ctlrs to &lt;sxxx&gt;.
  if sy-subrc &lt;&gt; 0. &quot;No more slots available for screens
**  TEST FOR GARBAGE COLLECTED SCREEN OBJECTS
***********************************************************************#
*    field-symbols:
*     &lt;struct&gt; type data,
*     &lt;object&gt; type ref to object.
*
*    data:
*      lo_screen  type ref to zcl_screen,
*      lo_weak    type ref to cl_abap_weak_reference.
*
*    do.
*      assign component sy-index of structure zcl_screen=&gt;ctlrs to &lt;sxxx&gt;.
*      if sy-subrc &lt;&gt; 0.
*        exit. &quot;Reached end of ctlrs
*      endif.
*
*      assign &lt;sxxx&gt;-&gt;* to &lt;struct&gt;.
*      if sy-subrc &lt;&gt; 0.
*        exit. &quot;Current ctlr entry is blank.
*      endif.
*
*      assign component 1 of structure &lt;struct&gt; to &lt;object&gt;.
*      lo_weak ?= &lt;object&gt;. &quot;Should always work as one is always created as part of the structure.
*
*      lo_screen ?= lo_weak-&gt;get( ). &quot;Test for screen still being alive.
*      if lo_screen is initial.
*        lo_screen = lo_screen.
*      endif.
*    enddo.
**********************************************************************
    leave program. &quot;Test for end of struct reached.
  endif.
  &lt;sxxx&gt; = s_elementrefs.
**********************************************************************


** Create Screen Elements reference structure.
*  data:
*    structype   type ref to cl_abap_structdescr,
*    s_elements  type ref to data.
*
*  field-symbols:
*    &lt;elements&gt;  type any,
*    &lt;element&gt;   type ref to object,
*    &lt;name&gt;      type d021s-fnam.
*
*
** Generate the custom structure.
**  structype = cl_abap_structdescr=&gt;create( components ).
**  create data s_elements type handle structype.
*  assign s_elements-&gt;* to &lt;elements&gt;.
*
** Add reference to screenctlr as first element.
*  s_elementrefs-ctlr = lo_weakref.
**  create object lo_weakref
**    exporting
**      oref = me.
**  assign component &apos;CTLR&apos; of structure &lt;elements&gt; to &lt;element&gt;.
**  &lt;element&gt; = lo_weakref.
*
*
** Add screen element objects to remaining elements where a nameslot has been created for each one.
*  loop at t_elements into element.
*    assign element-&gt;(&apos;name&apos;) to &lt;name&gt;. &quot;Should be interface.
*    assign component &lt;name&gt; of structure &lt;elements&gt; to &lt;element&gt;.
*    if sy-subrc eq 0.
*      &lt;element&gt; = element.
*    endif.
*  endloop.
*
*
** Add a reference of the Screen Elements structure to the static screenctlr screen list.
*  data:
*    structi type i.
*  field-symbols:
*    &lt;sxxx&gt;  type ref to data.
*
*  structi = instancenum.
*  assign component structi of structure zcl_screen=&gt;ctlrs to &lt;sxxx&gt;.
*  &lt;sxxx&gt; = s_elements.




* Build Screen Logic
**********************************************************************
  clear lt_flowlogic.
  append &apos;PROCESS BEFORE OUTPUT.&apos; to lt_flowlogic.

  append &apos;MODULE screen.&apos; to lt_flowlogic.

  loop at lt_screenarea into ls_screenarea.
    concatenate &apos;CALL SUBSCREEN&apos; ` ` ls_screenarea-name ` ` &apos;INCLUDING&apos; into ls_flowlogic.
    append ls_flowlogic to lt_flowlogic.

    concatenate ls_screenarea-include &apos;-&gt;PROG&apos; into ls_flowlogic.
    append ls_flowlogic to lt_flowlogic.
    concatenate ls_screenarea-include &apos;-&gt;DYNR.&apos; into ls_flowlogic.
    append ls_flowlogic to lt_flowlogic.
  endloop.

  append &apos;MODULE screen_fields.&apos; to lt_flowlogic.


  append &apos;PROCESS AFTER INPUT.&apos; to lt_flowlogic.

  loop at lt_screenarea into ls_screenarea.
    concatenate &apos;CALL SUBSCREEN&apos; ` ` ls_screenarea-name &apos;.&apos; into ls_flowlogic.
    append ls_flowlogic to lt_flowlogic.
  endloop.

  append &apos;MODULE screen.&apos; to lt_flowlogic.
**********************************************************************



* Create Screen Instance
**********************************************************************
  data:
    lo_abap_objectdescr type ref to cl_abap_objectdescr.

  lo_abap_objectdescr ?= cl_abap_objectdescr=&gt;describe_by_object_ref( me ).

*  if lo_abap_objectdescr-&gt;absolute_name = &apos;\CLASS=ZCL_SCREENFRAME&apos;.
  if ls_screens-dynr eq zcl_screenframe=&gt;screen_definition_number and ls_screens-prog eq &apos;Z_SCREENS&apos;.
    clear ls_screen_header-type.
    if zcl_screenframe=&gt;is_apptoolbar_enabled eq &apos;X&apos;.
      ls_screen_header-mili = 192.
    else.
      ls_screen_header-mili = 196.
    endif.
  else.
    ls_screen_header-type = &apos;I&apos;. &quot;All screens declared as subscreens and framed in a standard outer on z_callscreen
  endif.

  &quot;All screens instantiated in Z_SCREENS function pool therefore constant
  screengroup = ls_screens-prog = ls_screen_header-prog = &apos;SAPLZ_SCREENS&apos;. &quot;Defaulted
  concatenate  &apos;0&apos;  instancenum  into screennumber.
  ls_screens-dynr = ls_screen_header-dnum = ls_screen_header-fnum = screennumber.
*  screennumber = ls_screens-dynr = ls_screen_header-dnum = ls_screen_header-fnum = &apos;0&apos; &amp;&amp; instancenum.

  delete dynpro screennumber. &quot;Clear any previous instance remnants.

  generate dynpro
  ls_screen_header
  lt_d021snew
  lt_flowlogic
  lt_params
  id ls_screens
  message f1 line f2 word f3.
  if sy-subrc &lt;&gt; 0.
*       SY-SUBRC = 0: The screen was generated.
*       SY-SUBRC = 4: The error is in the flow logic.
*       SY-SUBRC = 8: The error is in the field list.
  endif.



* Notes
**********************************************************************
* Could have test for z_screens function pool and module existance
* - if not then could generate dynamically for complete independence.


* CL_SYSTEM_TRANSACTION_STATE=&gt;TRANSACTION_FINISHED
* CALL METHOD cl_gui_cfw=&gt;set_new_ok_code( &apos;DETAIL&apos; ).
*  data aaa type ref to
*        CL_GUI_CONTROL.
*        CL_GUI_OBJECT.

*method get_screenctlr_name .
**SCREEN_CTLR      Importing Type Ref To ZCL_SCREENHOOK
**SCREEN_CTLR_NAME Returning Type  PROGNAME
*
*  data:
*        lo_typedescr  type ref to cl_abap_typedescr.
*
*
**Procedure to get super class name so that if class is inherited it can
**Would therefore need to return range of names starting with the base cl
***********************************************************************
**  lo_classdescr  TYPE REF TO cl_abap_classdescr.
*
**  lo_classdescr ?= cl_abap_classdescr=&gt;describe_by_object_ref( screen_c
**  lo_typedescr = lo_classdescr-&gt;get_super_class_type( ).
***  screen_ctlr_name = lo_typedescr-&gt;get_relative_name( ).
**  screen_ctlr_name = lo_typedescr-&gt;absolute_name.
***********************************************************************
*
*  lo_typedescr = cl_abap_typedescr=&gt;describe_by_object_ref( SCREEN_CTLR ).
**  screen_ctlr_name = descr_ref-&gt;get_relative_name( ).
*  screen_ctlr_name = lo_typedescr-&gt;absolute_name.
*
*endmethod.


*method get_dynnr .
**PV_SCREENCTLR_NAME Importing Type  D020T-DTXT
**PT_SCREENS         Returning Type  TYS_SCREENS
*
*  select
*  d020t~prog
*  d020t~dynr
*  into table PT_SCREENS
*  from d020t
*  where
*  dtxt eq pv_screenctlr_name.
*
*  if PT_SCREENS is initial.
*    message &apos;Associated Screen Not Found&apos; type &apos;S&apos;.
*  endif.
*
*endmethod.


*method refresh_references.
*
*  field-SYMBOLS:
*  &lt;fs0&gt;  type any,
*  &lt;fs1&gt;  type any.
*
*
*  do.
*    assign component sy-index of structure s_fields to &lt;fs0&gt;.
*    if sy-subrc eq 0.
*      assign &lt;fs0&gt;-&gt;* to &lt;fs0&gt;. &quot;Possible error if no fields have been assigned?
*
*      if &lt;fs0&gt; is not initial.
*        assign component sy-index of structure s_fields to &lt;fs1&gt;.
*        get reference of &lt;fs0&gt; into &lt;fs1&gt;.
*
*      endif.
*    else.
*      exit.
*    endif.
*  enddo.
*
*endmethod.


*Code for future reference.
**********************************************************************
*cl_swf_utl_iterator.

*  CALL FUNCTION &apos;RPY_DYNPRO_READ_NATIVE&apos;

*    MESSAGE E004 WITH DYNP_ID  RAISING NOT_FOUND.

* Dynprobeschreibungstext importieren
*  CLEAR DYNPROTEXT.
*  SELECT SINGLE * FROM  D020T
*  WHERE  PROG        = PROGNAME
*  AND    DYNR        = DYNNUMB
*  AND    LANG        = HEADER-SPRA.
*  DYNPROTEXT = D020T-DTXT.
*
** dynprobezogene Feldtexte importieren
*  REFRESH FIELDTEXTS.
*  SELECT        * FROM  D021T  INTO TABLE FIELDTEXTS
*  WHERE  PROG        = PROGNAME
*  AND    DYNR        = DYNNUMB
*  AND    LANG        = HEADER-SPRA.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREEN" CMPNAME="GET_ELEMENTS" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREEN" CMPNAME="GET_ELEMENTS" SCONAME="PS_ELEMENTS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>method get_elements.

  data:
    type,
    num_comp  type i,
    ref       type ref to object.

  field-symbols:
    &lt;name&gt;      type d021s-fnam,
    &lt;p_element&gt; type any.



  describe field ps_elements type type components num_comp. &quot;components addition needed for non-unicode programs.
  if type ne &apos;u&apos; and type ne &apos;v&apos;. &quot;Flat and Deep structures.
    return.&quot;exception raised.
  endif.

  loop at t_elements into ref.
    at first.&quot;Skip screen reference.
      continue.
    endat.

    assign ref-&gt;(&apos;name&apos;) to &lt;name&gt;.
    assign component &lt;name&gt; of structure ps_elements to &lt;p_element&gt;.
    if sy-subrc eq 0.
*     //TODO check the class types match. (try)
      &lt;p_element&gt; ?= ref.
    endif.
  endloop.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREEN" CMPNAME="PBO" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130311" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method pbo .

  data:
    element     like line of t_elements,
    o_tabstrip  type ref to zcl_tabstrip,
    t_tabs      type table of ref to zcl_tabbutton,
    o_field     type ref to zcl_screenfield,
    t_fields    type table of ref to zcl_screenfield.


* SET TABSTRIPS / GET FIELDS-ONLY TABLE
**********************************************************************
  loop at t_elements into element.
    try.
        o_tabstrip ?= element.
        o_tabstrip-&gt;pbo( ).
      catch cx_sy_move_cast_error.

        try.
            o_field ?= element.
            append o_field to t_fields.
          catch cx_sy_move_cast_error.
        endtry.

    endtry.
  endloop.
**********************************************************************


* SET FIELD SCREEN ATTRIBUTES
**********************************************************************
  loop at screen. &quot;Make changes where element is on the short list
    read table t_fields with key table_line-&gt;screenfname = screen-name into o_field.
    if sy-subrc eq 0.
      o_field-&gt;set_screen_attributes( changing pv_screen_attributes = screen ).
*      screen = o_field-&gt;get_screen_attributes( ).
      modify screen.
    endif.
  endloop.
**********************************************************************
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_SCREENFRAME" VERSION="1" LANGU="E" DESCRIPT="Implements the SAP standard frame for screens." UUID="325229E4B5AEC448AC8457A65DA5C4A9" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00" REFCLSNAME="ZCL_SCREEN">
  <publicSection>class ZCL_SCREENFRAME definition
  public
  inheriting from ZCL_SCREEN
  create public .

*&quot;* public components of class ZCL_SCREENFRAME
*&quot;* do not include other source files here!!!
public section.

  constants SCREEN_DEFINITION_NUMBER type DYNNR
 value &apos;0001&apos;. &quot;#EC NOTEXT
  class-data IS_APPTOOLBAR_ENABLED type XFELD value &apos;&apos; .

  methods CALL_SCREEN
    importing
      !PV_AS_POPUP type XFELD default &apos; &apos;
    returning
      value(PV_UCOMM) type SYUCOMM .
  methods CONSTRUCTOR
    importing
      !PO_SCREEN type ref to ZCL_SCREEN optional .
  methods GET_APP_TOOLBAR
    returning
      value(PO_APP_TOOLBAR) type ref to ZCL_APP_TOOLBAR .
  methods GET_FRAME_TOOLBAR
    returning
      value(PO_FRAME_TOOLBAR) type ref to ZCL_FRAME_TOOLBAR .
  methods PBO .
  methods SET_SCREENAREA
    importing
      !PO_SCREEN type ref to ZCL_SCREEN .
  methods SET_TITLE
    importing
      !PV_TITLE type CUA_TIT_TX .
  methods GET_SCREEN
    returning
      value(PO_SCREEN) type ref to ZCL_SCREEN .</publicSection>
  <protectedSection>protected section.
*&quot;* protected components of class ZCL_SCREENFRAME
*&quot;* do not include other source files here!!!</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_SCREENFRAME
*&quot;* do not include other source files here!!!
private section.

  data APP_TOOLBAR type ref to ZCL_APP_TOOLBAR .
  data FRAME_TOOLBAR type ref to ZCL_FRAME_TOOLBAR .
  data IS_TITLEBAR_SET type XFELD value &apos; &apos; .
  data:
    begin of s_elements,
      subscr type ref to zcl_subscreenarea,
    end of s_elements .
  data TITLE type CUA_TIT_TX .

  methods BACK .
  methods EXIT .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCL_SCREENFRAME" CMPNAME="APP_TOOLBAR" VERSION="1" LANGU="E" DESCRIPT="Application Toolbar" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130208" CHANGEDBY="ITAJR" CHANGEDON="20130217" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_APP_TOOLBAR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_SCREENFRAME" CMPNAME="FRAME_TOOLBAR" VERSION="1" LANGU="E" DESCRIPT="O_FRAME_TOOLBAR" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130217" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_FRAME_TOOLBAR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_SCREENFRAME" CMPNAME="IS_APPTOOLBAR_ENABLED" VERSION="1" LANGU="E" DESCRIPT="Checkbox" EXPOSURE="2" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="1" ATTVALUE="&apos;&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="XFELD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SCREENFRAME" CMPNAME="IS_TITLEBAR_SET" VERSION="1" LANGU="E" DESCRIPT="IS_TITLEBAR_SET" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130217" ATTDECLTYP="0" ATTVALUE="&apos; &apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="XFELD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_SCREENFRAME" CMPNAME="SCREEN_DEFINITION_NUMBER" VERSION="1" LANGU="E" DESCRIPT="Number of the following screen" EXPOSURE="2" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130307" ATTDECLTYP="2" ATTVALUE="&apos;0001&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="DYNNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SCREENFRAME" CMPNAME="S_ELEMENTS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130310" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="4 " SRCROW2="11 " SRCCOLUMN2="20 "/>
  <attribute CLSNAME="ZCL_SCREENFRAME" CMPNAME="TITLE" VERSION="1" LANGU="E" DESCRIPT="Text of title line" EXPOSURE="0" STATE="1" EDITORDER="5 " AUTHOR="ITAJR" CREATEDON="20130305" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CUA_TIT_TX" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <inheritance CLSNAME="ZCL_SCREENFRAME" REFCLSNAME="ZCL_SCREEN" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000"/>
  <method CLSNAME="ZCL_SCREENFRAME" CMPNAME="BACK" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130305" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method back.

* IF sy-dynnr EQ screennumber. &quot;or subscreen
    leave to screen 0. &quot;Set flag and process in pbo
    leave screen. &quot;Needs to go to previous screen
*   set screen 0. &quot;Cannot call this command in a subscreen
*   (need to set a flag to raise it in main screen processing).
* endif.



*  if o_back_relay is not initial.
*
*    o_back_relay-&gt;button_pressed( o_toolbar_proxy ).
*
*    if is_externally_controlled is initial.
*      zif_screenframe_actions~back( ).
*    endif.
*
*  else.
*    zif_screenframe_actions~back( ).
*  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFRAME" CMPNAME="CALL_SCREEN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130305" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFRAME" CMPNAME="CALL_SCREEN" SCONAME="PV_AS_POPUP" VERSION="1" LANGU="E" DESCRIPT="Checkbox" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PARVALUE="&apos; &apos;"/>
   <parameter CLSNAME="ZCL_SCREENFRAME" CMPNAME="CALL_SCREEN" SCONAME="PV_UCOMM" VERSION="1" LANGU="E" DESCRIPT="Screens, function code triggered by PAI" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYUCOMM"/>
   <source>method call_screen.
*PV_AS_POPUP        TYPE XFELD  DEFAULT &apos; &apos; Checkbox
*VALUE( PV_UCOMM )  TYPE SYUCOMM  Screens, function code triggered by PAI

  data:
*    o_modal type ref to zcl_screenframe_modal,
    o_frame type ref to zcl_screenframe.



  if pv_as_popup is initial.
    call function &apos;Z_CALLSCREEN&apos;
      exporting
        pv_dynnr_instance = screennumber.
  else.

*    TRY.
*      o_modal ?= po_screen.
*      o_modal-&gt;call_screen( ).
*    CATCH cx_sy_move_cast_error.
*      create object o_modal
*        exporting
*          po_screenctlr = po_screen.
*
*      o_modal-&gt;call_screen( ).
*    ENDTRY.

  endif.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFRAME" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130305" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFRAME" CMPNAME="CONSTRUCTOR" SCONAME="PO_SCREEN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_SCREEN" PAROPTIONL="X"/>
   <source>method constructor.

*  data:
*    begin of s_elements,
*      subscr type ref to zcl_subscreenarea,
*    end of s_elements.

*  data:
*    ref_elements  type ref to data.

*  get reference of s_elements into ref_elements.

  zcl_screenframe=&gt;is_apptoolbar_enabled = &apos;X&apos;.

  super-&gt;constructor(
    pv_program_of_screen = &apos;Z_SCREENS&apos;
    pv_screen_number = screen_definition_number ).

  get_elements( changing ps_elements = s_elements ).

*  data:
*    lo_toolbar_implementor    type ref to zif_frame_toolbar_implementor,
*    lo_screenframe_controller type ref to zif_screenframe_controller.


  create object frame_toolbar.

*  create object o_back
*    exporting
*      po_screenframe = me.

*  o_frame_toolbar-&gt;zif_frame_toolbar~set_handler_for_back( o_back ).

*  create object o_exit
*    exporting
*      po_screenframe = me.

*  o_frame_toolbar-&gt;zif_frame_toolbar~set_handler_for_exit( o_exit ).

*  create object o_toolbar_proxy
*    exporting
*      po_screenframe = me.

*  s_elements-subscr-&gt;set_subscreen( po_screen ).

*  try.
*      lo_toolbar_implementor ?= po_screen.
*      lo_toolbar_implementor-&gt;set_toolbar( o_toolbar_proxy ).
*  catch cx_sy_move_cast_error. &quot;Note - try RESUMABLE exception statement somewhere...
*  endtry.

*  try.
*      lo_screenframe_controller ?= po_screen.
*      lo_screenframe_controller-&gt;set_screenframe_actions( me ). &quot;//TODO create proxy for actions.
*      is_externally_controlled = &apos;X&apos;.
**     if subscreen is a toolbar implementor as well then remove
**     default back and exit listeners (greyed out).
*  catch cx_sy_move_cast_error.
*  endtry.

  create object app_toolbar.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFRAME" CMPNAME="EXIT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130305" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method exit.

* IF sy-dynnr EQ screennumber. &quot;or subscreen
*   set screen 0.
    leave to screen 0. &quot;Set flag and process in pbo
   &quot;effect for leave screen call in pbo?
* ENDIF.

*  if o_exit_relay is not initial.
*
*    o_exit_relay-&gt;button_pressed( o_toolbar_proxy ).
*
*    if is_externally_controlled is initial.
*      zif_screenframe_actions~exit( ).
*    endif.
*
*  else.
*    zif_screenframe_actions~exit( ).
*  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFRAME" CMPNAME="GET_APP_TOOLBAR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130305" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFRAME" CMPNAME="GET_APP_TOOLBAR" SCONAME="PO_APP_TOOLBAR" VERSION="1" LANGU="E" DESCRIPT="Application Toolbar" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_APP_TOOLBAR"/>
   <source>method get_app_toolbar.
  po_app_toolbar = app_toolbar.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFRAME" CMPNAME="GET_FRAME_TOOLBAR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130305" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFRAME" CMPNAME="GET_FRAME_TOOLBAR" SCONAME="PO_FRAME_TOOLBAR" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_FRAME_TOOLBAR"/>
   <source>method get_frame_toolbar.
  po_frame_toolbar = frame_toolbar.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFRAME" CMPNAME="GET_SCREEN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFRAME" CMPNAME="GET_SCREEN" SCONAME="PO_SCREEN" VERSION="1" LANGU="E" DESCRIPT="Links function group screen to object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_SCREEN"/>
   <source>method get_screen.
  po_screen = s_elements-subscr-&gt;get_subscreen( ).
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFRAME" CMPNAME="PBO" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130305" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method pbo.
  &quot;Should be performed as last action in set_screen_controls.

  data:
    t_excluded_buttons  type table of syucomm, ucomm  type syucomm.


  frame_toolbar-&gt;pbo( ).
  frame_toolbar-&gt;get_inactivebutton_ucomms(
    changing pt_inactive_ucomms = t_excluded_buttons ).

  app_toolbar-&gt;pbo( ).
  app_toolbar-&gt;get_inactivebutton_ucomms(
    changing pt_inactive_ucomms = t_excluded_buttons ).

  set pf-status &apos;FRAME_TOOLBAR&apos; of program &apos;SAPLZ_SCREENS&apos; excluding t_excluded_buttons.


*  if is_titlebar_set is initial. &quot;Misuse of abap keywords could change, therefore ensure it is set.
  set titlebar &apos;TITLE&apos; of program &apos;SAPLZ_SCREENS&apos; with title.
*    is_titlebar_set = &apos;X&apos;.
*  endif.

*  message &apos;PAI!&apos; type &apos;S&apos; display like &apos;W&apos;.


*  CL_GUI_FRONTEND_SERVICES=&gt;EXECUTE(
*    EXPORTING
*      DOCUMENT = &apos;https://www.sdn.sap.com/test.xls&apos;
*    EXCEPTIONS
*      CNTL_ERROR = 1 ).

*  suppress dialog. &quot;Used if data set dynamically to continue processing as if enter was pressed.
*  cl_gui_cfw=&gt;set_new_ok_code( ).
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFRAME" CMPNAME="SET_SCREENAREA" VERSION="1" LANGU="E" DESCRIPT="SET_CONTAINER -&gt; set_screen" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130305" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFRAME" CMPNAME="SET_SCREENAREA" SCONAME="PO_SCREEN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_SCREEN"/>
   <source>method set_screenarea.
  s_elements-subscr-&gt;set_subscreen( po_screen ).
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFRAME" CMPNAME="SET_TITLE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130305" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFRAME" CMPNAME="SET_TITLE" SCONAME="PV_TITLE" VERSION="1" LANGU="E" DESCRIPT="Text of title line" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130305" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CUA_TIT_TX"/>
   <source>method set_title.
  title = pv_title.
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_SCREENFIELD" VERSION="1" LANGU="E" DESCRIPT="Screen text element (label, input/output)" UUID="24E51F0883259A4BA730CEBC2568A8E8" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="BCUSER" CREATEDON="20130107" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00">
  <friends CLSNAME="ZCL_SCREENFIELD" REFCLSNAME="ZCL_SCREEN" FRIENDTYPE="0" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000"/>
  <publicSection>class ZCL_SCREENFIELD definition
  public
  create public

  global friends ZCL_SCREEN .

*&quot;* public components of class ZCL_SCREENFIELD
*&quot;* do not include other source files here!!!
public section.

  data SCREENFNAME type D021S-FNAM .

  methods ADD_ACTION_LISTENER
    importing
      !PO_ACTION_LISTENER type ref to ZIF_BUTTON_ACTION_LISTENER .
  methods CONSTRUCTOR
    importing
      !PV_NAME type D021S-FNAM
      !PV_SCREENNAME type D021S-FNAM .
  methods GET_VALUE
    changing
      value(PV_VALUE) type DATA .
  methods RELAY_FIELD_ENTRY .
  methods REMOVE_ACTION_LISTENER
    importing
      !PO_ACTION_LISTENER type ref to ZIF_BUTTON_ACTION_LISTENER .
  methods SET_INTENSIFIED
    importing
      !PV_IS_INTENSIFIED type SCREEN-INTENSIFIED .
  type-pools ABAP .
  methods SET_INVISIBLE
    importing
      !PV_IS_INVISIBLE type ABAP_BOOL .
  methods SET_IS_INPUT
    importing
      !PV_IS_INPUT type ABAP_BOOL .
  methods SET_SCREEN_ATTRIBUTES
    changing
      !PV_SCREEN_ATTRIBUTES type SCREEN .
  methods SET_VALUE
    importing
      !PV_DATA_TO_DISPLAY type DATA .</publicSection>
  <protectedSection>protected section.
*&quot;* protected components of class ZCL_SCREENFIELD
*&quot;* do not include other source files here!!!</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_SCREENFIELD
*&quot;* do not include other source files here!!!
private section.

  data NAME type D021S-FNAM .
  data OUTPUT_WIDTH type ref to DATA .
  data SCREENNAME type D021S-FNAM .
  data VAL type ref to DATA .
  data SCREEN_ATTRIBUTES type SCREEN .
  data ATT_CHANGED type FLAG .
  data:
    action_listeners type table of ref to zif_button_action_listener .
  data LISTENER_ACTIVE type FLAG .
  data INVISIBLE_SET type FLAG .

  methods GET_SCREEN_ATTRIBUTES
    returning
      value(PV_SCREEN_ATTRIBUTES) type SCREEN .
  type-pools ABAP .
  methods SET_REQUIRED
    importing
      !PV_IS_REQUIRED type ABAP_BOOL .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZCL_SCREENFIELD" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_SCREENFIELD" CMPNAME="ACTION_LISTENERS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="8 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="12 " SRCCOLUMN1="4 " SRCROW2="12 " SRCCOLUMN2="67 "/>
  <attribute CLSNAME="ZCL_SCREENFIELD" CMPNAME="ATT_CHANGED" VERSION="1" LANGU="E" DESCRIPT="General Flag" EXPOSURE="0" STATE="1" EDITORDER="6 " AUTHOR="ITAJR" CREATEDON="20130305" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="FLAG" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_SCREENFIELD" CMPNAME="INVISIBLE_SET" VERSION="1" LANGU="E" DESCRIPT="General Flag" EXPOSURE="0" STATE="1" EDITORDER="10 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="FLAG" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SCREENFIELD" CMPNAME="LISTENER_ACTIVE" VERSION="1" LANGU="E" DESCRIPT="General Flag" EXPOSURE="0" STATE="1" EDITORDER="9 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="FLAG" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SCREENFIELD" CMPNAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Field name" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_SCREENFIELD" CMPNAME="OUTPUT_WIDTH" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_SCREENFIELD" CMPNAME="SCREENFNAME" VERSION="1" LANGU="E" DESCRIPT="Field name" EXPOSURE="2" STATE="1" EDITORDER="7 " AUTHOR="ITAJR" CREATEDON="20130305" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SCREENFIELD" CMPNAME="SCREENNAME" VERSION="1" LANGU="E" DESCRIPT="Field name" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_SCREENFIELD" CMPNAME="SCREEN_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Structure Description for the System Data Object SCREEN" EXPOSURE="0" STATE="1" EDITORDER="5 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SCREEN" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_SCREENFIELD" CMPNAME="VAL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <method CLSNAME="ZCL_SCREENFIELD" CMPNAME="ADD_ACTION_LISTENER" VERSION="1" LANGU="E" DESCRIPT="ADD_ACTION_LISTENER" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFIELD" CMPNAME="ADD_ACTION_LISTENER" SCONAME="PO_ACTION_LISTENER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_BUTTON_ACTION_LISTENER"/>
   <source>method add_action_listener.

  append po_action_listener to action_listeners.

  if listener_active is initial.
    zcl_ucomm_dispatcher=&gt;add_screenfield_listener( me ).
    listener_active = &apos;X&apos;.
  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFIELD" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFIELD" CMPNAME="CONSTRUCTOR" SCONAME="PV_NAME" VERSION="1" LANGU="E" DESCRIPT="Field name" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="D021S-FNAM"/>
   <parameter CLSNAME="ZCL_SCREENFIELD" CMPNAME="CONSTRUCTOR" SCONAME="PV_SCREENNAME" VERSION="1" LANGU="E" DESCRIPT="Field name" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="D021S-FNAM"/>
   <source>method constructor.
  name = pv_name.
  screen_attributes-name = screenname = pv_screenname.
  create data val type d021s-fnam.
  screen_attributes-active = 1.
*  att_changed = &apos;X&apos;. &quot;Added to set screenfield with default initial state (Input disabled as default for now)
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFIELD" CMPNAME="GET_SCREEN_ATTRIBUTES" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="11 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFIELD" CMPNAME="GET_SCREEN_ATTRIBUTES" SCONAME="PV_SCREEN_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Structure Description for the System Data Object SCREEN" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SCREEN"/>
   <source>method get_screen_attributes.
  pv_screen_attributes = screen_attributes.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFIELD" CMPNAME="GET_VALUE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130305" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFIELD" CMPNAME="GET_VALUE" SCONAME="PV_VALUE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130305" CHANGEDBY="ITAJR" CHANGEDON="20130305" PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="DATA"/>
   <source>method get_value.

  field-symbols:
    &lt;val&gt;  type any.

  assign val-&gt;* to &lt;val&gt;.
  pv_value = &lt;val&gt;.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFIELD" CMPNAME="RELAY_FIELD_ENTRY" VERSION="1" LANGU="E" DESCRIPT="Internal Only - Do Not Use" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method relay_field_entry.

  if screen_attributes-input is initial.
    return.
  endif.

  data:
    action_listener like line of action_listeners.

  loop at action_listeners into action_listener.
    action_listener-&gt;button_pressed( me ).
  endloop.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFIELD" CMPNAME="REMOVE_ACTION_LISTENER" VERSION="1" LANGU="E" DESCRIPT="REMOVE_ACTION_LISTENER" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFIELD" CMPNAME="REMOVE_ACTION_LISTENER" SCONAME="PO_ACTION_LISTENER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130406" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_BUTTON_ACTION_LISTENER"/>
   <source>method remove_action_listener.

  delete action_listeners where table_line eq po_action_listener.

  if action_listeners is initial.
    zcl_ucomm_dispatcher=&gt;remove_screenfield_listener( me ).
    clear listener_active.
  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFIELD" CMPNAME="SET_INTENSIFIED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFIELD" CMPNAME="SET_INTENSIFIED" SCONAME="PV_IS_INTENSIFIED" VERSION="1" LANGU="E" DESCRIPT="Checkbox" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCREEN-INTENSIFIED"/>
   <source>method SET_INTENSIFIED .
  if pv_is_intensified is initial.
    clear screen_attributes-intensified.
  else.
    screen_attributes-intensified = 1.
  endif.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFIELD" CMPNAME="SET_INVISIBLE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFIELD" CMPNAME="SET_INVISIBLE" SCONAME="PV_IS_INVISIBLE" VERSION="1" LANGU="E" DESCRIPT="or xfeld for value restriction?" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>method set_invisible.
  if pv_is_invisible is initial.
    clear screen_attributes-invisible.
  else.
    screen_attributes-invisible = &apos;1&apos;.
  endif.

  att_changed = &apos;X&apos;.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFIELD" CMPNAME="SET_IS_INPUT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFIELD" CMPNAME="SET_IS_INPUT" SCONAME="PV_IS_INPUT" VERSION="1" LANGU="E" DESCRIPT="or xfeld for value restriction?" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>method set_is_input.
  if pv_is_input is initial.
    clear screen_attributes-input.
  else.
    screen_attributes-input = &apos;1&apos;.
  endif.

  att_changed = &apos;X&apos;.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFIELD" CMPNAME="SET_REQUIRED" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="12 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFIELD" CMPNAME="SET_REQUIRED" SCONAME="PV_IS_REQUIRED" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>method SET_REQUIRED .
  if pv_is_required is initial.
    clear screen_attributes-required.
  else.
    screen_attributes-required = 1.
  endif.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFIELD" CMPNAME="SET_SCREEN_ATTRIBUTES" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130305" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFIELD" CMPNAME="SET_SCREEN_ATTRIBUTES" SCONAME="PV_SCREEN_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Structure Description for the System Data Object SCREEN" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130305" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SCREEN"/>
   <source>method set_screen_attributes.
  if att_changed eq &apos;X&apos;.
    pv_screen_attributes-invisible = screen_attributes-invisible.
    pv_screen_attributes-input = screen_attributes-input.
*    pv_screen_attributes = screen_attributes.
  endif.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENFIELD" CMPNAME="SET_VALUE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENFIELD" CMPNAME="SET_VALUE" SCONAME="PV_DATA_TO_DISPLAY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>method set_value.

  &quot;Check data is a type compatible for this screen field (c or n or f etc).

  data:
    valueref  type ref to data.

  create data valueref like pv_data_to_display.

  val = valueref.

  field-symbols:
    &lt;val&gt;  type any.

  assign val-&gt;* to &lt;val&gt;.
  &lt;val&gt; = pv_data_to_display.

endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_UCOMM_DISPATCHER" VERSION="1" LANGU="E" UUID="C8792B409A072440847F70C32166BBB3" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" AUTHOR="BCUSER" CREATEDON="20121231" CHANGEDBY="ITAJR" CHANGEDON="20130407" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" RSTAT="S" R3RELEASE="620" CLSBCCAT="00">
  <types CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="TYS_UCOMMREF" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130406" TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="9 " SRCCOLUMN2="20 "/>
  <types CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="TYT_UCOMMREFS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="4 " SRCROW2="11 " SRCCOLUMN2="43 "/>
  <publicSection>class ZCL_UCOMM_DISPATCHER definition
  public
  final
  create private .

*&quot;* public components of class ZCL_UCOMM_DISPATCHER
*&quot;* do not include other source files here!!!
public section.

  class-methods PAI .
  methods CONSTRUCTOR .
  class-methods PBO .
  class-methods ADD_LISTENER
    importing
      !PO_UCOMM_LISTENER type ref to ZIF_UCOMM_ACTION_LISTENER
    returning
      value(PV_UCOMM) type SYUCOMM .
  class-methods ADD_TOOLBARLISTENER
    importing
      !PO_UCOMM_LISTENER type ref to ZIF_UCOMM_ACTION_LISTENER
      !PV_UCOMM type SYUCOMM .
  class-methods REGISTER_SELECTIONSCREEN
    importing
      !PO_SELECTIONSCREEN type ref to ZCL_SELECTIONSCREEN .
  class-methods ADD_SCREENFIELD_LISTENER
    importing
      !PO_UCOMM_LISTENER type ref to ZCL_SCREENFIELD .
  class-methods REMOVE_TOOLBARLISTENER
    importing
      !PO_UCOMM_LISTENER type ref to ZIF_UCOMM_ACTION_LISTENER optional
      !PV_UCOMM type SYUCOMM optional .
  class-methods REMOVE_SCREENFIELD_LISTENER
    importing
      !PO_UCOMM_LISTENER type ref to ZCL_SCREENFIELD .</publicSection>
  <protectedSection>protected section.
*&quot;* protected components of class ZCL_UCOMM_DISPATCHER
*&quot;* do not include other source files here!!!</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_UCOMM_DISPATCHER
*&quot;* do not include other source files here!!!
private section.

  types:
    begin of tys_ucommref,
    ucomm   type syucomm,
    object  type ref to zif_ucomm_action_listener,
  end of tys_ucommref .
  types:
    tyt_ucommrefs type table of tys_ucommref .

  class-data OK_CODE type SYUCOMM .
  class-data SYUCOMM type SYUCOMM .
  class-data:
    NEXT_UCOMM type n length 3 .
  class-data:
    t_listeners type table of ref to zif_ucomm_action_listener .
  class-data T_UCOMMREFS type TYT_UCOMMREFS .
  class-data PBO_COMPLETE type XFELD .
  class-data PAI_COMPLETE type XFELD .
  class-data:
    T_SELECTIONSCREENS type table of ref to zcl_selectionscreen .
  class-data SCREENFIELD_ENTRY type D021S-FNAM .
  class-data:
    T_FIELDLISTENERS type table of ref to zcl_screenfield .
  class-data CURSOR_DYNNR type DYNNR .
  class-data CURSOR_FIELD type D021S-FNAM .

  class-methods GET_NEW_UCOMM
    returning
      value(PV_UCOMM) type SYUCOMM .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="CURSOR_DYNNR" VERSION="1" LANGU="E" DESCRIPT="Number of the following screen" EXPOSURE="0" STATE="1" EDITORDER="11 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="DYNNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="CURSOR_FIELD" VERSION="1" LANGU="E" DESCRIPT="Field name" EXPOSURE="0" STATE="1" EDITORDER="12 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="NEXT_UCOMM" VERSION="1" LANGU="E" DESCRIPT="NEXT_UCOMM" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130406" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="16 " SRCCOLUMN1="4 " SRCROW2="16 " SRCCOLUMN2="29 "/>
  <attribute CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="OK_CODE" VERSION="1" LANGU="E" DESCRIPT="OK_CODE" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SYUCOMM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="PAI_COMPLETE" VERSION="1" LANGU="E" DESCRIPT="Checkbox" EXPOSURE="0" STATE="1" EDITORDER="7 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="XFELD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="PBO_COMPLETE" VERSION="1" LANGU="E" DESCRIPT="Checkbox" EXPOSURE="0" STATE="1" EDITORDER="6 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="XFELD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="SCREENFIELD_ENTRY" VERSION="1" LANGU="E" DESCRIPT="Field name" EXPOSURE="0" STATE="1" EDITORDER="9 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="SYUCOMM" VERSION="1" LANGU="E" DESCRIPT="SYUCOMM" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SYUCOMM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="T_FIELDLISTENERS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="10 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDBY="ITAJR" CHANGEDON="20130406" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="26 " SRCCOLUMN1="4 " SRCROW2="26 " SRCCOLUMN2="56 "/>
  <attribute CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="T_LISTENERS" VERSION="1" LANGU="E" DESCRIPT="T_LISTENERS" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130406" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="18 " SRCCOLUMN1="4 " SRCROW2="18 " SRCCOLUMN2="61 "/>
  <attribute CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="T_SELECTIONSCREENS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="8 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130406" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="23 " SRCCOLUMN1="4 " SRCROW2="23 " SRCCOLUMN2="62 "/>
  <attribute CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="T_UCOMMREFS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYT_UCOMMREFS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <method CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="ADD_LISTENER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="ADD_LISTENER" SCONAME="PO_UCOMM_LISTENER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_UCOMM_ACTION_LISTENER"/>
   <parameter CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="ADD_LISTENER" SCONAME="PV_UCOMM" VERSION="1" LANGU="E" DESCRIPT="Function code that PAI triggered" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYUCOMM"/>
   <source>method ADD_LISTENER .

  data:
    ls_ucommref like line of t_ucommrefs.

  ls_ucommref-object = po_ucomm_listener. &quot;Should be weak reference.
  ls_ucommref-ucomm = pv_ucomm = get_new_ucomm( ).

  append ls_ucommref to t_ucommrefs.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="ADD_SCREENFIELD_LISTENER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="ADD_SCREENFIELD_LISTENER" SCONAME="PO_UCOMM_LISTENER" VERSION="1" LANGU="E" DESCRIPT="Screen text element (label, input/output)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDBY="ITAJR" CHANGEDON="20130306" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_SCREENFIELD"/>
   <source>method add_screenfield_listener.

  append po_ucomm_listener to t_fieldlisteners.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="ADD_TOOLBARLISTENER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="ADD_TOOLBARLISTENER" SCONAME="PO_UCOMM_LISTENER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_UCOMM_ACTION_LISTENER"/>
   <parameter CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="ADD_TOOLBARLISTENER" SCONAME="PV_UCOMM" VERSION="1" LANGU="E" DESCRIPT="Function code that PAI triggered" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUCOMM"/>
   <source>method add_toolbarlistener.

  data:
    ls_ucommref like line of t_ucommrefs.


  ls_ucommref-object = po_ucomm_listener. &quot;Should be weak reference.
  ls_ucommref-ucomm = pv_ucomm.

  append ls_ucommref to t_ucommrefs.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CONSTRUCTOR .

*NOTES
* how is the ucomm code handled when a button on a screen that appears twice is pressed?
* -is it cleared after the subscreen that it was pressed on is handled?


endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="GET_NEW_UCOMM" VERSION="1" LANGU="E" DESCRIPT="GET_NEW_UCOMM" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="GET_NEW_UCOMM" SCONAME="PV_UCOMM" VERSION="1" LANGU="E" DESCRIPT="PV_UCOMM" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYUCOMM"/>
   <source>method GET_NEW_UCOMM .

  add 1 to next_ucomm.
  concatenate &apos;U&apos; next_ucomm into pv_ucomm.
*  pv_ucomm = &apos;U&apos; &amp;&amp; next_ucomm.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="PAI" VERSION="1" LANGU="E" DESCRIPT="SCREEN_PAI" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method pai.

  if syucomm is initial.
    syucomm = sy-ucomm.
  else.
    if syucomm ne sy-ucomm.
      &quot;something has changed it in pai, or was not properly cleared in last pbo.
    endif.
  endif.

  data:
    inp_out(20) type c,
    field(90)   type c,
    offset      type i,
    line        type i,
    value(20)   type c,
    length      type i.

  get cursor
    field   field
    offset  offset
    line    line
    value   value
    length  length.

  if syucomm eq &apos;ENTER&apos; and field is not initial.
    screenfield_entry = field.
    cursor_dynnr = sy-dynnr.
  endif.

  field-symbols:
    &lt;ok_code&gt; type syucomm.

  assign (&apos;(SAPLZ_SCREENS)ok_code&apos;) to &lt;ok_code&gt;.
  if ok_code is initial.
    ok_code = &lt;ok_code&gt;.
  else.
    if ok_code ne &lt;ok_code&gt;.
      &quot;something has changed it in pai, or was not properly cleared in last pbo.
    endif.
  endif.



  if ok_code ne syucomm.&quot;Then was not set by a screenframe screen. (subscreens don&apos;t recieve)
    &quot;Or set by pf_status? - if this is the case then compare the pf_status codes
    &quot;and if not matched then it must have been set by SAP standard. - Listeners can be set for these.
  endif.



  data:
    lo_selectionscreen  type ref to zcl_selectionscreen.

  read table t_selectionscreens with key table_line-&gt;screennumber = sy-dynnr into lo_selectionscreen.
  if sy-subrc eq 0.
    lo_selectionscreen-&gt;pai( ).
  endif.



  clear pbo_complete.

*    data:
*      lo_cfw  type ref to CL_GUI_CFW,
*      lo_xyz  type ref to cl_gui_control.
*    set handler screen_pai for SYSTEM-event.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="PBO" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method pbo.

  data:
    ls_ucommref     like line of t_ucommrefs.

  if pbo_complete is initial.

    if syucomm is initial. &quot;If no pai was made.
      syucomm = ok_code = sy-ucomm.
    endif.

    if screenfield_entry is not initial.

      data lo_screenfield type ref to zcl_screenfield.

      read table t_fieldlisteners with key table_line-&gt;screenfname = screenfield_entry
      into lo_screenfield.
      if sy-subrc eq 0.
        lo_screenfield-&gt;relay_field_entry( ).
      endif.

      cursor_field = screenfield_entry.
      clear screenfield_entry.

    else.
      loop at t_ucommrefs into ls_ucommref where ucomm = syucomm.
        ls_ucommref-object-&gt;action_raised( ).
      endloop.
    endif.

    clear ok_code.
    clear syucomm.
    clear sy-ucomm.

    pbo_complete = &apos;X&apos;.
    clear pai_complete.

  endif.

  if cursor_dynnr eq sy-dynnr.

    data field(90) type c.
    field = cursor_field.
    set cursor field field.

    clear cursor_field.
    clear cursor_dynnr.

  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="REGISTER_SELECTIONSCREEN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="REGISTER_SELECTIONSCREEN" SCONAME="PO_SELECTIONSCREEN" VERSION="1" LANGU="E" DESCRIPT="Encapsulates selection screen code as a subscreen." CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_SELECTIONSCREEN"/>
   <source>method REGISTER_SELECTIONSCREEN .
  append po_selectionscreen to t_selectionscreens.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="REMOVE_SCREENFIELD_LISTENER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130406" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="REMOVE_SCREENFIELD_LISTENER" SCONAME="PO_UCOMM_LISTENER" VERSION="1" LANGU="E" DESCRIPT="Screen text element (label, input/output)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130406" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_SCREENFIELD"/>
   <source>method remove_screenfield_listener.
  delete t_fieldlisteners where table_line eq po_ucomm_listener.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="REMOVE_TOOLBARLISTENER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="REMOVE_TOOLBARLISTENER" SCONAME="PO_UCOMM_LISTENER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_UCOMM_ACTION_LISTENER" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_UCOMM_DISPATCHER" CMPNAME="REMOVE_TOOLBARLISTENER" SCONAME="PV_UCOMM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUCOMM" PAROPTIONL="X"/>
   <source>method remove_toolbarlistener.

  delete table t_ucommrefs with table key ucomm = pv_ucomm.
*  delete t_ucommrefs where object eq po_ucomm_listener.

endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_APP_BUTTON" VERSION="1" LANGU="E" DESCRIPT="Application Toolbar Button" UUID="2331F798F36EC742956FD7CA8D018280" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ITAJR" CREATEDON="20130208" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00">
  <friends CLSNAME="ZCL_APP_BUTTON" REFCLSNAME="ZCL_GUI_TABLE" FRIENDTYPE="0" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDON="00000000"/>
  <implementing CLSNAME="ZCL_APP_BUTTON" REFCLSNAME="ZIF_UCOMM_ACTION_LISTENER" VERSION="1" EXPOSURE="2" STATE="1" AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" RELTYPE="1"/>
  <publicSection>class ZCL_APP_BUTTON definition
  public
  create public

  global friends ZCL_GUI_TABLE .

*&quot;* public components of class ZCL_APP_BUTTON
*&quot;* do not include other source files here!!!
public section.

  interfaces ZIF_UCOMM_ACTION_LISTENER .

  methods CONSTRUCTOR
    importing
      !PV_LABEL type SMP_DYNTXT-ICON_TEXT
      !PV_ICONNAME type ICONNAME optional
      !PV_CAPTION type SMP_DYNTXT-ICON_TEXT optional .
  methods ADD_ACTION_LISTENER
    importing
      !PO_BUTTON_LISTENER type ref to ZIF_BUTTON_ACTION_LISTENER .
  methods REMOVE_ACTION_LISTENER
    importing
      !PO_BUTTON_LISTENER type ref to ZIF_BUTTON_ACTION_LISTENER .
  methods SET_LABEL
    importing
      !PV_LABEL type GUI_TEXT .
  methods REMOVE_ALL_LISTENERS .</publicSection>
  <protectedSection>*&quot;* protected components of class ZCL_APP_BUTTON
*&quot;* do not include other source files here!!!
protected section.</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_APP_BUTTON
*&quot;* do not include other source files here!!!
private section.

  data:
    t_button_listeners type table of ref to
        zif_button_action_listener .
  data VALUES type SMP_DYNTXT .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCL_APP_BUTTON" CMPNAME="T_BUTTON_LISTENERS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130211" CHANGEDBY="ITAJR" CHANGEDON="20130310" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="7 " SRCCOLUMN2="33 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_APP_BUTTON" CMPNAME="VALUES" VERSION="1" LANGU="E" DESCRIPT="Menu Painter: Program interface for dynamic texts" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SMP_DYNTXT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <interfaceMethod CLSNAME="ZCL_APP_BUTTON" CPDNAME="ZIF_UCOMM_ACTION_LISTENER~ACTION_RAISED">
   <source>method zif_ucomm_action_listener~action_raised.

  data:
    action_listener like line of t_button_listeners.

  loop at t_button_listeners into action_listener.
    action_listener-&gt;button_pressed( me ).
  endloop.

endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_APP_BUTTON" CMPNAME="ADD_ACTION_LISTENER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130211" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_APP_BUTTON" CMPNAME="ADD_ACTION_LISTENER" SCONAME="PO_BUTTON_LISTENER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130211" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_BUTTON_ACTION_LISTENER"/>
   <source>method add_action_listener.

  append po_button_listener to t_button_listeners.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_APP_BUTTON" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130211" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_APP_BUTTON" CMPNAME="CONSTRUCTOR" SCONAME="PV_LABEL" VERSION="1" LANGU="E" DESCRIPT="PV_LABEL" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SMP_DYNTXT-ICON_TEXT"/>
   <parameter CLSNAME="ZCL_APP_BUTTON" CMPNAME="CONSTRUCTOR" SCONAME="PV_ICONNAME" VERSION="1" LANGU="E" DESCRIPT="PV_ICONNAME" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ICONNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_APP_BUTTON" CMPNAME="CONSTRUCTOR" SCONAME="PV_CAPTION" VERSION="1" LANGU="E" DESCRIPT="Menu Painter: Icon text (4.0)" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SMP_DYNTXT-ICON_TEXT" PAROPTIONL="X"/>
   <source>method constructor.

*  zif_ucomm_action_listener~ucomm = pv_ucomm.

  if pv_iconname is not initial.
    values-icon_id = pv_iconname.
    values-icon_text = pv_label.
    values-quickinfo = pv_caption. &quot;If this is blank the label will be displayed as the caption.
*    values-text = pv_caption. &quot;This field or quikinfo works for the caption when icon_id is populated.
  else.
*    if pv_label is initial and pv_caption is initial.
*      values-text = &apos;[No Label]&apos;. //TODO is all fields blank nothing is shown and it is disabled
*                                     Currently used to have uninitialised buttons on bar but need
*                                     have disabled attribute to perform same function more correctly
*    else.
      values-text = pv_label.
      values-quickinfo = pv_caption. &quot;This shows as the label if the text field is blank.
*     values-icon_text = . &quot;This is redundant if the icon_id has no value.
*    endif.
  endif.

*TEXT       GUI_TEXT    CHAR  40  0 Menu Painter: Function or menu text (4.0)
*ICON_ID    ICON_D      CHAR  4   0 Icon in text fields (substitute display, alias)
*ICON_TEXT  GUI_ICTEXT  CHAR  40  0 Menu Painter: Icon text (4.0)
*QUICKINFO  GUI_INFO    CHAR  60  0 Menu Painter: Info text (4.0)
*PATH       CUA_PATH    CHAR  1   0 Fastpath ID

*  zcl_ucomm_dispatcher=&gt;add_toolbarlistener( po_ucomm_listener = me pv_ucomm = pv_ucomm ).

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_APP_BUTTON" CMPNAME="REMOVE_ACTION_LISTENER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130211" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_APP_BUTTON" CMPNAME="REMOVE_ACTION_LISTENER" SCONAME="PO_BUTTON_LISTENER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130211" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_BUTTON_ACTION_LISTENER"/>
   <source>method remove_action_listener.
  delete table t_button_listeners with table key table_line = po_button_listener.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_APP_BUTTON" CMPNAME="REMOVE_ALL_LISTENERS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method remove_all_listeners.
  clear t_button_listeners.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_APP_BUTTON" CMPNAME="SET_LABEL" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130211" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_APP_BUTTON" CMPNAME="SET_LABEL" SCONAME="PV_LABEL" VERSION="1" LANGU="E" DESCRIPT="Menu Painter: Function or menu text (4.0)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="GUI_TEXT"/>
   <source>method set_label.

  values-text = pv_label.

endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_APP_TOOLBAR" VERSION="1" LANGU="E" DESCRIPT="Application Toolbar" UUID="5A70195335FC444CB94BAF35D3DA9B38" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="BCUSER" CREATEDON="20130127" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00">
  <friends CLSNAME="ZCL_APP_TOOLBAR" REFCLSNAME="ZCL_SCREENFRAME" FRIENDTYPE="0" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130208" CHANGEDON="00000000"/>
  <publicSection>class ZCL_APP_TOOLBAR definition
  public
  create public

  global friends ZCL_SCREENFRAME .

*&quot;* public components of class ZCL_APP_TOOLBAR
*&quot;* do not include other source files here!!!
public section.

  class-methods CLASS_CONSTRUCTOR .
  methods CONSTRUCTOR .
  class ZCL_PUBLICTYPES definition load .
  methods GET_INACTIVEBUTTON_UCOMMS
    changing
      !PT_INACTIVE_UCOMMS type ZCL_PUBLICTYPES=&gt;TYT_UCOMM .
  methods PBO .
  methods ADD_BUTTON
    importing
      !PO_APP_BUTTON type ref to ZCL_APP_BUTTON .
  methods REMOVE_ALL_BUTTONS .</publicSection>
  <protectedSection>protected section.
*&quot;* protected components of class ZCL_APP_TOOLBAR
*&quot;* do not include other source files here!!!</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_APP_TOOLBAR
*&quot;* do not include other source files here!!!
private section.

  class-data BLANK_BUTTON type ref to ZCL_APP_BUTTON .
  class-data SET_INSTANCE type ref to ZCL_APP_TOOLBAR .
  data:
    begin of cs_ucomms,
      b01 type syucomm value &apos;A01&apos;,
      b02 type syucomm value &apos;A02&apos;,
      b03 type syucomm value &apos;A03&apos;,
      b04 type syucomm value &apos;A04&apos;,
      b05 type syucomm value &apos;A05&apos;,
      b06 type syucomm value &apos;A06&apos;,
      b07 type syucomm value &apos;A07&apos;,
      b08 type syucomm value &apos;A08&apos;,
      b09 type syucomm value &apos;A09&apos;,
      b10 type syucomm value &apos;A10&apos;,
      b11 type syucomm value &apos;A11&apos;,
      b12 type syucomm value &apos;A12&apos;,
    end of cs_ucomms .
  data:
    begin of s_buttons,
      b01 type ref to zcl_app_button,
      b02 type ref to zcl_app_button,
      b03 type ref to zcl_app_button,
      b04 type ref to zcl_app_button,
      b05 type ref to zcl_app_button,
      b06 type ref to zcl_app_button,
      b07 type ref to zcl_app_button,
      b08 type ref to zcl_app_button,
      b09 type ref to zcl_app_button,
      b10 type ref to zcl_app_button,
      b11 type ref to zcl_app_button,
      b12 type ref to zcl_app_button,
    end of s_buttons .
  data:
    t_inactive_buttons type table of syucomm .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations




class lcl_button implementation.

*  method constructor.
*    values-icon_text = pv_caption.
*    o_toolbar = po_toolbar.
*  endmethod.
*
*  method add_action_listener.
*    is_active = &apos;X&apos;.
*    values-icon_id = &apos;&amp;01&amp;&apos;.
*    append po_action_listener to action_listeners.
*  endmethod.
*
*  method remove_action_listener.
*    delete table action_listeners with table key table_line = po_action_listener.
*    if action_listeners is initial.
*      clear is_active.
*      clear values-icon_id.
*    endif.
*  endmethod.
*
*  method set_caption.
*    values-icon_text = pv_caption.
*  endmethod.
*
*  method relay_action.
*
*    data:
*      action_listener like line of action_listeners.
*
*    loop at action_listeners into action_listener.
*      action_listener-&gt;button_pressed( o_toolbar ).
*    endloop.
*
*  endmethod.
endclass.</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section

*ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-SAVE-&gt;VALUES
*ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B1-&gt;VALUES


class lcl_button definition.

  public section.

*    data:
*      is_active type xfeld read-only value &apos; &apos;.

*    methods:
*      constructor
*        importing
*          po_toolbar  type ref to zcl_frame_toolbar
*          pv_caption  type smp_dyntxt-icon_text,
*
*      add_action_listener
*        importing
*          po_action_listener type ref to zif_button_action_listener,
*
*      remove_action_listener
*        importing
*          po_action_listener type ref to zif_button_action_listener,
*
*      set_caption
*        importing
*          pv_caption  type smp_dyntxt-icon_text,
*
*      relay_action.


  private section.

    data:
*      o_toolbar type ref to zcl_frame_toolbar,
*
*      action_listeners type table of ref to zif_button_action_listener,
*
*      name    type d021s-fnam,
      values  type smp_dyntxt.
*TEXT       GUI_TEXT    CHAR  40  0 Menu Painter: Function or menu text (4.0)
*ICON_ID    ICON_D      CHAR  4   0 Icon in text fields (substitute display, alias)
*ICON_TEXT  GUI_ICTEXT  CHAR  40  0 Menu Painter: Icon text (4.0)
*QUICKINFO  GUI_INFO    CHAR  60  0 Menu Painter: Info text (4.0)
*PATH       CUA_PATH    CHAR  1   0 Fastpath ID

endclass.</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="BLANK_BUTTON" VERSION="1" LANGU="E" DESCRIPT="Application Toolbar Button" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_APP_BUTTON" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="CS_UCOMMS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130208" CHANGEDBY="ITAJR" CHANGEDON="20130310" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="8 " SRCCOLUMN1="4 " SRCROW2="21 " SRCCOLUMN2="19 "/>
  <attribute CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="SET_INSTANCE" VERSION="1" LANGU="E" DESCRIPT="Application Toolbar" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130207" CHANGEDBY="ITAJR" CHANGEDON="20130306" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_APP_TOOLBAR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="S_BUTTONS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="ITAJR" CREATEDON="20130207" CHANGEDBY="ITAJR" CHANGEDON="20130310" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="23 " SRCCOLUMN1="4 " SRCROW2="36 " SRCCOLUMN2="19 "/>
  <attribute CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="T_INACTIVE_BUTTONS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDBY="ITAJR" CHANGEDON="20130310" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="38 " SRCCOLUMN1="4 " SRCROW2="38 " SRCCOLUMN2="43 "/>
  <method CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="ADD_BUTTON" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="ADD_BUTTON" SCONAME="PO_APP_BUTTON" VERSION="1" LANGU="E" DESCRIPT="Application Toolbar Button" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_APP_BUTTON"/>
   <source>method add_button.

  field-symbols:
    &lt;button&gt;  type ref to zcl_app_button,
    &lt;ucomm&gt; type syucomm.


  do.
    assign component sy-index of structure s_buttons to &lt;button&gt;.
    if sy-subrc &lt;&gt; 0.
      exit. &quot;End of structure.
    endif.

    if &lt;button&gt; eq blank_button.
      &lt;button&gt; = po_app_button.

      assign component sy-index of structure cs_ucomms to &lt;ucomm&gt;.
      zcl_ucomm_dispatcher=&gt;add_toolbarlistener( po_ucomm_listener = po_app_button pv_ucomm = &lt;ucomm&gt; ).

      delete table t_inactive_buttons with table key table_line = &lt;ucomm&gt;.
      exit.
    endif.
  enddo.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130208" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="1" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method class_constructor.

  create object set_instance.

  create object blank_button
    exporting
      pv_label = &apos;&apos;.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130208" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method constructor.

  field-symbols:
    &lt;button&gt;  type ref to zcl_app_button,
    &lt;ucomm&gt;   type syucomm.

  do.
    assign component sy-index of structure s_buttons to &lt;button&gt;.
    if sy-subrc eq 0.
      &lt;button&gt; = blank_button.
      assign component sy-index of structure cs_ucomms to &lt;ucomm&gt;.
      append &lt;ucomm&gt; to t_inactive_buttons.
    else.
      exit.
    endif.
  enddo.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="GET_INACTIVEBUTTON_UCOMMS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="GET_INACTIVEBUTTON_UCOMMS" SCONAME="PT_INACTIVE_UCOMMS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_PUBLICTYPES=&gt;TYT_UCOMM"/>
   <source>method get_inactivebutton_ucomms.

  append lines of t_inactive_buttons to pt_inactive_ucomms.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="PBO" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130208" CHANGEDBY="ITAJR" CHANGEDON="20130217" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method pbo.
  set_instance = me. &quot;set last incase there are multiple reassignments in PBO
*  set pf-status &apos;FRAME_TOOLBAR&apos; of program &apos;SAPLZ_SCREENS&apos; excluding t_inactive_buttons.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_APP_TOOLBAR" CMPNAME="REMOVE_ALL_BUTTONS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method remove_all_buttons.

  field-symbols:
    &lt;button&gt;  type ref to zcl_app_button,
    &lt;ucomm&gt; type syucomm.


  do.
    assign component sy-index of structure s_buttons to &lt;button&gt;.
    if sy-subrc &lt;&gt; 0.
      exit. &quot;End of structure.
    endif.

    if &lt;button&gt; ne blank_button.
      &lt;button&gt; = blank_button.

      assign component sy-index of structure cs_ucomms to &lt;ucomm&gt;.
      zcl_ucomm_dispatcher=&gt;remove_toolbarlistener( pv_ucomm = &lt;ucomm&gt; ).

      append &lt;ucomm&gt; to t_inactive_buttons.
    endif.
  enddo.

endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_FRAME_BUTTON" VERSION="1" LANGU="E" DESCRIPT="Frame Toolbar Button" UUID="50D27E649A197E4890B116FDB7BB2302" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ITAJR" CREATEDON="20130208" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00">
  <publicSection>class ZCL_FRAME_BUTTON definition
  public
  create public .

*&quot;* public components of class ZCL_FRAME_BUTTON
*&quot;* do not include other source files here!!!
public section.

  methods CONSTRUCTOR
    importing
      !PV_CAPTION type SMP_DYNTXT-ICON_TEXT .
  methods ADD_ACTION_LISTENER
    importing
      !PO_ACTION_LISTENER type ref to ZIF_BUTTON_ACTION_LISTENER .
  methods REMOVE_ACTION_LISTENER
    importing
      !PO_ACTION_LISTENER type ref to ZIF_BUTTON_ACTION_LISTENER .
  methods SET_CAPTION
    importing
      !PV_CAPTION type SMP_DYNTXT-ICON_TEXT .
  methods GET_ISACTIVE
    returning
      value(PV_ISACTIVE) type XFELD .
  methods RELAY_ACTION .</publicSection>
  <protectedSection>*&quot;* protected components of class ZCL_FRAME_BUTTON
*&quot;* do not include other source files here!!!
protected section.</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_FRAME_BUTTON
*&quot;* do not include other source files here!!!
private section.

  data:
    action_listeners type table of ref to zif_button_action_listener .
  data NAME type D021S-FNAM .
  data VALUES type SMP_DYNTXT .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="ACTION_LISTENERS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130217" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="6 " SRCCOLUMN2="67 "/>
  <attribute CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Field name" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="VALUES" VERSION="1" LANGU="E" DESCRIPT="Menu Painter: Program interface for dynamic texts" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SMP_DYNTXT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <method CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="ADD_ACTION_LISTENER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130211" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="ADD_ACTION_LISTENER" SCONAME="PO_ACTION_LISTENER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_BUTTON_ACTION_LISTENER"/>
   <source>method add_action_listener.
  values-icon_id = &apos;&amp;01&amp;&apos;.
  append po_action_listener to action_listeners.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130211" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="CONSTRUCTOR" SCONAME="PV_CAPTION" VERSION="1" LANGU="E" DESCRIPT="Menu Painter: Icon text (4.0)" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SMP_DYNTXT-ICON_TEXT"/>
   <source>method constructor.
  values-icon_text = pv_caption.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="GET_ISACTIVE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="GET_ISACTIVE" SCONAME="PV_ISACTIVE" VERSION="1" LANGU="E" DESCRIPT="Checkbox" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XFELD"/>
   <source>method get_isactive.

  if lines( action_listeners ) &gt; 0.
    pv_isactive = &apos;X&apos;.
  else.
    pv_isactive = &apos; &apos;.
  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="RELAY_ACTION" VERSION="1" LANGU="E" DESCRIPT="Internal Only - Do Not Use" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method relay_action.

  data:
    action_listener like line of action_listeners.

  loop at action_listeners into action_listener.
    action_listener-&gt;button_pressed( me ).
  endloop.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="REMOVE_ACTION_LISTENER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130211" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="REMOVE_ACTION_LISTENER" SCONAME="PO_ACTION_LISTENER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_BUTTON_ACTION_LISTENER"/>
   <source>method remove_action_listener.
  delete table action_listeners with table key table_line = po_action_listener.
  if action_listeners is initial.
    clear values-icon_id.
  endif.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="SET_CAPTION" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FRAME_BUTTON" CMPNAME="SET_CAPTION" SCONAME="PV_CAPTION" VERSION="1" LANGU="E" DESCRIPT="Menu Painter: Icon text (4.0)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SMP_DYNTXT-ICON_TEXT"/>
   <source>method set_caption .
  values-icon_text = pv_caption.
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_FRAME_TOOLBAR" VERSION="1" LANGU="E" UUID="6BB9BD0483EF854D87C1963E0F00A072" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="BCUSER" CREATEDON="20121231" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00">
  <friends CLSNAME="ZCL_FRAME_TOOLBAR" REFCLSNAME="ZCL_SCREENFRAME" FRIENDTYPE="0" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130208" CHANGEDON="00000000"/>
  <publicSection>class ZCL_FRAME_TOOLBAR definition
  public
  final
  create public

  global friends ZCL_SCREENFRAME .

*&quot;* public components of class ZCL_FRAME_TOOLBAR
*&quot;* do not include other source files here!!!
public section.

  class-methods CLASS_CONSTRUCTOR .
  methods CONSTRUCTOR .
  methods GET_BACK_BUTTON
    returning
      value(PO_BUTTON) type ref to ZCL_FRAME_BUTTON .
  methods GET_CANCEL_BUTTON
    returning
      value(PO_BUTTON) type ref to ZCL_FRAME_BUTTON .
  methods GET_ENTER_BUTTON
    returning
      value(PO_BUTTON) type ref to ZCL_FRAME_BUTTON .
  methods GET_EXIT_BUTTON
    returning
      value(PO_BUTTON) type ref to ZCL_FRAME_BUTTON .
  class ZCL_PUBLICTYPES definition load .
  methods GET_INACTIVEBUTTON_UCOMMS
    changing
      !PT_INACTIVE_UCOMMS type ZCL_PUBLICTYPES=&gt;TYT_UCOMM .
  methods GET_SAVE_BUTTON
    returning
      value(PO_BUTTON) type ref to ZCL_FRAME_BUTTON .
  methods PBO .</publicSection>
  <protectedSection>protected section.
*&quot;* protected components of class ZCL_FRAME_TOOLBAR
*&quot;* do not include other source files here!!!</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_FRAME_TOOLBAR
*&quot;* do not include other source files here!!!
private section.

  constants:
    begin of cs_ucomms,
      enter       type syucomm value &apos;FENTER&apos;,
      save        type syucomm value &apos;FSAVE&apos;,
      back        type syucomm value &apos;FBACK&apos;,
      exit        type syucomm value &apos;FEXIT&apos;,
      cancel      type syucomm value &apos;FCANCEL&apos;,
      print       type syucomm value &apos;FPRINT&apos;,
      find        type syucomm value &apos;FFIND&apos;,
      find_next   type syucomm value &apos;FFINDNEXT&apos;,
      page_top    type syucomm value &apos;FFIRST&apos;,
      page_up     type syucomm value &apos;FPREV&apos;,
      page_down   type syucomm value &apos;FNEXT&apos;,
      page_last   type syucomm value &apos;FLAST&apos;,
*      help        type syucomm value &apos;FHELP&apos;,
    end of cs_ucomms .
  class-data:
    begin of s_static_buttons,
      enter type ref to lcl_static_button_listener ,
      save type ref to lcl_static_button_listener,
      back type ref to lcl_static_button_listener ,
      exit type ref to lcl_static_button_listener,
      cancel type ref to lcl_static_button_listener,
      print type ref to lcl_static_button_listener,
      find type ref to lcl_static_button_listener,
      find_next type ref to lcl_static_button_listener,
      page_top type ref to lcl_static_button_listener ,
      page_up type ref to lcl_static_button_listener ,
      page_down type ref to lcl_static_button_listener,
      page_last type ref to lcl_static_button_listener,
*      help type ref to lcl_static_button_listener,
*      layout type ref to lcl_static_button_listener,
    end of s_static_buttons .
  class-data SET_INSTANCE type ref to ZCL_FRAME_TOOLBAR .
  data:
    begin of s_buttons,
      enter type ref to ZCL_FRAME_BUTTON,
      save type ref to ZCL_FRAME_BUTTON,
      back type ref to ZCL_FRAME_BUTTON,
      exit type ref to ZCL_FRAME_BUTTON,
      cancel type ref to ZCL_FRAME_BUTTON,
      print type ref to ZCL_FRAME_BUTTON,
      find type ref to ZCL_FRAME_BUTTON,
      find_next type ref to ZCL_FRAME_BUTTON,
      page_top type ref to ZCL_FRAME_BUTTON,
      page_up type ref to ZCL_FRAME_BUTTON,
      page_down type ref to ZCL_FRAME_BUTTON,
      page_last type ref to ZCL_FRAME_BUTTON,
*      help type ref to lcl_frame_button,
*      layout type ref to lcl_frame_button,
    end of s_buttons .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations


class zcl_frame_toolbar definition local friends lcl_static_button_listener.

class lcl_static_button_listener implementation.

  method constructor.

    zcl_ucomm_dispatcher=&gt;add_toolbarlistener( po_ucomm_listener = me pv_ucomm = pv_ucomm ).
    relay_button_name = pv_relay_button_name.

  endmethod.                    &quot;constructor

  method zif_ucomm_action_listener~action_raised.

    field-symbols:
      &lt;fs&gt; type ref to zcl_frame_button.

    assign component relay_button_name of structure zcl_frame_toolbar=&gt;set_instance-&gt;s_buttons to &lt;fs&gt;.
    &lt;fs&gt;-&gt;relay_action( ).

  endmethod.                    &quot;zif_ucomm_action_listener~action_raised

endclass.                    &quot;lcl_static_button_listener IMPLEMENTATION</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section



class lcl_static_button_listener definition.

  public section.

    interfaces:
      zif_ucomm_action_listener.

    methods:
      constructor
        importing
          pv_relay_button_name  type seocpdname
          pv_ucomm              like zif_ucomm_action_listener~ucomm.

  private section.

    data:
      relay_button_name type seocpdname.

endclass.                    &quot;lcl_static_button_listener DEFINITION</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZCL_FRAME_TOOLBAR" TYPEGROUP="T" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>T</forwardDeclaration>
  <attribute CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="CS_UCOMMS" VERSION="1" LANGU="E" DESCRIPT="CS_UCOMMS" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130217" ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="20 " SRCCOLUMN2="19 "/>
  <attribute CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="SET_INSTANCE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130217" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_FRAME_TOOLBAR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="S_BUTTONS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130217" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="40 " SRCCOLUMN1="4 " SRCROW2="55 " SRCCOLUMN2="19 "/>
  <attribute CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="S_STATIC_BUTTONS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130217" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="22 " SRCCOLUMN1="4 " SRCROW2="37 " SRCCOLUMN2="26 "/>
  <method CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="1" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CLASS_CONSTRUCTOR.

  create object set_instance.

  create object s_static_buttons-enter
    exporting
      pv_relay_button_name = &apos;ENTER&apos;
      pv_ucomm        = cs_ucomms-enter.
*      pv_label        = &apos;Enter&apos;
*      pv_iconname     = &apos;ICON_SYSTEM_OKAY&apos;.

  create object s_static_buttons-save
    exporting
      pv_relay_button_name = &apos;SAVE&apos;
      pv_ucomm        = cs_ucomms-save.
*      pv_label        = &apos;Save&apos;
*      pv_iconname     = &apos;ICON_SYSTEM_SAVE&apos;.

  create object s_static_buttons-back
    exporting
      pv_relay_button_name = &apos;BACK&apos;
      pv_ucomm        = cs_ucomms-back.
*      pv_label        = &apos;Back&apos;
*      pv_iconname     = &apos;ICON_SYSTEM_BACK&apos;.

  create object s_static_buttons-exit
    exporting
      pv_relay_button_name = &apos;EXIT&apos;
      pv_ucomm        = cs_ucomms-exit.
*      pv_label        = &apos;Exit&apos;
*      pv_iconname     = &apos;ICON_SYSTEM_END&apos;.

  create object s_static_buttons-cancel
    exporting
      pv_relay_button_name = &apos;CANCEL&apos;
      pv_ucomm        = cs_ucomms-cancel.
*      pv_label        = &apos;Cancel&apos;
*      pv_iconname     = &apos;ICON_SYSTEM_CANCEL&apos;.

  create object s_static_buttons-print
    exporting
      pv_relay_button_name = &apos;PRINT&apos;
      pv_ucomm        = cs_ucomms-print.
*      pv_label        = &apos;Print&apos;
*      pv_iconname     = &apos;ICON_SYSTEM_PRINT&apos;.

  create object s_static_buttons-find
    exporting
      pv_relay_button_name = &apos;FIND&apos;
      pv_ucomm        = cs_ucomms-find.
*      pv_label        = &apos;Find&apos;
*      pv_iconname     = &apos;ICON_SEARCH&apos;.

  create object s_static_buttons-find_next
    exporting
      pv_relay_button_name = &apos;FIND_NEXT&apos;
      pv_ucomm        = cs_ucomms-find_next.
*      pv_label        = &apos;Find Next&apos;
*      pv_iconname     = &apos;ICON_SEARCH_NEXT&apos;.

  create object s_static_buttons-page_top
    exporting
      pv_relay_button_name = &apos;PAGE_TOP&apos;
      pv_ucomm        = cs_ucomms-page_top.
*      pv_label        = &apos;First Page&apos;
*      pv_iconname     = &apos;ICON_FIRST_PAGE&apos;.

  create object s_static_buttons-page_up
    exporting
      pv_relay_button_name = &apos;PAGE_UP&apos;
      pv_ucomm        = cs_ucomms-page_up.
*      pv_label        = &apos;Previous Page&apos;
*      pv_iconname     = &apos;ICON_PREVIOUS_PAGE&apos;.

  create object s_static_buttons-page_down
    exporting
      pv_relay_button_name = &apos;PAGE_DOWN&apos;
      pv_ucomm        = cs_ucomms-page_down.
*      pv_label        = &apos;Next Page&apos;
*      pv_iconname     = &apos;ICON_NEXT_PAGE&apos;.

  create object s_static_buttons-page_last
    exporting
      pv_relay_button_name = &apos;PAGE_LAST&apos;
      pv_ucomm        = cs_ucomms-page_last.
*      pv_label        = &apos;Last Page&apos;
*      pv_iconname     = &apos;ICON_LAST_PAGE&apos;.

*  create object s_static_buttons-help &quot;Note this can be changed in pf-status (utilities-&gt;f-consistency)
*    exporting
*      pv_relay_button_name = &apos;HELP&apos;
*      pv_ucomm    = cs_ucomms-help.
**      pv_label    = &apos;Help&apos;
**      pv_iconname = &apos;ICON_SYSTEM_HELP&apos;.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method constructor.

  create object s_buttons-enter
    exporting
      pv_caption = &apos;Enter&apos;.

  create object s_buttons-save
    exporting
      pv_caption = &apos;Save&apos;.

  create object s_buttons-back
    exporting
      pv_caption = &apos;Back&apos;.

  create object s_buttons-exit
    exporting
      pv_caption = &apos;Exit&apos;.

  create object s_buttons-cancel
    exporting
      pv_caption = &apos;Cancel&apos;.

  create object s_buttons-print
    exporting
      pv_caption = &apos;Print&apos;.

  create object s_buttons-find
    exporting
      pv_caption = &apos;Find&apos;.

  create object s_buttons-find_next
    exporting
      pv_caption = &apos;Find Next&apos;.

  create object s_buttons-page_top
    exporting
      pv_caption = &apos;First Page&apos;.

  create object s_buttons-page_up
    exporting
      pv_caption = &apos;Previous Page&apos;.

  create object s_buttons-page_down
    exporting
      pv_caption = &apos;Next Page&apos;.

  create object s_buttons-page_last
    exporting
      pv_caption = &apos;Last Page&apos;.

*  create object s_buttons-help &quot;Note this can be changed in pf-status (utilities-&gt;f-consistency)
*    exporting
*      pv_caption  = &apos;Help&apos;.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="GET_BACK_BUTTON" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130208" CHANGEDBY="ITAJR" CHANGEDON="20130214" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="GET_BACK_BUTTON" SCONAME="PO_BUTTON" VERSION="1" LANGU="E" DESCRIPT="Frame Toolbar Button" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_FRAME_BUTTON"/>
   <source>method get_back_button.
  po_button = s_buttons-back.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="GET_CANCEL_BUTTON" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="GET_CANCEL_BUTTON" SCONAME="PO_BUTTON" VERSION="1" LANGU="E" DESCRIPT="Frame Toolbar Button" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_FRAME_BUTTON"/>
   <source>method get_cancel_button.
  po_button = s_buttons-cancel.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="GET_ENTER_BUTTON" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130217" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="GET_ENTER_BUTTON" SCONAME="PO_BUTTON" VERSION="1" LANGU="E" DESCRIPT="Frame Toolbar Button" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_FRAME_BUTTON"/>
   <source>method get_enter_button.
  po_button = s_buttons-enter.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="GET_EXIT_BUTTON" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130208" CHANGEDBY="ITAJR" CHANGEDON="20130217" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="GET_EXIT_BUTTON" SCONAME="PO_BUTTON" VERSION="1" LANGU="E" DESCRIPT="Frame Toolbar Button" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_FRAME_BUTTON"/>
   <source>method get_exit_button.
  po_button = s_buttons-exit.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="GET_INACTIVEBUTTON_UCOMMS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130217" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="GET_INACTIVEBUTTON_UCOMMS" SCONAME="PT_INACTIVE_UCOMMS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_PUBLICTYPES=&gt;TYT_UCOMM"/>
   <source>method get_inactivebutton_ucomms.

  data:
    active type xfeld.

  field-symbols:
    &lt;button&gt;  type ref to zcl_frame_button,
    &lt;ucomm&gt;   type syucomm.


  do.
    assign component sy-index of structure s_buttons to &lt;button&gt;.
    if sy-subrc eq 0.

      active = &lt;button&gt;-&gt;get_isactive( ).

      if active is initial.
        assign component sy-index of structure cs_ucomms to &lt;ucomm&gt;.
        append &lt;ucomm&gt; to pt_inactive_ucomms.
      endif.

    else.
      exit.
    endif.
  enddo.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="GET_SAVE_BUTTON" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130208" CHANGEDBY="ITAJR" CHANGEDON="20130217" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="GET_SAVE_BUTTON" SCONAME="PO_BUTTON" VERSION="1" LANGU="E" DESCRIPT="Frame Toolbar Button" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_FRAME_BUTTON"/>
   <source>method get_save_button.
  po_button = s_buttons-save.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_FRAME_TOOLBAR" CMPNAME="PBO" VERSION="1" LANGU="E" DESCRIPT="SCREEN_PBO" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130217" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method pbo.
  set_instance = me. &quot;set last incase there are multiple reassignments in PBO
*  set pf-status &apos;FRAME_TOOLBAR&apos; of program &apos;SAPLZ_SCREENS&apos;.
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_PUBLICTYPES" VERSION="1" LANGU="E" DESCRIPT="This is for types that need to be public(not allowed in 4.7)" UUID="3C3C44D20FA2F24A95B6D961FB3FE694" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="BCUSER" CREATEDON="20130107" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00">
  <types CLSNAME="ZCL_PUBLICTYPES" CMPNAME="TYT_UCOMM" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130314" TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="6 " SRCCOLUMN2="34 "/>
  <types CLSNAME="ZCL_PUBLICTYPES" CMPNAME="TYT_TABS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130314" TYPTYPE="4" SRCROW1="7 " SRCCOLUMN1="4 " SRCROW2="7 " SRCCOLUMN2="46 "/>
  <types CLSNAME="ZCL_PUBLICTYPES" CMPNAME="TYT_D021S" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130314" TYPTYPE="4" SRCROW1="8 " SRCCOLUMN1="4 " SRCROW2="8 " SRCCOLUMN2="32 "/>
  <types CLSNAME="ZCL_PUBLICTYPES" CMPNAME="TYT_APP_BUTTONS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="ITAJR" CREATEDON="20130314" CHANGEDBY="ITAJR" CHANGEDON="20130314" TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="4 " SRCROW2="9 " SRCCOLUMN2="54 "/>
  <friends CLSNAME="ZCL_PUBLICTYPES" REFCLSNAME="OBJECT" FRIENDTYPE="0" VERSION="1" STATE="0" AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000"/>
  <friends CLSNAME="ZCL_PUBLICTYPES" REFCLSNAME="ZCL_APP_TOOLBAR" FRIENDTYPE="0" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000"/>
  <friends CLSNAME="ZCL_PUBLICTYPES" REFCLSNAME="ZCL_FRAME_TOOLBAR" FRIENDTYPE="0" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000"/>
  <friends CLSNAME="ZCL_PUBLICTYPES" REFCLSNAME="ZCL_SCREEN" FRIENDTYPE="0" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000"/>
  <friends CLSNAME="ZCL_PUBLICTYPES" REFCLSNAME="ZCL_SCREENFRAME" FRIENDTYPE="0" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130314" CHANGEDON="00000000"/>
  <friends CLSNAME="ZCL_PUBLICTYPES" REFCLSNAME="ZCL_TABSTRIP" FRIENDTYPE="0" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000"/>
  <publicSection>class ZCL_PUBLICTYPES definition
  public
  final
  create public

  global friends ZCL_APP_TOOLBAR
                 ZCL_FRAME_TOOLBAR
                 ZCL_SCREEN
                 ZCL_SCREENFRAME
                 ZCL_TABSTRIP .

*&quot;* public components of class ZCL_PUBLICTYPES
*&quot;* do not include other source files here!!!
public section.</publicSection>
  <protectedSection>protected section.
*&quot;* protected components of class ZCL_PUBLICTYPES
*&quot;* do not include other source files here!!!</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_PUBLICTYPES
*&quot;* do not include other source files here!!!
private section.

  types:
    tyt_ucomm type table of syucomm,
    tyt_tabs type table of ref to zcl_tabbutton,
    tyt_d021s type table of d021s,
    tyt_app_buttons type table of ref to zcl_app_button.</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZCL_PUBLICTYPES" REFCLSNAME="OBJECT" VERSION="1" STATE="0" AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000"/>
 </CLAS>
 <CLAS CLSNAME="ZCL_SCREENBUTTON" VERSION="1" LANGU="E" UUID="B441C8BE53213843BBEBE7B9BC4FA0F3" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00">
  <implementing CLSNAME="ZCL_SCREENBUTTON" REFCLSNAME="ZIF_UCOMM_ACTION_LISTENER" VERSION="1" EXPOSURE="2" STATE="1" AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" RELTYPE="1"/>
  <publicSection>class ZCL_SCREENBUTTON definition
  public
  create public .

*&quot;* public components of class ZCL_SCREENBUTTON
*&quot;* do not include other source files here!!!
public section.

  interfaces ZIF_UCOMM_ACTION_LISTENER .

  data IS_ACTIVE type XFELD value &apos; &apos; read-only .
  data NAME type D021S-FNAM .
  data ICONNAME type ICONNAME .
  data ICON_ID type ICON_D .

  methods CONSTRUCTOR
    importing
      !PV_UCOMM type SYUCOMM
      !PV_LABEL type SMP_DYNTXT-ICON_TEXT
      !PV_ICONNAME type ICONNAME .
  methods ADD_ACTION_LISTENER
    importing
      !PO_ACTION_LISTENER type ref to ZIF_BUTTON_ACTION_LISTENER .
  methods REMOVE_ACTION_LISTENER
    importing
      !PO_ACTION_LISTENER type ref to ZIF_BUTTON_ACTION_LISTENER .</publicSection>
  <protectedSection>protected section.
*&quot;* protected components of class ZCL_BUTTON
*&quot;* do not include other source files here!!!</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_SCREENBUTTON
*&quot;* do not include other source files here!!!
private section.

  data LABEL type SMP_DYNTXT-ICON_TEXT .
  data:
    ACTION_LISTENERS type table of ref to zif_button_action_listener .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCL_SCREENBUTTON" CMPNAME="ACTION_LISTENERS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130217" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="7 " SRCCOLUMN1="4 " SRCROW2="7 " SRCCOLUMN2="67 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SCREENBUTTON" CMPNAME="ICONNAME" VERSION="1" LANGU="E" DESCRIPT="ICONNAME" EXPOSURE="2" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130217" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ICONNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SCREENBUTTON" CMPNAME="ICON_ID" VERSION="1" LANGU="E" DESCRIPT="ICON_ID" EXPOSURE="2" STATE="1" EDITORDER="4 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130217" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ICON_D" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SCREENBUTTON" CMPNAME="IS_ACTIVE" VERSION="1" LANGU="E" DESCRIPT="IS_ACTIVE" EXPOSURE="2" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" ATTDECLTYP="0" ATTRDONLY="X" ATTVALUE="&apos; &apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="XFELD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SCREENBUTTON" CMPNAME="LABEL" VERSION="1" LANGU="E" DESCRIPT="Menu Painter: Icon text (4.0)" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130217" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SMP_DYNTXT-ICON_TEXT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_SCREENBUTTON" CMPNAME="NAME" VERSION="1" LANGU="E" DESCRIPT="NAME" EXPOSURE="2" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <interfaceMethod CLSNAME="ZCL_SCREENBUTTON" CPDNAME="ZIF_UCOMM_ACTION_LISTENER~ACTION_RAISED">
   <source>method zif_ucomm_action_listener~action_raised.

  data:
    action_listener like line of action_listeners.

  loop at action_listeners into action_listener.
    action_listener-&gt;button_pressed( me ).
  endloop.

endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_SCREENBUTTON" CMPNAME="ADD_ACTION_LISTENER" VERSION="1" LANGU="E" DESCRIPT="ADD_ACTION_LISTENER" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENBUTTON" CMPNAME="ADD_ACTION_LISTENER" SCONAME="PO_ACTION_LISTENER" VERSION="1" LANGU="E" DESCRIPT="PO_ACTION_LISTENER" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_BUTTON_ACTION_LISTENER"/>
   <source>method add_action_listener.

  is_active = &apos;X&apos;.
  append po_action_listener to action_listeners.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENBUTTON" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENBUTTON" CMPNAME="CONSTRUCTOR" SCONAME="PV_UCOMM" VERSION="1" LANGU="E" DESCRIPT="PV_UCOMM" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130217" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUCOMM"/>
   <parameter CLSNAME="ZCL_SCREENBUTTON" CMPNAME="CONSTRUCTOR" SCONAME="PV_LABEL" VERSION="1" LANGU="E" DESCRIPT="PV_LABEL" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130217" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SMP_DYNTXT-ICON_TEXT"/>
   <parameter CLSNAME="ZCL_SCREENBUTTON" CMPNAME="CONSTRUCTOR" SCONAME="PV_ICONNAME" VERSION="1" LANGU="E" DESCRIPT="PV_ICONNAME" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDBY="ITAJR" CHANGEDON="20130217" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ICONNAME"/>
   <source>method constructor.

  zif_ucomm_action_listener~ucomm = pv_ucomm.
  label = pv_label.
  iconname = pv_iconname.

  zcl_ucomm_dispatcher=&gt;add_toolbarlistener( po_ucomm_listener = me pv_ucomm = pv_ucomm ).

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREENBUTTON" CMPNAME="REMOVE_ACTION_LISTENER" VERSION="1" LANGU="E" DESCRIPT="REMOVE_ACTION_LISTENER" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SCREENBUTTON" CMPNAME="REMOVE_ACTION_LISTENER" SCONAME="PO_ACTION_LISTENER" VERSION="1" LANGU="E" DESCRIPT="PO_ACTION_LISTENER" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130217" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_BUTTON_ACTION_LISTENER"/>
   <source>method REMOVE_ACTION_LISTENER .


    delete table action_listeners with table key table_line = po_action_listener.
    if action_listeners is initial.
      is_active = &apos; &apos;.
    endif.


endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_SELECTIONSCREEN" VERSION="1" LANGU="E" DESCRIPT="Encapsulates selection screen code as a subscreen." UUID="8D247975D9B069489C3557D56F7E03BF" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130310" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00" REFCLSNAME="ZCL_SCREEN">
  <publicSection>class ZCL_SELECTIONSCREEN definition
  public
  inheriting from ZCL_SCREEN
  create public .

*&quot;* public components of class ZCL_SELECTIONSCREEN
*&quot;* do not include other source files here!!!
public section.

  methods CONSTRUCTOR
    importing
      !PV_PROGRAM_OF_SELECTIONSCREEN type PROGNAME
      !PV_SCREEN_NUMBER type DYNNR .
  methods PBO .
  methods PAI .
  methods SET_LISTENER
    importing
      !PO_LISTENER type ref to ZIF_SELECTIONSCREEN_LISTENER .
  methods GET_TOOLBAR_BUTTON
    returning
      value(PO_BUTTON) type ref to ZCL_APP_BUTTON .</publicSection>
  <protectedSection>*&quot;* protected components of class ZCL_SELECTIONSCREEN
*&quot;* do not include other source files here!!!
protected section.

  methods GET_ELEMENTS
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_SELECTIONSCREEN
*&quot;* do not include other source files here!!!
private section.

  data SCREENAREA type ref to ZCL_SUBSCREENAREA .
  data SELSCRGROUP type PROGNAME .
  data SELSCRNUMBER type DYNNR .
  data:
    t_elements type table of ref to zcl_screenfield .
  data CONSTRUCTOR_GET_ELEMENTS type FLAG value &apos;X&apos; .
  data ENTRY_LISTENER type ref to ZIF_SELECTIONSCREEN_LISTENER .
  data BTN_ENTER type ref to ZCL_APP_BUTTON .
  data LSNR_BTN_ENTER type ref to LCL_LSNR_BTN_ENTER .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations



*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_lsnr_btn_enter
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_lsnr_btn_enter IMPLEMENTATION.

  method constructor.



  endmethod.


  method set_lsnr_selection.

    lsnr_selection = po_listener.

  endmethod.


  method zif_button_action_listener~button_pressed.

    if lsnr_selection is not initial.
      lsnr_selection-&gt;enter_btn_pressed( ).
    endif.

  endmethod.

ENDCLASS.               &quot;lcl_lsnr_btn_enter</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section



class lcl_lsnr_btn_enter definition.

  public section.
    methods:
      constructor,
      set_lsnr_selection
            importing
              po_listener type ref to zif_selectionscreen_listener.

    interfaces:
      zif_button_action_listener.

  private section.
    data:
      lsnr_selection  type ref to zif_selectionscreen_listener.

endclass.                    &quot;lcl_lsnr_btn_enter DEFINITION</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="BTN_ENTER" VERSION="1" LANGU="E" DESCRIPT="Application Toolbar Button" EXPOSURE="0" STATE="1" EDITORDER="7 " AUTHOR="ITAJR" CREATEDON="20130405" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_APP_BUTTON" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="CONSTRUCTOR_GET_ELEMENTS" VERSION="1" LANGU="E" DESCRIPT="General Flag" EXPOSURE="0" STATE="1" EDITORDER="5 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" ATTDECLTYP="0" ATTVALUE="&apos;X&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="FLAG" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="ENTRY_LISTENER" VERSION="1" LANGU="E" DESCRIPT="Selection screen action listener" EXPOSURE="0" STATE="1" EDITORDER="6 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZIF_SELECTIONSCREEN_LISTENER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="LSNR_BTN_ENTER" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="8 " AUTHOR="ITAJR" CREATEDON="20130405" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="LCL_LSNR_BTN_ENTER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="SCREENAREA" VERSION="1" LANGU="E" DESCRIPT="Encapsultes a subscreen container" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_SUBSCREENAREA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="SELSCRGROUP" VERSION="1" LANGU="E" DESCRIPT="SELSCRGROUP" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130310" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="PROGNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="SELSCRNUMBER" VERSION="1" LANGU="E" DESCRIPT="SELSCRNUMBER" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130310" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="DYNNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="T_ELEMENTS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130405" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="4 " SRCROW2="9 " SRCCOLUMN2="50 "/>
  <inheritance CLSNAME="ZCL_SELECTIONSCREEN" REFCLSNAME="ZCL_SCREEN" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130310">
   <redefinition CLSNAME="ZCL_SELECTIONSCREEN" REFCLSNAME="ZCL_SCREEN" VERSION="1" MTDNAME="GET_ELEMENTS"/>
  </inheritance>
  <method CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="CONSTRUCTOR" SCONAME="PV_PROGRAM_OF_SELECTIONSCREEN" VERSION="1" LANGU="E" DESCRIPT="PV_PROGRAM_OF_SELECTIONSCREEN" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PROGNAME"/>
   <parameter CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="CONSTRUCTOR" SCONAME="PV_SCREEN_NUMBER" VERSION="1" LANGU="E" DESCRIPT="PV_SCREEN_NUMBER" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DYNNR"/>
   <source>method constructor.

  data:
    begin of s_elements,
      selscreen type ref to zcl_subscreenarea,
    end of s_elements.

  super-&gt;constructor(
    pv_program_of_screen = &apos;Z_SCREENS&apos;
    pv_screen_number = &apos;0003&apos;).

  get_elements( changing ps_elements = s_elements ).
  clear constructor_get_elements.

  screenarea = s_elements-selscreen.
  screenarea-&gt;prog = selscrgroup = pv_program_of_selectionscreen.
  screenarea-&gt;dynr = selscrnumber = pv_screen_number.

  zcl_ucomm_dispatcher=&gt;register_selectionscreen( me ).

*  Create Toolbar Button
**********************************************************************
  create object btn_enter
    exporting
      pv_iconname = &apos;@2K@&apos;
      pv_label = &apos;&apos;
      pv_caption = &apos;Enter&apos;.

  create object lsnr_btn_enter.

  btn_enter-&gt;add_action_listener( lsnr_btn_enter ).
**********************************************************************

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SCREEN" CMPNAME="GET_ELEMENTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method get_elements.
* Populate screen fields table with passed elements (zcl_screenfield objects only).

  data:
    lo_structdesc   type ref to cl_abap_structdescr,
    name            like  zcl_screenfield=&gt;name,
    lo_screenfield  type ref to zcl_screenfield.

  field-symbols:
    &lt;compdesc&gt;    type abap_compdescr,
    &lt;element&gt;     type any.



 &quot;For some reason can&apos;t call the super&apos;s implementation of get_elements in the constructor therefore need to do
* it here but with attribute set to indicate it is the super&apos;s element set wanted then this attribute can be cleared
* and users of this class get this classes reimplemention of the method.
  if constructor_get_elements eq &apos;X&apos;.
    super-&gt;get_elements( changing ps_elements = ps_elements ).
    return.
  endif.


  lo_structdesc ?= cl_abap_structdescr=&gt;describe_by_data( ps_elements ).

  if lo_structdesc-&gt;type_kind ne &apos;v&apos; and lo_structdesc-&gt;type_kind ne &apos;u&apos;.
    return. &quot;Raise exception - not a structure of screen elements.
  endif.

  loop at lo_structdesc-&gt;components assigning &lt;compdesc&gt;.

    name = &lt;compdesc&gt;-name.

    create object lo_screenfield
      exporting
        pv_name       = name
        pv_screenname = name.

    assign component &lt;compdesc&gt;-name of structure ps_elements to &lt;element&gt;.

    try.
        &lt;element&gt; ?= lo_screenfield.
        append lo_screenfield to t_elements.
      catch cx_sy_move_cast_error.

    endtry.

  endloop.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="GET_TOOLBAR_BUTTON" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130405" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="GET_TOOLBAR_BUTTON" SCONAME="PO_BUTTON" VERSION="1" LANGU="E" DESCRIPT="Application Toolbar Button" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130405" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_APP_BUTTON"/>
   <source>method get_toolbar_button.

  po_button = btn_enter.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="PAI" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method pai.

  data:
    lo_field  type ref to zcl_screenfield,
    lv_fname  type string.

  field-symbols:
    &lt;progfield&gt; type any.

  loop at t_elements into lo_field.

    concatenate &apos;(&apos; selscrgroup &apos;)&apos; lo_field-&gt;name &apos;[]&apos; into lv_fname.
    assign (lv_fname) to &lt;progfield&gt;.

    if sy-subrc &lt;&gt; 0.
      concatenate &apos;(&apos; selscrgroup &apos;)&apos; lo_field-&gt;name into lv_fname.
      assign (lv_fname) to &lt;progfield&gt;.
    endif.

    lo_field-&gt;set_value( &lt;progfield&gt; ).
  endloop.


*  Get UCOMM
**********************************************************************
  field-symbols:
   &lt;sscrfields&gt; type sscrfields.

  concatenate &apos;(&apos; selscrgroup &apos;)sscrfields&apos; into lv_fname.
  assign (lv_fname) to &lt;sscrfields&gt;.
  if &lt;sscrfields&gt;-ucomm eq &apos;ENTER&apos; and entry_listener is not initial.
*    try.
        entry_listener-&gt;entry_made( ).
*      catch cx_sy_dyn_call_illegal_method. &quot;Possible issue if method not defined.
*
*    endtry.
  endif.
**********************************************************************


endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="PBO" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PBO .
  &quot;Could set default values on output here.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="SET_LISTENER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDBY="ITAJR" CHANGEDON="20130310" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SELECTIONSCREEN" CMPNAME="SET_LISTENER" SCONAME="PO_LISTENER" VERSION="1" LANGU="E" DESCRIPT="Selection screen action listener" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_SELECTIONSCREEN_LISTENER"/>
   <source>method set_listener.
  entry_listener = po_listener.
  lsnr_btn_enter-&gt;set_lsnr_selection( po_listener ).
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_SUBSCREENAREA" VERSION="1" LANGU="E" DESCRIPT="Encapsultes a subscreen container" UUID="31089365C5F19B479948C4187F436DEE" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="BCUSER" CREATEDON="20130104" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00">
  <friends CLSNAME="ZCL_SUBSCREENAREA" REFCLSNAME="ZCL_SELECTIONSCREEN" FRIENDTYPE="0" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000"/>
  <publicSection>class ZCL_SUBSCREENAREA definition
  public
  create public

  global friends ZCL_SELECTIONSCREEN .

*&quot;* public components of class ZCL_SUBSCREENAREA
*&quot;* do not include other source files here!!!
public section.

  data NAME type D021S-FNAM read-only .
  data SCREENNAME type D021S-FNAM read-only .

  methods CONSTRUCTOR
    importing
      !PV_NAME type D021S-FNAM
      !PV_SCREENNAME type D021S-FNAM .
  methods SET_SUBSCREEN
    importing
      !PO_SCREEN type ref to ZCL_SCREEN .
  methods GET_SUBSCREEN
    returning
      value(PO_SCREEN) type ref to ZCL_SCREEN .
  methods REMOVE_SUBSCREEN
    returning
      value(PO_SCREEN) type ref to ZCL_SCREEN .</publicSection>
  <protectedSection>protected section.
*&quot;* protected components of class ZCL_SUBSCREENAREA
*&quot;* do not include other source files here!!!</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_SUBSCREENAREA
*&quot;* do not include other source files here!!!
private section.

  data O_SCREEN type ref to ZCL_SCREEN .
  data PROG type PROGNAME .
  data DYNR type DYNNR .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="DYNR" VERSION="1" LANGU="E" DESCRIPT="Number of the following screen" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="DYNNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="NAME" VERSION="1" LANGU="E" DESCRIPT="NAME" EXPOSURE="2" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130206" ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="O_SCREEN" VERSION="1" LANGU="E" DESCRIPT="O_SCREEN" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_SCREEN" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="PROG" VERSION="1" LANGU="E" DESCRIPT="ABAP Program Name" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="PROGNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="SCREENNAME" VERSION="1" LANGU="E" DESCRIPT="Field name" EXPOSURE="2" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130206" CHANGEDBY="ITAJR" CHANGEDON="20130206" ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <method CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="CONSTRUCTOR" SCONAME="PV_NAME" VERSION="1" LANGU="E" DESCRIPT="PV_NAME" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="D021S-FNAM"/>
   <parameter CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="CONSTRUCTOR" SCONAME="PV_SCREENNAME" VERSION="1" LANGU="E" DESCRIPT="Field name" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130206" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="D021S-FNAM"/>
   <source>method constructor.

  name =  pv_name.
  screenname = pv_screenname.
  prog = &apos;Z_SCREENS&apos;.
  dynr = &apos;0002&apos;.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="GET_SUBSCREEN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="GET_SUBSCREEN" SCONAME="PO_SCREEN" VERSION="1" LANGU="E" DESCRIPT="Links function group screen to object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_SCREEN"/>
   <source>method get_subscreen.

  po_screen = o_screen.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="REMOVE_SUBSCREEN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="REMOVE_SUBSCREEN" SCONAME="PO_SCREEN" VERSION="1" LANGU="E" DESCRIPT="Links function group screen to object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_SCREEN"/>
   <source>method remove_subscreen.

  prog = &apos;Z_SCREENS&apos;.
  dynr = &apos;0002&apos;.
  po_screen = o_screen.
  clear o_screen.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="SET_SUBSCREEN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SUBSCREENAREA" CMPNAME="SET_SUBSCREEN" SCONAME="PO_SCREEN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_SCREEN"/>
   <source>method set_subscreen.

  o_screen = po_screen.
  prog = o_screen-&gt;screengroup.
  dynr = o_screen-&gt;screennumber.

endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_TABBUTTON" VERSION="1" LANGU="E" UUID="051420DBC96E2748BDF105C200B41F5E" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="BCUSER" CREATEDON="20130112" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00">
  <implementing CLSNAME="ZCL_TABBUTTON" REFCLSNAME="ZIF_UCOMM_ACTION_LISTENER" VERSION="1" EXPOSURE="2" STATE="1" AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" RELTYPE="1"/>
  <publicSection>class ZCL_TABBUTTON definition
  public
  create public .

*&quot;* public components of class ZCL_TABBUTTON
*&quot;* do not include other source files here!!!
public section.

  interfaces ZIF_UCOMM_ACTION_LISTENER .

  data LABEL type STRING .
  data NAME type D021S-FNAM .
  data SCREEN type ref to ZCL_SCREEN .
  data UCOMM type D021S-RES1 .
  data SCREENFNAME type D021S-FNAM .

  methods CONSTRUCTOR
    importing
      !PV_NAME type D021S-FNAM
      !PV_LABEL type ref to DATA optional
      !PV_SCREENNAME type D021S-FNAM .
  methods SET_LABEL
    importing
      !PV_LABEL type C .
  methods SET_SCREEN
    importing
      !PO_SCREEN type ref to ZCL_SCREEN .
  methods ADD_ACTION_LISTENER
    importing
      !PO_LISTENER type ref to ZIF_BUTTON_ACTION_LISTENER .
  methods GET_SCREENAREA
    returning
      value(PO_SCREENAREA) type ref to ZCL_SUBSCREENAREA .
  methods SET_INVISIBLE
    importing
      !PV_IS_INVISIBLE type FLAG .
  methods SET_SCREEN_ATTRIBUTES
    changing
      value(PV_SCREEN_ATTRIBUTES) type SCREEN .
  methods GET_INVISIBLE
    returning
      value(PV_IS_INVISIBLE) type FLAG .
  methods GET_LABEL
    returning
      value(PV_LABEL) type CHAR70 .
  methods GET_SCREEN
    returning
      value(PO_SCREEN) type ref to ZCL_SCREEN .</publicSection>
  <protectedSection>protected section.
*&quot;* protected components of class ZCL_TABBUTTON
*&quot;* do not include other source files here!!!</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_TABBUTTON
*&quot;* do not include other source files here!!!
private section.

  data:
    ACTION_LISTENERS type table of ref to zif_button_action_listener .
  data SCREENAREA type ref to ZCL_SUBSCREENAREA .
  data SCREENNAME type D021S-FNAM .
  data SCREEN_ATTRIBUTES type SCREEN .
  data ATT_CHANGED type FLAG .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCL_TABBUTTON" CMPNAME="ACTION_LISTENERS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130403" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="6 " SRCCOLUMN2="67 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABBUTTON" CMPNAME="ATT_CHANGED" VERSION="1" LANGU="E" DESCRIPT="General Flag" EXPOSURE="0" STATE="1" EDITORDER="9 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="FLAG" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABBUTTON" CMPNAME="LABEL" VERSION="1" LANGU="E" DESCRIPT="LABEL" EXPOSURE="2" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABBUTTON" CMPNAME="NAME" VERSION="1" LANGU="E" DESCRIPT="NAME" EXPOSURE="2" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABBUTTON" CMPNAME="SCREEN" VERSION="1" LANGU="E" DESCRIPT="SUBSCREEN" EXPOSURE="2" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_SCREEN" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABBUTTON" CMPNAME="SCREENAREA" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_SUBSCREENAREA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABBUTTON" CMPNAME="SCREENFNAME" VERSION="1" LANGU="E" DESCRIPT="Field name" EXPOSURE="2" STATE="1" EDITORDER="10 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABBUTTON" CMPNAME="SCREENNAME" VERSION="1" LANGU="E" DESCRIPT="Field name" EXPOSURE="0" STATE="1" EDITORDER="7 " AUTHOR="ITAJR" CREATEDON="20130206" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABBUTTON" CMPNAME="SCREEN_ATTRIBUTES" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="8 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SCREEN" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABBUTTON" CMPNAME="UCOMM" VERSION="1" LANGU="E" DESCRIPT="UCOMM" EXPOSURE="2" STATE="1" EDITORDER="4 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-RES1" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <interfaceMethod CLSNAME="ZCL_TABBUTTON" CPDNAME="ZIF_UCOMM_ACTION_LISTENER~ACTION_RAISED">
   <source>method ZIF_UCOMM_ACTION_LISTENER~ACTION_RAISED .

  data:
    lo_action_listener  like line of action_listeners.

  loop at action_listeners into lo_action_listener.
    lo_action_listener-&gt;button_pressed( me ).
  endloop.

endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_TABBUTTON" CMPNAME="ADD_ACTION_LISTENER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABBUTTON" CMPNAME="ADD_ACTION_LISTENER" SCONAME="PO_LISTENER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_BUTTON_ACTION_LISTENER"/>
   <source>method ADD_ACTION_LISTENER .
  append po_listener to action_listeners.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABBUTTON" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABBUTTON" CMPNAME="CONSTRUCTOR" SCONAME="PV_NAME" VERSION="1" LANGU="E" DESCRIPT="PV_NAME" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="D021S-FNAM"/>
   <parameter CLSNAME="ZCL_TABBUTTON" CMPNAME="CONSTRUCTOR" SCONAME="PV_LABEL" VERSION="1" LANGU="E" DESCRIPT="PV_LABEL" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TABBUTTON" CMPNAME="CONSTRUCTOR" SCONAME="PV_SCREENNAME" VERSION="1" LANGU="E" DESCRIPT="Field name" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130206" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="D021S-FNAM"/>
   <source>method constructor .

  name = pv_name.
  screenname = pv_screenname.
*  ucomm = pv_ucomm.

  create object screenarea
    exporting
      pv_name = &apos;sub&apos;
      pv_screenname = &apos;sub&apos;.

*  control-&gt;activetab = activetab-&gt;ucomm.
**   ACTIVETAB         Types   CHAR  132
**   %_SCROLLPOSITION  Types   CHAR  132
**   INVISIBLE         Types   CHAR  1 TODO check whether setting this has an effect.
*
** NOTES
** The tabstrip control variable must be accessed in order for it to be generated
** and for the tabstrip to show on the screen.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABBUTTON" CMPNAME="GET_INVISIBLE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130307" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABBUTTON" CMPNAME="GET_INVISIBLE" SCONAME="PV_IS_INVISIBLE" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130307" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
   <source>method get_invisible.

  if screen_attributes-invisible is initial.
    clear pv_is_invisible.
  else.
    pv_is_invisible = &apos;X&apos;.
  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABBUTTON" CMPNAME="GET_LABEL" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130309" CHANGEDBY="ITAJR" CHANGEDON="20130309" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABBUTTON" CMPNAME="GET_LABEL" SCONAME="PV_LABEL" VERSION="1" LANGU="E" DESCRIPT="Character field, length 70" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130309" CHANGEDBY="ITAJR" CHANGEDON="20130309" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR70"/>
   <source>method get_label.
  pv_label = label.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABBUTTON" CMPNAME="GET_SCREEN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130403" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABBUTTON" CMPNAME="GET_SCREEN" SCONAME="PO_SCREEN" VERSION="1" LANGU="E" DESCRIPT="Links function group screen to object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130403" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_SCREEN"/>
   <source>method get_screen.
  po_screen = screen.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABBUTTON" CMPNAME="GET_SCREENAREA" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABBUTTON" CMPNAME="GET_SCREENAREA" SCONAME="PO_SCREENAREA" VERSION="1" LANGU="E" DESCRIPT="Encapsultes a subscreen container" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_SUBSCREENAREA"/>
   <source>method get_screenarea.
  po_screenarea = screenarea.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABBUTTON" CMPNAME="SET_INVISIBLE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABBUTTON" CMPNAME="SET_INVISIBLE" SCONAME="PV_IS_INVISIBLE" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG"/>
   <source>method set_invisible.
  if pv_is_invisible is initial.
    clear screen_attributes-invisible.
    att_changed = &apos;X&apos;.
  else.
    screen_attributes-invisible = &apos;1&apos;.
    att_changed = &apos;X&apos;.
  endif.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABBUTTON" CMPNAME="SET_LABEL" VERSION="1" LANGU="E" DESCRIPT="SET_LABEL" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABBUTTON" CMPNAME="SET_LABEL" SCONAME="PV_LABEL" VERSION="1" LANGU="E" DESCRIPT="PV_LABEL" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <source>method set_label.
  label = pv_label.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABBUTTON" CMPNAME="SET_SCREEN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABBUTTON" CMPNAME="SET_SCREEN" SCONAME="PO_SCREEN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_SCREEN"/>
   <source>method set_screen.

  screen = po_screen.
  screenarea-&gt;set_subscreen( po_screen ).

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABBUTTON" CMPNAME="SET_SCREEN_ATTRIBUTES" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABBUTTON" CMPNAME="SET_SCREEN_ATTRIBUTES" SCONAME="PV_SCREEN_ATTRIBUTES" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SCREEN"/>
   <source>method set_screen_attributes.
  if att_changed eq &apos;X&apos;.
    pv_screen_attributes-invisible =  screen_attributes-invisible.
  endif.
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_TABSTRIP" VERSION="1" LANGU="E" DESCRIPT="Holds array of tabs" UUID="08BA5B16D3213941BC6B7430FC2CE08A" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="BCUSER" CREATEDON="20130116" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00">
  <types CLSNAME="ZCL_TABSTRIP" CMPNAME="TYT_LISTENERS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130307" TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="6 " SRCCOLUMN2="59 " R3RELEASE="620"/>
  <types CLSNAME="ZCL_TABSTRIP" CMPNAME="TYS_TAB" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="9 " SRCCOLUMN2="17 " R3RELEASE="620"/>
  <types CLSNAME="ZCL_TABSTRIP" CMPNAME="TYT_TABS" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="4 " SRCROW2="11 " SRCCOLUMN2="33 " R3RELEASE="620"/>
  <implementing CLSNAME="ZCL_TABSTRIP" REFCLSNAME="ZIF_BUTTON_ACTION_LISTENER" VERSION="1" EXPOSURE="2" STATE="1" AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" RELTYPE="1"/>
  <publicSection>class ZCL_TABSTRIP definition
  public
  final
  create public .

*&quot;* public components of class ZCL_TABSTRIP
*&quot;* do not include other source files here!!!
public section.

  interfaces ZIF_BUTTON_ACTION_LISTENER .

  data NAME type D021S-FNAM read-only .
  data SCREENNAME type D021S-FNAM read-only .

  methods APPEND_TAB
    importing
      !PO_TAB type ref to ZCL_TABBUTTON .
  type-pools CXTAB .
  methods CONSTRUCTOR
    importing
      !PV_NAME type D021S-FNAM
      !PS_CONTROL type ref to CXTAB_TABSTRIP
      !PV_NUMBEROFTABS type N
      !PV_SCREENNAME type D021S-FNAM .
  methods PBO .
  methods MODIFY_SCREENATTRIBUTES
    changing
      !PT_D021S type ZCL_PUBLICTYPES=&gt;TYT_D021S .
  methods REMOVE_TAB
    importing
      !PO_TAB type ref to ZCL_TABBUTTON .
  methods GET_TAB
    importing
      !PV_TAB_INDEX type I
    returning
      value(PO_TAB) type ref to ZCL_TABBUTTON .</publicSection>
  <protectedSection>protected section.
*&quot;* protected components of class ZCL_TABSTRIP
*&quot;* do not include other source files here!!!

  types:
    begin of tys_tab,
      tab   type ref to zcl_tabbutton,
      ucomm type syucomm,
    end of tys_tab,

    tyt_tabs type table of tys_tab.</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_TABSTRIP
*&quot;* do not include other source files here!!!
private section.

  types:
    TYT_LISTENERS type table of ref to lcl_tabactionlistener .

  data ACTIVETAB type ref to ZCL_TABBUTTON .
  type-pools CXTAB .
  data CONTROL type ref to CXTAB_TABSTRIP .
  data SCR type ref to ZCL_SUBSCREENAREA .
  data TABS type ref to DATA .
  data T_LISTENERS type TYT_LISTENERS .

  methods CONSTRUCTOR620
    importing
      !PV_NAME type D021S-FNAM
      !PS_CONTROL type ref to CXTAB_TABSTRIP
      !PV_NUMBEROFTABS type N
      !PV_SCREENNAME type D021S-FNAM .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations

class lcl_tabactionlistener implementation.

  method set_tabbutton_actor.
    tabbutton_actor = po_tabbutton_actor.
  endmethod.

  method zif_ucomm_action_listener~action_raised.
    tabbutton_actor-&gt;action_raised( ).
  endmethod.

endclass.</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section

class lcl_tabactionlistener definition.

  public section.

    interfaces:
      zif_ucomm_action_listener.

    data:
      ucomm type syucomm.

    methods:
      set_tabbutton_actor
        importing
          po_tabbutton_actor type ref to zif_ucomm_action_listener. &quot;Could use zcl_tabbutton instead.

  private section.

    data:
      tabbutton_actor type ref to zif_ucomm_action_listener.

endclass.</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZCL_TABSTRIP" TYPEGROUP="CXTAB" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>CXTAB</forwardDeclaration>
  <attribute CLSNAME="ZCL_TABSTRIP" CMPNAME="ACTIVETAB" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_TABBUTTON" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABSTRIP" CMPNAME="CONTROL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CXTAB_TABSTRIP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABSTRIP" CMPNAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Screen defined name" EXPOSURE="2" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130206" ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABSTRIP" CMPNAME="SCR" VERSION="1" LANGU="E" DESCRIPT="Encapsultes a subscreen container" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_SUBSCREENAREA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABSTRIP" CMPNAME="SCREENNAME" VERSION="1" LANGU="E" DESCRIPT="Instance screen name" EXPOSURE="2" STATE="1" EDITORDER="7 " AUTHOR="ITAJR" CREATEDON="20130206" CHANGEDON="00000000" ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="D021S-FNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABSTRIP" CMPNAME="TABS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_TABSTRIP" CMPNAME="T_LISTENERS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYT_LISTENERS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <interfaceMethod CLSNAME="ZCL_TABSTRIP" CPDNAME="ZIF_BUTTON_ACTION_LISTENER~BUTTON_PRESSED">
   <source>method zif_button_action_listener~button_pressed.

  activetab ?= po_originator.
  scr = activetab-&gt;get_screenarea( ).
*  control-&gt;activetab = activetab-&gt;ucomm. Only if given unique control variable in z_screens functiongroup.

endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_TABSTRIP" CMPNAME="APPEND_TAB" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="APPEND_TAB" SCONAME="PO_TAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_TABBUTTON"/>
   <source>method append_tab.

  data:
    lo_listener type ref to lcl_tabactionlistener.

  field-symbols:
    &lt;tab&gt;   type ref to object,
    &lt;tabs&gt;  type any.


  assign tabs-&gt;* to &lt;tabs&gt;.

  do.
    assign component sy-index of structure &lt;tabs&gt; to &lt;tab&gt;.
    if sy-subrc eq 0.
      if &lt;tab&gt; is initial.

        &lt;tab&gt; = po_tab.
        po_tab-&gt;add_action_listener( me ).

        read table t_listeners index sy-index into lo_listener.
        lo_listener-&gt;set_tabbutton_actor( po_tab ).

        if sy-index eq 1.
          activetab = po_tab.
          scr = activetab-&gt;get_screenarea( ).
        endif.

        exit.

      else.
        continue.
      endif.
    else.
      exit.
    endif.
  enddo.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABSTRIP" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="CONSTRUCTOR" SCONAME="PV_NAME" VERSION="1" LANGU="E" DESCRIPT="Field name" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="D021S-FNAM"/>
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="CONSTRUCTOR" SCONAME="PS_CONTROL" VERSION="1" LANGU="E" DESCRIPT="Screen fields" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CXTAB_TABSTRIP"/>
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="CONSTRUCTOR" SCONAME="PV_NUMBEROFTABS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="N"/>
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="CONSTRUCTOR" SCONAME="PV_SCREENNAME" VERSION="1" LANGU="E" DESCRIPT="Field name" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130206" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="D021S-FNAM"/>
   <source>method constructor.

*  data:
*    tabnum                type n length 1,
*    lo_tabactionlistener  type ref to lcl_tabactionlistener,
*    components            type abap_component_tab, component like line of components,
*    obj                   type ref to object.

  if sy-saprl &lt; 700. &quot;//TODO confirm version that create structure method is available.
    constructor620(
      pv_name = pv_name
      pv_screenname = pv_screenname
      ps_control = ps_control
      pv_numberoftabs = pv_numberoftabs ).
  endif.

*  name = pv_name.
*  screenname = pv_screenname.
*  control = ps_control.
*
*  component-type ?= cl_abap_datadescr=&gt;describe_by_data( obj ).
*
*  do pv_numberoftabs times.
*
*    add 1 to tabnum.
*
*    concatenate &apos;T&apos; tabnum into component-name.
*    append component to components.
*
*    create object lo_tabactionlistener.
*    lo_tabactionlistener-&gt;ucomm = zcl_ucomm_dispatcher=&gt;add_listener( lo_tabactionlistener ).
*    append lo_tabactionlistener to t_listeners.
*
*  enddo.
*
*  create object scr
*    exporting
*      pv_name = &apos;SCR&apos;.
*
** Create dynamic structure to hold tabs, so that the screen can reference their labels.
*  data:
*    structype type ref to cl_abap_structdescr.
*
*  structype = cl_abap_structdescr=&gt;create( components ).
*  create data tabs type handle structype.
*
** Assign inital components into the newly created dynamic structure?




**        data:
**          lt_tabs type table of ref to zcl_tabbutton.
*
**        clear lt_tabs.
*
*        do.
*          add 1 to tabix.
*          read table pt_scr_element_names index tabix into ls_subelem.
*          if ls_subelem-ltyp ne &apos;I&apos;.
*            subtract 1 from tabix.
*            exit.
*          endif.
*
*          case ls_subelem-fill.
*
*            when c_pushbutton.
**          *********************************************************
*              condense ls_subelem-res1.
*
*              create object lo_tab
*                exporting
*                  pv_name  = ls_subelem-fnam
*                  pv_ucomm = ls_subelem-res1.
*
*              lo_tab-&gt;set_label( ls_subelem-fnam ).
*
*              append lo_tab to lt_tabs.
*              append lo_tab to t_elements.
*
*              component-name = ls_subelem-fnam.
*              append component to components.
*
*              assign component ls_subelem-fnam of structure &lt;ps_elements&gt; to &lt;p_element&gt;.
*              if sy-subrc eq 0.
*                &lt;p_element&gt; = lo_tab.
*              endif.
*
*            when c_subscreenarea.
**          *********************************************************
*              create object lo_screen_area
*                exporting
*                  pv_name = ls_subelem-fnam.
*
*              append lo_screen_area to t_elements.
*
*              component-name = ls_subelem-fnam.
**              read table pt_scr_element_symbols index lv_tabix into ls_element_symbols.
**              component-name = ls_element_symbols-fnam.
*              append component to components.
*
*              assign component ls_subelem-fnam of structure &lt;ps_elements&gt; to &lt;p_element&gt;.
*              if sy-subrc eq 0.
*                &lt;p_element&gt; = lo_screen_area.
*              endif.
*
*          endcase.
*
*        enddo.
*
*        create object lo_tabstrip
*          exporting
*            pv_name          = ls_element_names-fnam
*            pv_control       = ls_element_names-fnam
*            pt_tabs          = lt_tabs
*            po_subscreenarea = lo_screen_area.
*
*        append lo_tabstrip to t_elements.
*
*        component-name = ls_element_names-fnam.
*        append component to components.
*
*        assign component ls_element_names-fnam of structure &lt;ps_elements&gt; to &lt;p_element&gt;.
*        if sy-subrc eq 0.
*          &lt;p_element&gt; = lo_tabstrip.
*        endif.
**        catch wrong type exception.
**        can be skipped and resumed if caught.
**        IF sy-subrc &lt;&gt; 0.
**
**        ENDIF.
*
**        catch system-exceptions MOVE_TO_LIT_NOTALLOWED_NODATA = 5.
**
**        endcatch.
**
**        TRY.
**          &lt;p_element&gt; = lo_tabstrip.
**        CATCH system-exceptions MOVE_TO_LIT_NOTALLOWED_NODATA.
**
**        ENDTRY.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABSTRIP" CMPNAME="CONSTRUCTOR620" VERSION="1" LANGU="E" DESCRIPT="Constructor compatible with SAP version 620" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130206" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="CONSTRUCTOR620" SCONAME="PV_NAME" VERSION="1" LANGU="E" DESCRIPT="Field name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130206" CHANGEDBY="ITAJR" CHANGEDON="20130206" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="D021S-FNAM"/>
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="CONSTRUCTOR620" SCONAME="PS_CONTROL" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130206" CHANGEDBY="ITAJR" CHANGEDON="20130206" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CXTAB_TABSTRIP"/>
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="CONSTRUCTOR620" SCONAME="PV_NUMBEROFTABS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130206" CHANGEDBY="ITAJR" CHANGEDON="20130206" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="N"/>
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="CONSTRUCTOR620" SCONAME="PV_SCREENNAME" VERSION="1" LANGU="E" DESCRIPT="Field name" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130206" CHANGEDBY="ITAJR" CHANGEDON="20130206" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="D021S-FNAM"/>
   <source>method constructor620.

  types:
    begin of tys_tabs,
      t01 type ref to object,
      t02 type ref to object,
      t03 type ref to object,
      t04 type ref to object,
      t05 type ref to object,
      t06 type ref to object,
      t07 type ref to object,
      t08 type ref to object,
      t09 type ref to object,
      t10 type ref to object,
    end of tys_tabs.

  data:
    screenname  type d021s-fnam,
*    tabnum                type n length 1,
    lo_tabactionlistener  type ref to lcl_tabactionlistener.&quot;,
*    components            type abap_component_tab, component like line of components,
*    obj                   type ref to object.



  name = pv_name.
  screenname = pv_screenname.
  control = ps_control.


*  concatenate

  create object scr
    exporting
      pv_name = &apos;SCR&apos;
      pv_screenname = &apos;SCR&apos;.


*  component-type ?= cl_abap_datadescr=&gt;describe_by_data( obj ).

  do pv_numberoftabs times.

*    add 1 to tabnum.

*    concatenate &apos;T&apos; tabnum into component-name.
*    append component to components.

    create object lo_tabactionlistener.
    lo_tabactionlistener-&gt;ucomm = zcl_ucomm_dispatcher=&gt;add_listener( lo_tabactionlistener ).
    append lo_tabactionlistener to t_listeners.

  enddo.


  create data tabs type tys_tabs.

** Create dynamic structure to hold tabs, so that the screen can reference their labels.
*  data:
*    structype type ref to cl_abap_structdescr.
*
*  structype = cl_abap_structdescr=&gt;create( components ).
*  create data tabs type handle structype.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABSTRIP" CMPNAME="GET_TAB" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130307" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="GET_TAB" SCONAME="PV_TAB_INDEX" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130307" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I"/>
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="GET_TAB" SCONAME="PO_TAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130307" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TABBUTTON"/>
   <source>method get_tab.

  data:
    lo_listener type ref to lcl_tabactionlistener.

  field-symbols:
    &lt;tab&gt;   type ref to object,
    &lt;tabs&gt;  type any.


  assign tabs-&gt;* to &lt;tabs&gt;.

  assign component pv_tab_index of structure &lt;tabs&gt; to &lt;tab&gt;.
  if sy-subrc eq 0.
    po_tab ?= &lt;tab&gt;.
  else.
    &quot;//TODO raise no tab available for index error.
    clear po_tab.
  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABSTRIP" CMPNAME="MODIFY_SCREENATTRIBUTES" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130206" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="MODIFY_SCREENATTRIBUTES" SCONAME="PT_D021S" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_PUBLICTYPES=&gt;TYT_D021S"/>
   <source>method MODIFY_SCREENATTRIBUTES .

  data:
    tabnum      type n length 1,
    ls_listener type ref to lcl_tabactionlistener.

  field-symbols:
    &lt;s_d021s&gt; like line of pt_d021s.


  loop at pt_d021s assigning &lt;s_d021s&gt;.
    if &lt;s_d021s&gt;-fill eq &apos;P&apos;. &quot;Pushbutton Type
      add 1 to tabnum.
      read table t_listeners index tabnum into ls_listener.
      &lt;s_d021s&gt;-res1 = ls_listener-&gt;ucomm.
      shift &lt;s_d021s&gt;-res1 right by 168 places. &quot;Must be placed here to be picked up.
    endif.
  endloop.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABSTRIP" CMPNAME="PBO" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method pbo.

  data:
    lo_listener type ref to lcl_tabactionlistener,
    lo_tab      type ref to zcl_tabbutton,
    t_tabs      type table of ref to zcl_tabbutton.

  field-symbols:
    &lt;tab&gt;   type ref to object,
    &lt;tabs&gt;  type any.


  assign tabs-&gt;* to &lt;tabs&gt;.

  do.
    assign component sy-index of structure &lt;tabs&gt; to &lt;tab&gt;.
    if sy-subrc eq 0.
      lo_tab ?= &lt;tab&gt;.
      if lo_tab is not initial.
        append lo_tab to t_tabs.
      endif.
      if &lt;tab&gt; eq activetab.
        read table t_listeners index sy-index into lo_listener.
        control-&gt;activetab = lo_listener-&gt;ucomm.
      else.
        continue.
      endif.
    else.
      exit.
    endif.
  enddo.

  loop at screen.

    read table t_tabs with key table_line-&gt;screenfname = screen-name into lo_tab.
    if sy-subrc eq 0.
      lo_tab-&gt;set_screen_attributes( changing pv_screen_attributes = screen ).
      modify screen.
    endif.

  endloop.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_TABSTRIP" CMPNAME="REMOVE_TAB" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDBY="ITAJR" CHANGEDON="20130306" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABSTRIP" CMPNAME="REMOVE_TAB" SCONAME="PO_TAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_TABBUTTON"/>
   <source>method remove_tab.
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <INTF CLSNAME="ZIF_BUTTON_ACTION_LISTENER" VERSION="1" LANGU="E" UUID="12DE4C94659E854FBE754F72A442C482" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="BCUSER" CREATEDON="20121231" CHANGEDON="00000000" CHGDANYON="00000000" UNICODE="X" R3RELEASE="620">
  <method CLSNAME="ZIF_BUTTON_ACTION_LISTENER" CMPNAME="BUTTON_PRESSED" VERSION="1" LANGU="E" DESCRIPT="BUTTON_PRESSED" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_BUTTON_ACTION_LISTENER" CMPNAME="BUTTON_PRESSED" SCONAME="PO_ORIGINATOR" VERSION="1" LANGU="E" DESCRIPT="PO_ORIGINATOR" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="OBJECT"/>
  </method>
 </INTF>
 <INTF CLSNAME="ZIF_FIELD_ENTRY_LISTENER" VERSION="1" LANGU="E" DESCRIPT="Catches values entered into screens" UUID="1B9BCC3AD6BE72478C9906E3E865DA3F" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" CHGDANYON="00000000" UNICODE="X" R3RELEASE="620">
  <method CLSNAME="ZIF_FIELD_ENTRY_LISTENER" CMPNAME="FIELD_ENTRY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130306" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0"/>
 </INTF>
 <INTF CLSNAME="ZIF_SELECTIONSCREEN_LISTENER" VERSION="1" LANGU="E" DESCRIPT="Selection screen action listener" UUID="2522B86764AB7B478BD1A3692E6CE384" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" CHGDANYON="00000000" UNICODE="X" R3RELEASE="620">
  <method CLSNAME="ZIF_SELECTIONSCREEN_LISTENER" CMPNAME="ENTER_BTN_PRESSED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130405" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_SELECTIONSCREEN_LISTENER" CMPNAME="ENTRY_MADE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130310" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0"/>
 </INTF>
 <INTF CLSNAME="ZIF_UCOMM_ACTION_LISTENER" VERSION="1" LANGU="E" UUID="5CA288F2A7C2494EBEFE1438ACB1F8EB" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="BCUSER" CREATEDON="20121231" CHANGEDON="00000000" CHGDANYON="00000000" UNICODE="X" R3RELEASE="620">
  <attribute CLSNAME="ZIF_UCOMM_ACTION_LISTENER" CMPNAME="UCOMM" VERSION="1" LANGU="E" DESCRIPT="UCOMM" EXPOSURE="2" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SYUCOMM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <method CLSNAME="ZIF_UCOMM_ACTION_LISTENER" CMPNAME="ACTION_RAISED" VERSION="1" LANGU="E" DESCRIPT="ACTION_RAISED" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130205" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0"/>
 </INTF>
 <FUGR SPRAS="E" AREA="Z_SCREENS" AREAT="Runtime screen generation area.">
  <mainprogram NAME="SAPLZ_SCREENS" VARCL="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" CNAM="BCUSER" CDAT="20121223" UNAM="ITAJR" UDAT="20130407" VERN="000004" RSTAT="S" RMAND="001" RLOAD="E" FIXPT="X" SDATE="20130409" STIME="164225" IDATE="20130407" ITIME="112141" LDBNAME="D$S" UCCHECK="X">
   <textPool/>
   <pfstatus>
    <pfstatus_sta CODE="CONTEXT_TOOLBAR" MODAL="C" INT_NOTE="Standard toolbar for a context menu." CTXCODE="000001"/>
    <pfstatus_sta CODE="FRAME_TOOLBAR" MODAL="D" ACTCODE="000003" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Standard toolbar for a screen frame"/>
    <pfstatus_sta CODE="POPUP_TOOLBAR" MODAL="P" PFKCODE="000002" BUTCODE="0001" INT_NOTE="Standard toolbar for a popup screen."/>
    <pfstatus_fun CODE="A" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="A"/>
    <pfstatus_fun CODE="A001" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DISCONNECT" ICON_ID="@GC@" FUN_TEXT="FUNC1"/>
    <pfstatus_fun CODE="A01" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B01-&gt;VALUES"/>
    <pfstatus_fun CODE="A02" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B02-&gt;VALUES"/>
    <pfstatus_fun CODE="A03" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B03-&gt;VALUES"/>
    <pfstatus_fun CODE="A04" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B04-&gt;VALUES"/>
    <pfstatus_fun CODE="A05" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B05-&gt;VALUES"/>
    <pfstatus_fun CODE="A06" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B06-&gt;VALUES"/>
    <pfstatus_fun CODE="A07" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B07-&gt;VALUES"/>
    <pfstatus_fun CODE="A08" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B08-&gt;VALUES"/>
    <pfstatus_fun CODE="A09" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B09-&gt;VALUES"/>
    <pfstatus_fun CODE="A10" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B10-&gt;VALUES"/>
    <pfstatus_fun CODE="A11" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B11-&gt;VALUES"/>
    <pfstatus_fun CODE="A12" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_APP_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-B12-&gt;VALUES"/>
    <pfstatus_fun CODE="BACK" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DISCONNECT" ICON_ID="@GC@" FUN_TEXT="Back" ICON_TEXT="Go to previous screen." INFO_TEXT="Go to previous screen."/>
    <pfstatus_fun CODE="CANCEL" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="V_ICON"/>
    <pfstatus_fun CODE="E" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_BUSINAV_OBJECTS_ORPHAN" ICON_ID="@W4@" FUN_TEXT="Enter"/>
    <pfstatus_fun CODE="ENT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Enty" INFO_TEXT="Eny"/>
    <pfstatus_fun CODE="ENTER" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Enter"/>
    <pfstatus_fun CODE="EXIT" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ICON"/>
    <pfstatus_fun CODE="EXIT" TEXTNO="002" TEXT_TYPE="S" FUN_TEXT="Exit"/>
    <pfstatus_fun CODE="FBAC" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Ff"/>
    <pfstatus_fun CODE="FBACK" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-BACK-&gt;VALUES"/>
    <pfstatus_fun CODE="FBOTTOM" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_LAST_PAGE" ICON_ID="@31@" FUN_TEXT="Last Page"/>
    <pfstatus_fun CODE="FCANCE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Cancel"/>
    <pfstatus_fun CODE="FCANCEL" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE=&gt;S_BUTTONS-CANCEL_BTN"/>
    <pfstatus_fun CODE="FCANCEL" TEXTNO="002" TEXT_TYPE="D" TEXT_NAME="G"/>
    <pfstatus_fun CODE="FCANCEL" TEXTNO="003" TEXT_TYPE="D" TEXT_NAME="ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-CANCEL-&gt;VALUES"/>
    <pfstatus_fun CODE="FDOWN" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_NEXT_PAGE" ICON_ID="@30@" FUN_TEXT="Next page"/>
    <pfstatus_fun CODE="FENTE" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Enter"/>
    <pfstatus_fun CODE="FENTER" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_MARK" ICON_ID="@2X@" FUN_TEXT="Enter" ICON_TEXT="Rr" INFO_TEXT="Rr"/>
    <pfstatus_fun CODE="FENTR" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Enter"/>
    <pfstatus_fun CODE="FEXI" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Exit"/>
    <pfstatus_fun CODE="FEXIT" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ICON"/>
    <pfstatus_fun CODE="FEXIT" TEXTNO="002" TEXT_TYPE="D" TEXT_NAME="ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-EXIT-&gt;VALUES"/>
    <pfstatus_fun CODE="FFIND" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="VAL"/>
    <pfstatus_fun CODE="FFINDNEXT" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-FIND_NEXT-&gt;VALUES"/>
    <pfstatus_fun CODE="FFIRST" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-PAGE_TOP-&gt;VALUES"/>
    <pfstatus_fun CODE="FHELP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_ALL" ICON_ID="@4B@" FUN_TEXT="Help" ICON_TEXT="Help"/>
    <pfstatus_fun CODE="FLAST" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PREVIOUS_PAGE" ICON_ID="@2Z@" FUN_TEXT="Previous Page"/>
    <pfstatus_fun CODE="FLAST" TEXTNO="002" TEXT_TYPE="D" TEXT_NAME="ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-PAGE_LAST-&gt;VALUES"/>
    <pfstatus_fun CODE="FNEWWIN" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-NEW_WIN-&gt;VALUES"/>
    <pfstatus_fun CODE="FNEWWINDOW" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CREATE" ICON_ID="@0Y@" FUN_TEXT="Create Session"/>
    <pfstatus_fun CODE="FNEXT" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-PAGE_DOWN-&gt;VALUES"/>
    <pfstatus_fun CODE="FPREV" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-PAGE_UP-&gt;VALUES"/>
    <pfstatus_fun CODE="FPREVIOUS" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PREVIOUS_PAGE" ICON_ID="@2Z@" FUN_TEXT="Previous Page"/>
    <pfstatus_fun CODE="FPRINT" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-PRINT-&gt;VALUES"/>
    <pfstatus_fun CODE="FSAVE" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="ZCL_FRAME_TOOLBAR=&gt;SET_INSTANCE-&gt;S_BUTTONS-SAVE-&gt;VALUES"/>
    <pfstatus_fun CODE="FTOP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_FIRST_PAGE" ICON_ID="@2Y@" FUN_TEXT="First Page"/>
    <pfstatus_fun CODE="FUP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PREVIOUS_PAGE" ICON_ID="@2Z@" FUN_TEXT="Previous Page"/>
    <pfstatus_fun CODE="HELLO" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Hello" PATH="H"/>
    <pfstatus_fun CODE="HELP" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Aaa"/>
    <pfstatus_men CODE="000010" NO="01" REF_TYPE="F" REF_CODE="&lt;01&gt;"/>
    <pfstatus_men CODE="000010" NO="02" REF_TYPE="F" REF_CODE="&lt;02&gt;"/>
    <pfstatus_men CODE="000010" NO="03" REF_TYPE="F" REF_CODE="&lt;03&gt;"/>
    <pfstatus_men CODE="000010" NO="04" REF_TYPE="F" REF_CODE="&lt;04&gt;"/>
    <pfstatus_men CODE="000010" NO="05" REF_TYPE="F" REF_CODE="&lt;05&gt;"/>
    <pfstatus_men CODE="000010" NO="06" REF_TYPE="S" REF_CODE="&lt;S1&gt;"/>
    <pfstatus_men CODE="000010" NO="07" REF_TYPE="F" REF_CODE="&lt;06&gt;"/>
    <pfstatus_men CODE="000010" NO="08" REF_TYPE="S" REF_CODE="&lt;S1&gt;"/>
    <pfstatus_men CODE="000010" NO="09" REF_TYPE="F" REF_CODE="&lt;09&gt;"/>
    <pfstatus_men CODE="000010" NO="10" REF_TYPE="S" REF_CODE="&lt;S1&gt;"/>
    <pfstatus_men CODE="000010" NO="11" REF_TYPE="F" REF_CODE="&lt;10&gt;"/>
    <pfstatus_men CODE="000010" NO="12" REF_TYPE="F" REF_CODE="&lt;11&gt;"/>
    <pfstatus_men CODE="000011" NO="01" REF_TYPE="F" REF_CODE="&lt;12&gt;"/>
    <pfstatus_men CODE="000011" NO="02" REF_TYPE="F" REF_CODE="&lt;13&gt;"/>
    <pfstatus_men CODE="000011" NO="03" REF_TYPE="F" REF_CODE="&lt;24&gt;"/>
    <pfstatus_men CODE="000011" NO="04" REF_TYPE="F" REF_CODE="&lt;14&gt;"/>
    <pfstatus_men CODE="000011" NO="05" REF_TYPE="S" REF_CODE="&lt;S1&gt;"/>
    <pfstatus_men CODE="000011" NO="06" REF_TYPE="F" REF_CODE="&lt;16&gt;"/>
    <pfstatus_men CODE="000011" NO="07" REF_TYPE="F" REF_CODE="&lt;17&gt;"/>
    <pfstatus_men CODE="000011" NO="08" REF_TYPE="F" REF_CODE="&lt;18&gt;"/>
    <pfstatus_men CODE="000011" NO="09" REF_TYPE="S" REF_CODE="&lt;S1&gt;"/>
    <pfstatus_men CODE="000011" NO="10" REF_TYPE="F" REF_CODE="&lt;26&gt;"/>
    <pfstatus_men CODE="000011" NO="11" REF_TYPE="F" REF_CODE="&lt;27&gt;"/>
    <pfstatus_men CODE="000011" NO="12" REF_TYPE="F" REF_CODE="&lt;20&gt;"/>
    <pfstatus_men CODE="000011" NO="13" REF_TYPE="S" REF_CODE="&lt;S1&gt;"/>
    <pfstatus_men CODE="000011" NO="14" REF_TYPE="F" REF_CODE="&lt;22&gt;"/>
    <pfstatus_men CODE="000012" NO="01" REF_TYPE="S" REF_CODE="&lt;S1&gt;"/>
    <pfstatus_men CODE="000012" NO="02" REF_TYPE="F" REF_CODE="&lt;23&gt;"/>
    <pfstatus_mtx CODE="000001" TEXT_TYPE="S" TEXT="&lt;Object&gt;" PATH="O" INT_NOTE="Standard supplement"/>
    <pfstatus_mtx CODE="000001" TEXT_TYPE="S" TEXT="&lt;Object&gt;" PATH="O" INT_NOTE="Standard supplement"/>
    <pfstatus_mtx CODE="000002" TEXT_TYPE="S" TEXT="Hello"/>
    <pfstatus_mtx CODE="000010" TEXT_TYPE="S" TEXT="&lt;Object&gt;" INT_NOTE="Standard supplement"/>
    <pfstatus_mtx CODE="000011" TEXT_TYPE="S" TEXT="Edit" PATH="E" INT_NOTE="Standard supplement"/>
    <pfstatus_mtx CODE="000012" TEXT_TYPE="S" TEXT="Goto" PATH="G" INT_NOTE="Standard supplement"/>
    <pfstatus_mtx CODE="000013" TEXT_TYPE="S" TEXT="Extras" PATH="A" INT_NOTE="Standard Supplement"/>
    <pfstatus_mtx CODE="000013" TEXT_TYPE="S" TEXT="Extras" PATH="A" INT_NOTE="Standard Supplement"/>
    <pfstatus_mtx CODE="000014" TEXT_TYPE="S" TEXT="Environment" PATH="V" INT_NOTE="Standard supplement"/>
    <pfstatus_mtx CODE="000014" TEXT_TYPE="S" TEXT="Environment" PATH="V" INT_NOTE="Standard supplement"/>
    <pfstatus_mtx CODE="000015" TEXT_TYPE="S" TEXT="Goto" PATH="G" INT_NOTE="Standard Supplement"/>
    <pfstatus_mtx CODE="000016" TEXT_TYPE="S" TEXT="Extras" PATH="A" INT_NOTE="Standard Supplement"/>
    <pfstatus_mtx CODE="000017" TEXT_TYPE="S" TEXT="Environment" PATH="V" INT_NOTE="Standard Supplement"/>
    <pfstatus_act CODE="000003" NO="01" MENUCODE="000010"/>
    <pfstatus_act CODE="000003" NO="02" MENUCODE="000011"/>
    <pfstatus_act CODE="000003" NO="03" MENUCODE="000012"/>
    <pfstatus_act CODE="000003" NO="04" MENUCODE="000013"/>
    <pfstatus_act CODE="000003" NO="05" MENUCODE="000014"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="37"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="02" PFNO="38"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="03" PFNO="39"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="04" PFNO="40"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="05" PFNO="41"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="06" PFNO="42"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="07" PFNO="43"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="08" PFNO="44"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="09" PFNO="45"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="10" PFNO="46"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="11" PFNO="47"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="12" PFNO="48"/>
    <pfstatus_pfk CODE="000001" PFNO="00" FUNCODE="ENTER" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="FBACK" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="11" FUNCODE="FSAVE" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="FCANCEL" FUNNO="003"/>
    <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="FEXIT" FUNNO="002"/>
    <pfstatus_pfk CODE="000001" PFNO="37" FUNCODE="A01" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="38" FUNCODE="A02" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="39" FUNCODE="A03" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="40" FUNCODE="A04" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="41" FUNCODE="A05" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="42" FUNCODE="A06" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="43" FUNCODE="A07" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="44" FUNCODE="A08" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="45" FUNCODE="A09" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="46" FUNCODE="A10" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="47" FUNCODE="A11" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="48" FUNCODE="A12" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="71" FUNCODE="FFIND" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="74" FUNCODE="FNEWWIN" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="80" FUNCODE="FFIRST" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="81" FUNCODE="FPREV" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="82" FUNCODE="FNEXT" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="83" FUNCODE="FLAST" FUNNO="002"/>
    <pfstatus_pfk CODE="000001" PFNO="84" FUNCODE="FFINDNEXT" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="86" FUNCODE="FPRINT" FUNNO="001"/>
    <pfstatus_pfk CODE="000003" PFNO="00" FUNCODE="ENTER" FUNNO="001"/>
    <pfstatus_pfk CODE="000003" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
    <pfstatus_pfk CODE="000003" PFNO="15" FUNCODE="EXIT" FUNNO="002"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="A01"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="A02"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="A03"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="A04"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="A05"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="A06"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="A07"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="A08"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="A09"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="A10"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="A11"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="A12"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="BACK"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="CANCEL"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="E"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="ENT"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="ENTER"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="EXIT"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FBAC"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FBACK"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FBOTTOM"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FCANCE"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FCANCEL"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FDOWN"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FENTE"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FENTER"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FENTR"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FEXI"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FEXIT"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FFIND"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FFINDNEXT"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FFIRST"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FLAST"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FNEWWIN"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FNEWWINDOW"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FNEXT"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FPREV"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FPREVIOUS"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FPRINT"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FSAVE"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FTOP"/>
    <pfstatus_set STATUS="FRAME_TOOLBAR" FUNCTION="FUP"/>
    <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="Standard interface"/>
    <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000002" MODAL="D" INT_NOTE="Standard interface"/>
    <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000003" MODAL="D" NORM="X" INT_NOTE="Standard toolbar for a screen frame"/>
    <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000004" MODAL="D" INT_NOTE="ggg"/>
    <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0002" MODAL="D" INT_NOTE="Standard interface"/>
    <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000002" SUB_CODE="0001" MODAL="D" INT_NOTE="Standard interface"/>
    <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="M" INT_NOTE="Standard toolbar for a screen frame"/>
    <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000003" SUB_CODE="0001" MODAL="D" INT_NOTE="a"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="Standard interface"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000002" MODAL="D" INT_NOTE="Standard interface"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000003" MODAL="D" INT_NOTE="a"/>
    <pfstatus_biv OBJ_CODE="000001" SUB_CODE="0001" FCODE="A01"/>
    <pfstatus_biv OBJ_CODE="000001" SUB_CODE="0001" FCODE="A02"/>
    <pfstatus_biv OBJ_CODE="000001" SUB_CODE="0001" FCODE="A03"/>
    <pfstatus_biv OBJ_CODE="000001" SUB_CODE="0001" FCODE="A04"/>
    <pfstatus_biv OBJ_CODE="000001" SUB_CODE="0001" FCODE="A05"/>
    <pfstatus_biv OBJ_CODE="000001" SUB_CODE="0001" FCODE="A06"/>
    <pfstatus_biv OBJ_CODE="000001" SUB_CODE="0001" FCODE="A07"/>
    <pfstatus_biv OBJ_CODE="000001" SUB_CODE="0001" FCODE="A08"/>
    <pfstatus_biv OBJ_CODE="000001" SUB_CODE="0001" FCODE="A09"/>
    <pfstatus_biv OBJ_CODE="000001" SUB_CODE="0001" FCODE="A10"/>
    <pfstatus_biv OBJ_CODE="000001" SUB_CODE="0001" FCODE="A11"/>
    <pfstatus_biv OBJ_CODE="000001" SUB_CODE="0001" FCODE="A12"/>
    <pfstatus_tit CODE="TITLE" TEXT="&amp;1"/>
   </pfstatus>
   <source>*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZ_SCREENSTOP.                     &quot; Global Data
  INCLUDE LZ_SCREENSUXX.                     &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZ_SCREENSF...                     &quot; Subroutines
* INCLUDE LZ_SCREENSO...                     &quot; PBO-Modules
* INCLUDE LZ_SCREENSI...                     &quot; PAI-Modules
* INCLUDE LZ_SCREENSE...                     &quot; Events
* INCLUDE LZ_SCREENSP...                     &quot; Local class implement.</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZ_SCREENSTOP" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" CNAM="BCUSER" CDAT="20121223" UNAM="ITAJR" UDAT="20130204" VERN="000003" RMAND="001" FIXPT="X" SDATE="20130204" STIME="110134" IDATE="20130204" ITIME="110134" LDBNAME="D$S" UCCHECK="X">
    <include_source>FUNCTION-POOL Z_SCREENS.                    &quot;MESSAGE-ID ..

* INCLUDE LZ_SCREENSD...                     &quot; Local class definition</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="Z_CALLSCREEN" STEXT="Displays specified screen.">
    <importing PARAMETER="PV_DYNNR_INSTANCE" OPTIONAL="X" REFERENCE="X" TYP="DYNNR"/>
    <documentation PARAMETER="PV_DYNNR_INSTANCE" KIND="P" STEXT="Number of the following screen" INDEX=" 001"/>
    <fm_source_new>controls: &quot;Unique tabstrips for each screen? Does having a large number declared consume resources?
  tabstrip01 type tabstrip,
  tabstrip02 type tabstrip,
  tabstrip03 type tabstrip,
  tabstrip04 type tabstrip,
  tabstrip05 type tabstrip,
  tabstrip06 type tabstrip,
  tabstrip07 type tabstrip,
  tabstrip08 type tabstrip,
  tabstrip09 type tabstrip,
  tabstrip10 type tabstrip,
  tabstrip11 type tabstrip,
  tabstrip12 type tabstrip,
  tabstrip13 type tabstrip,
  tabstrip14 type tabstrip,
  tabstrip15 type tabstrip,
  tabstrip16 type tabstrip,
  tabstrip17 type tabstrip,
  tabstrip18 type tabstrip,
  tabstrip19 type tabstrip.

data:
  ok_code type syucomm.

  call screen pv_dynnr_instance.

module screen output.
  zcl_ucomm_dispatcher=&gt;pbo( ).
endmodule.                    &quot;screen OUTPUT

module screen_fields output.
  zcl_screen=&gt;call_pbo( ).
endmodule.                    &quot;screen_fields OUTPUT

module screen input.
  zcl_ucomm_dispatcher=&gt;pai( ).
endmodule.                    &quot;screen INPUT</fm_source_new>
   </functionmodule>
   <functionmodule NAME="Z_INITALISE_SCREEN_MEMORY" STEXT="To allow dynamic assigns of variables held in this func group.">
    <fm_source_new>*  This function is called to initialise the varaiables of this function group for
*  field symbol access though remote assigment.
*  (DO NOT DELETE)</fm_source_new>
   </functionmodule>
   <functionmodule NAME="ZDYNAMIC_SEARCHHELPEXIT" STEXT="Function module for dynamic search helps">
    <fm_source/>
   </functionmodule>
   <functionmodule NAME="Z_DYNAMIC_SEARCHHELPEXIT" STEXT="Dynamic search help exit.">
    <changing PARAMETER="SHLP" REFERENCE="X" TYP="SHLP_DESCR"/>
    <changing PARAMETER="CALLCONTROL" REFERENCE="X" TYP="DDSHF4CTRL"/>
    <tables PARAMETER="SHLP_TAB" TYP="SHLP_DESCT"/>
    <tables PARAMETER="RECORD_TAB" DBSTRUCT="SEAHLPRES"/>
    <documentation PARAMETER="SHLP_TAB" KIND="P" STEXT="List of Alternative Elementary Search Helps" INDEX=" 001"/>
    <documentation PARAMETER="RECORD_TAB" KIND="P" STEXT="Search help result structure" INDEX=" 002"/>
    <documentation PARAMETER="SHLP" KIND="P" STEXT="Description of Search Help" INDEX=" 003"/>
    <documentation PARAMETER="CALLCONTROL" KIND="P" STEXT="Control Structure for F4 Process with Search Help Exit" INDEX=" 004"/>
    <fm_source>DATA: BEGIN OF Seatinfo OCCURS 0,                &quot; parallel table to
            seatsmax TYPE SFLIGHT-SEATSMAX,      &quot; record_tab containing
            seatsocc TYPE SFLIGHT-SEATSOCC,      &quot; the information about
            seatsfre TYPE S_SEATSFRE,            &quot; the seats
      END OF Seatinfo.

IF CALLCONTROL-STEP = &apos;SELECT&apos;.
* The search help parameters SEATSMAX and SEATSOCC are not displayed on
* the list of possible entries. Hence, provided they are not connected
* to dynpro fields, the F4 processor might consider it not to be
* necessary to select the contents of these fields.
* But this exit needs these contents in order to compute the number of
* free seats. Thus, the space for this contents is allocated by the
* following two calls. This automatically forces the F4 processor to
* fill this space with the contents of these fields.
   CALL FUNCTION &apos;F4UT_PARAMETER_ALLOCATE&apos;
        EXPORTING
             PARAMETER         = &apos;SEATSMAX&apos;
        TABLES
             SHLP_TAB          = shlp_tab
             RECORD_TAB        = record_tab
        CHANGING
             SHLP              = shlp
             CALLCONTROL       = callcontrol.
   CALL FUNCTION &apos;F4UT_PARAMETER_ALLOCATE&apos;
        EXPORTING
             PARAMETER         = &apos;SEATSOCC&apos;
        TABLES
             SHLP_TAB          = shlp_tab
             RECORD_TAB        = record_tab
        CHANGING
             SHLP              = shlp
             CALLCONTROL       = callcontrol.
ENDIF.

CHECK callcontrol-step = &apos;DISP&apos;.

* This Exit only has to do something before the list of possible values
* is displayed. At that moment it has to compute the number of free
* seats for each row and attach it to the result of the selection
* process

* First fill the seatsmax-Info from the selected data. Note that there
* are two ways of using F4UT_PARAMETER_VALUE_GET described in the
* documetation of that function module. Here the second one is used.
CALL FUNCTION &apos;F4UT_PARAMETER_VALUE_GET&apos;
     EXPORTING
          PARAMETER         = &apos; &apos;
                                    &quot; Reference to search help parameter
          FIELDNAME         = &apos;SEATSMAX&apos;
                                    &quot; Reference to field of Seatinfo
     TABLES
          SHLP_TAB          = shlp_tab
          RECORD_TAB        = record_tab
          RESULTS_TAB       = Seatinfo
     CHANGING
          SHLP              = shlp
          CALLCONTROL       = callcontrol.

* Now do the same with the seatsocc-Info:
CALL FUNCTION &apos;F4UT_PARAMETER_VALUE_GET&apos;
     EXPORTING
          PARAMETER         = &apos; &apos;
                                    &quot; Reference to search help parameter
          FIELDNAME         = &apos;SEATSOCC&apos;
                                    &quot; Reference to field of Seatinfo
     TABLES
          SHLP_TAB          = shlp_tab
          RECORD_TAB        = record_tab
          RESULTS_TAB       = Seatinfo
     CHANGING
          SHLP              = shlp
          CALLCONTROL       = callcontrol.

* Now compute the number of free seats:
LOOP AT Seatinfo.
     IF Seatinfo-seatsocc &lt; Seatinfo-seatsmax.
        Seatinfo-seatsfre = Seatinfo-seatsmax - Seatinfo-seatsocc.
     ELSE.
          CLEAR Seatinfo-seatsfre.
     ENDIF.
     MODIFY Seatinfo TRANSPORTING seatsfre.
ENDLOOP.

* Finally transport the computed numbers into the search help data.
CALL FUNCTION &apos;F4UT_PARAMETER_RESULTS_PUT&apos;
     EXPORTING
          PARAMETER         = &apos;SEATSFRE&apos;
                                    &quot; Reference to search help parameter
          FIELDNAME         = &apos;SEATSFRE&apos;
                                    &quot; Reference to field of Seatinfo
     TABLES
          SHLP_TAB          = shlp_tab
          RECORD_TAB        = record_tab
          SOURCE_TAB        = Seatinfo
     CHANGING
          SHLP              = shlp
          CALLCONTROL       = callcontrol.



*  data:
*    lo_elemdescr  type ref to cl_abap_elemdescr,
*    flddescr      type dfies,
*    ls_record     like line of record_tab,
*    ls_shlp       like line of shlp_tab,
*    ls_descr      like line of shlp-fielddescr.
*
*  lo_elemdescr ?= cl_abap_elemdescr=&gt;describe_by_name( &apos;BUKRS&apos; ).
*  flddescr = lo_elemdescr-&gt;get_ddic_field( sy-langu ).
*  flddescr-fieldname = flddescr-tabname.
*  clear flddescr-tabname.
*
*  loop at shlp-fielddescr into ls_descr.
*    modify shlp-fielddescr from flddescr.
*    exit.
*  endloop.
*
*  clear shlp_tab[].
*  append shlp to shlp_tab.
*
*  call function &apos;F4UT_PARAMETER_ALLOCATE&apos;
*    exporting
*      parameter               = &apos;BUKRS&apos;
**     DEALLOCATE              = &apos; &apos;
*    tables
*      shlp_tab                = SHLP_TAB[]
*      record_tab              = RECORD_TAB[]
*    changing
*      shlp                    = SHLP
*      callcontrol             = CALLCONTROL
**   EXCEPTIONS
**     PARAMETER_UNKNOWN       = 1
**     NO_SPACE                = 2
**     OTHERS                  = 3
*            .
*  if sy-subrc &lt;&gt; 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  endif.
*
*
*  if callcontrol-step ne &apos;DISP&apos;.
*
*    callcontrol-step = &apos;DISP&apos;.
*
*    shlp-intdescr-ddtext = &apos;Dynamic Search Help&apos;.
*
*
*
**    loop at shlp-fielddescr into ls_descr.
**      modify shlp-fielddescr from flddescr.
**      exit.
**    endloop.
**
*
*
*
*    ls_record-string = &apos;hello&apos;.
*    append ls_record to record_tab.
*
*    callcontrol-step = &apos;DISP&apos;.
*
*  endif.</fm_source>
   </functionmodule>
   <functionmodule NAME="Z_CALLSCREEN_MODAL" STEXT="Used by modal screenframe">
    <fm_source/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <PROG NAME="Z_SCREENS" VARCL="X" SUBC="1" CNAM="ITAJR" CDAT="20130307" UNAM="ITAJR" UDAT="20130409" VERN="000013" RMAND="010" RLOAD="E" FIXPT="X" SDATE="20130409" STIME="160320" IDATE="20130409" ITIME="160320" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Container Program for the generic screens of Screen Framework" LENGTH="61 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <dynpros>
   <dynpro PROG="Z_SCREENS" DNUM="0001" FNUM="0001" BZMX="42 " BZBR="251 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="42 " NOCO="255 " VALP="0 " CUAN="G" SPRA="E" DGEN="20130403" TGEN="155734" DTEXT="\PROGRAM=Z_SCREENTEST\CLASS=ZCL_SCREENFRAME">
    <dynprofield FNAM="SUBSCR" DIDX="002A" FLG1="00" FLG2="F0" FLG3="00" FILL="B" FMB1="00" FMB2="00" LENG="FB" LINE="01" COLN="02" LTYP="J" LANF="00" LBLK="01" LREP="00" AUTH="101" AGLT="0D" ADEZ="3B"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
* MODULE STATUS_0001.
*
PROCESS AFTER INPUT.
* MODULE USER_COMMAND_0001.</dynproflowsource>
   </dynpro>
   <dynpro PROG="Z_SCREENS" DNUM="0002" TYPE="I" FNUM="0002" BZMX="0 " BZBR="0 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DGEN="20130307" TGEN="135405" DTEXT="Blank screen for initial subscreens.">
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.

PROCESS AFTER INPUT.</dynproflowsource>
   </dynpro>
   <dynpro PROG="Z_SCREENS" DNUM="0003" TYPE="I" FNUM="0003" BZMX="27 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DGEN="20130310" TGEN="112422" DTEXT="ZCL_SELECTIONSCREEN">
    <dynprofield FNAM="SELSCREEN" DIDX="001B" FLG1="00" FLG2="30" FLG3="00" FILL="B" FMB1="00" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="0D" ADEZ="3B"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
* MODULE STATUS_0003.
*
PROCESS AFTER INPUT.
* MODULE USER_COMMAND_0003.</dynproflowsource>
   </dynpro>
   <dynpro PROG="Z_SCREENS" DNUM="0004" FNUM="0004" BZMX="45 " BZBR="191 " MILI="192 " MICO="36 " MALI="0 " MACO="0 " NOLI="45 " NOCO="192 " VALP="0 " CUAN="G" SPRA="E" DGEN="20130321" TGEN="103926" DTEXT="Encapsulates a custom container">
    <dynprofield FNAM="CONTAINER" DIDX="002D" FLG1="00" FLG2="30" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="BF" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="13" ADEZ="5F"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
* MODULE STATUS_0004.
*
PROCESS AFTER INPUT.
* MODULE USER_COMMAND_0004.</dynproflowsource>
   </dynpro>
   <dynpro PROG="Z_SCREENS" DNUM="0005" TYPE="M" FNUM="0005" BZMX="13 " BZBR="64 " MILI="192 " MICO="36 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DGEN="20130409" TGEN="160046" DTEXT="Modal Screenframe.">
    <dynprofield FNAM="LBL_ELEMENT" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="07" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="element"/>
    <dynprofield FNAM="SUB1" DIDX="000C" FLG1="00" FLG2="00" FLG3="00" FILL="B" FMB1="30" FMB2="00" LENG="40" LINE="02" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="01" ADEZ="01"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>process before output.

process after input.</dynproflowsource>
   </dynpro>
  </dynpros>
  <source>************************************************************************
            report    z_screens.
 types screen_0001    type ref to zcl_screen.&quot;&lt;--[Double click to open program code]
 types screen_0002    type ref to zcl_screenframe.&quot;&lt;--[Double click to open program code]
 types screen_0003    type ref to zcl_selectionscreen.&quot;&lt;--[Double click to open program code]
 types screen_0004    type ref to zcl_gui_table.&quot;&lt;--[Double click to open program code]
* types screen_0005    type ref to screenframe modal mode.&quot;&lt;--[Double click to open program code]
*           Author :  ITAJR
*             Date :
*    Dev/Help Ref. :
*        Transport :
*      Description :  Container for the main screens of the framework.
************************************************************************
*       Changed By :
*             Date :
*    Dev/Help Ref. :
*         Ext Ref. :
*        Transport :
* Version Valid To :
*      Description :
*----------------------------------------------------------------------*</source>
 </PROG>
 <CLAS CLSNAME="ZCL_GUI_TABLE" VERSION="1" LANGU="E" DESCRIPT="ALV Grid Subscreen Wrapper" UUID="EE6AB428C944DB4E96A8B2872AF33FB5" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00" REFCLSNAME="ZCL_SCREEN">
  <types CLSNAME="ZCL_GUI_TABLE" CMPNAME="TYS_TOOLBAR_BTNS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130408" CHANGEDBY="ITAJR" CHANGEDON="20130409" TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="9 " SRCCOLUMN2="24 "/>
  <publicSection>class ZCL_GUI_TABLE definition
  public
  inheriting from ZCL_SCREEN
  final
  create public .

*&quot;* public components of class ZCL_GUI_TABLE
*&quot;* do not include other source files here!!!
public section.

  class-methods BUILD_FIELD_CATALOG
    importing
      !PT_TABLE type STANDARD TABLE
    returning
      value(PT_FCAT) type LVC_T_FCAT .
  methods ADD_STANDARD_TOOLBAR_BTN
    importing
      !SPREADSHEET_ type FLAG default &apos;&apos;
      !EXPORT_LOCAL_FILE type FLAG default &apos;&apos; .
  methods ADD_TOOLBAR_BUTTON
    importing
      !INSERT_SEPARATOR_BEFORE type FLAG optional
      !PO_BUTTON type ref to ZCL_APP_BUTTON .
  methods CONSTRUCTOR .
  methods GET_ALV_GRID
    returning
      value(PT_ALV_GRID) type ref to CL_GUI_ALV_GRID .
  methods GET_TABLE_BYREF
    returning
      value(PT_TABLEREF) type ref to DATA .
  methods REFRESH_OUTPUT
    importing
      !PV_IMMEDIATE_REFRESH type FLAG default &apos;&apos; .
  methods REMOVE_STANDARD_TOOLBAR_BTNS
    importing
      !ALL type FLAG optional
      !DETAILS type FLAG optional
      !CHECK_ENTRIES type FLAG optional
      !REFRESH type FLAG optional
      !CUT type FLAG optional
      !COPY_TEXT type FLAG optional
      !MENU_INCLUDE_ type FLAG optional
      !UNDO type FLAG optional
      !APPEND_ROW type FLAG optional
      !INSERT_ROW type FLAG optional
      !DELETE_ROW type FLAG optional
      !DUPLICATE_ROW type FLAG optional
      !SORT_IN_ASCEND_ORDER type FLAG optional
      !SORT_INT_DESCND_ORDER type FLAG optional
      !FIND type FLAG optional
      !MENU_FILTER_ type FLAG optional
      !MENU_TOTAL type FLAG optional
      !MENU_SUBTOTALS type FLAG optional
      !PRINT type FLAG optional
      !MENU_VIEWS type FLAG optional
      !MENU_EXPORT type FLAG optional
      !CHANGE_LAYOUT_ type FLAG optional
      !DISPLAY_GRAPHICS type FLAG optional
      !END_USER_DOCU_ type FLAG optional .
  methods SET_LAYOUT
    importing
      !PS_LAYOUT type LVC_S_LAYO .
  methods SET_SORT
    changing
      !PT_SORT type LVC_T_SORT .
  methods SET_TABLE
    importing
      !PS_LAYOUT type LVC_S_LAYO optional
      !PT_TOOLBAR_EXCLUDE type UI_FUNCTIONS optional
    changing
      !PT_FCAT type LVC_T_FCAT optional
      !PT_SORT type LVC_T_SORT optional
      !PT_TABLE type STANDARD TABLE .
  methods SET_TABLE_BYREF
    importing
      !PS_LAYOUT type LVC_S_LAYO optional
      !PT_TOOLBAR_EXCLUDE type UI_FUNCTIONS optional
    changing
      !PT_SORT type LVC_T_SORT optional
      !PT_FCAT type LVC_T_FCAT optional
      !PT_TABLEREF type ref to DATA .
  methods SET_TITLE
    importing
      value(PV_TITLE) type LVC_TITLE .</publicSection>
  <protectedSection>*&quot;* protected components of class ZCL_GUI_TABLE
*&quot;* do not include other source files here!!!
protected section.</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_GUI_TABLE
*&quot;* do not include other source files here!!!
private section.

  types:
    begin of tys_toolbar_btns,
    button  type ref to zcl_app_button,
    values  type stb_button,
  end of tys_toolbar_btns .

  data:
    T_TOOLBAR_BTNS type table of TYS_TOOLBAR_BTNS .
  data T_SORT type LVC_T_SORT .
  data INSTANCE_NUM type N value 1 .
  data CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data GRID type ref to CL_GUI_ALV_GRID .
  data S_LAYOUT type LVC_S_LAYO .
  data TABREF type ref to DATA .
  data T_FCAT type LVC_T_FCAT .
  data T_EXCLUDE type UI_FUNCTIONS .
  data IS_TOOLBAR_MODIFIED type FLAG .
  class-data:
    NEXT_UCOMM TYPE n LENGTH 3 .
  data T_INCLUDE type STB_BUTTON .

  class-methods BUILD_TOOLBAR_EXCLUDE_TABLE .
  class-methods GET_NEXT_UCOMM
    returning
      value(PV_UCOMM) type SY-UCOMM .
  methods ALV_GRID_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods CONFIGURE_ALVGRID .
  methods TOOLBAR_MODIFICATION_EVENT
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE
      !SENDER .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCL_GUI_TABLE" CMPNAME="CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Container for Custom Controls in the Screen Area" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="20130409" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_GUI_CUSTOM_CONTAINER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_GUI_TABLE" CMPNAME="GRID" VERSION="1" LANGU="E" DESCRIPT="ALV List Viewer" EXPOSURE="0" STATE="1" EDITORDER="5 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="20130409" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_GUI_ALV_GRID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_GUI_TABLE" CMPNAME="INSTANCE_NUM" VERSION="1" LANGU="E" DESCRIPT="Unique Container Name Suffix" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="20130409" ATTDECLTYP="0" ATTVALUE="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="N" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_GUI_TABLE" CMPNAME="IS_TOOLBAR_MODIFIED" VERSION="1" LANGU="E" DESCRIPT="Set when any modifications have been set for grid toolbar." EXPOSURE="0" STATE="1" EDITORDER="10 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDBY="ITAJR" CHANGEDON="20130409" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="FLAG" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_GUI_TABLE" CMPNAME="NEXT_UCOMM" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="11 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDBY="ITAJR" CHANGEDON="20130409" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="23 " SRCCOLUMN1="4 " SRCROW2="23 " SRCCOLUMN2="29 "/>
  <attribute CLSNAME="ZCL_GUI_TABLE" CMPNAME="S_LAYOUT" VERSION="1" LANGU="E" DESCRIPT="ALV control: Layout structure" EXPOSURE="0" STATE="1" EDITORDER="6 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="20130409" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LVC_S_LAYO" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_GUI_TABLE" CMPNAME="TABREF" VERSION="1" LANGU="E" DESCRIPT="Ref to test table liveness" EXPOSURE="0" STATE="1" EDITORDER="7 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="20130409" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_GUI_TABLE" CMPNAME="T_EXCLUDE" VERSION="1" LANGU="E" DESCRIPT="Function Code Table" EXPOSURE="0" STATE="1" EDITORDER="9 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130409" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="UI_FUNCTIONS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_GUI_TABLE" CMPNAME="T_FCAT" VERSION="1" LANGU="E" DESCRIPT="Field Catalog for List Viewer Control" EXPOSURE="0" STATE="1" EDITORDER="8 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="20130409" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LVC_T_FCAT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_GUI_TABLE" CMPNAME="T_INCLUDE" VERSION="1" LANGU="E" DESCRIPT="Function Code Table" EXPOSURE="0" STATE="1" EDITORDER="12 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDBY="ITAJR" CHANGEDON="20130409" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STB_BUTTON" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_GUI_TABLE" CMPNAME="T_SORT" VERSION="1" LANGU="E" DESCRIPT="ALV control: Table of sort criteria" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130409" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LVC_T_SORT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 "/>
  <attribute CLSNAME="ZCL_GUI_TABLE" CMPNAME="T_TOOLBAR_BTNS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130408" CHANGEDBY="ITAJR" CHANGEDON="20130409" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="12 " SRCCOLUMN1="4 " SRCROW2="12 " SRCCOLUMN2="48 "/>
  <inheritance CLSNAME="ZCL_GUI_TABLE" REFCLSNAME="ZCL_SCREEN" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDON="00000000"/>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="ADD_STANDARD_TOOLBAR_BTN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="ADD_STANDARD_TOOLBAR_BTN" SCONAME="SPREADSHEET_" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDBY="ITAJR" CHANGEDON="20130409" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PARVALUE="&apos;&apos;"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="ADD_STANDARD_TOOLBAR_BTN" SCONAME="EXPORT_LOCAL_FILE" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDBY="ITAJR" CHANGEDON="20130409" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PARVALUE="&apos;&apos;"/>
   <source>method add_standard_toolbar_btn.

  data:
    ls_toolbar_btn  like line of t_toolbar_btns.

  if spreadsheet_ eq &apos;X&apos;. &quot;//TODO Export not currenlt functional
    ls_toolbar_btn-values-function = cl_gui_alv_grid=&gt;mc_fc_call_xxl.
    ls_toolbar_btn-values-icon = &apos;@DJ@&apos;.
    append ls_toolbar_btn to t_toolbar_btns.
  endif.

  if export_local_file eq &apos;X&apos;.
    ls_toolbar_btn-values-function = cl_gui_alv_grid=&gt;mc_fc_pc_file.
    ls_toolbar_btn-values-icon = &apos;@49@&apos;.
    append ls_toolbar_btn to t_toolbar_btns.
  endif.

  if is_toolbar_modified is initial.
    set handler me-&gt;toolbar_modification_event for grid.
    set handler me-&gt;alv_grid_user_command for grid.
    is_toolbar_modified = &apos;X&apos;.
  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="ADD_TOOLBAR_BUTTON" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="ADD_TOOLBAR_BUTTON" SCONAME="INSERT_SEPARATOR_BEFORE" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="ADD_TOOLBAR_BUTTON" SCONAME="PO_BUTTON" VERSION="1" LANGU="E" DESCRIPT="Application Toolbar Button" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_APP_BUTTON"/>
   <source>method add_toolbar_button.

  constants:
    begin of s_butn_type,
      button                  type stb_button-butn_type value 0,
      menu_and_default_button type stb_button-butn_type value 1,
      menu                    type stb_button-butn_type value 2,
      separator               type stb_button-butn_type value 3,
      radio_button_button     type stb_button-butn_type value 4,
      checkbox                type stb_button-butn_type value 5,
      menu_entry              type stb_button-butn_type value 6,
    end of s_butn_type.

  data:
    ls_toolbar_btn like line of t_toolbar_btns.



  if insert_separator_before eq &apos;X&apos;.
    ls_toolbar_btn-values-butn_type = s_butn_type-separator.
    append ls_toolbar_btn to t_toolbar_btns.
  endif.


  ls_toolbar_btn-values-butn_type = 0.

  if po_button-&gt;values-icon_id is not initial.
    ls_toolbar_btn-values-icon = po_button-&gt;values-icon_id.
    ls_toolbar_btn-values-text = po_button-&gt;values-icon_text.
    ls_toolbar_btn-values-quickinfo = po_button-&gt;values-quickinfo.
  else.
    ls_toolbar_btn-values-text = po_button-&gt;values-text.
    ls_toolbar_btn-values-quickinfo = po_button-&gt;values-quickinfo.
  endif.

  ls_toolbar_btn-values-function = get_next_ucomm( ).
  ls_toolbar_btn-button = po_button.
  append ls_toolbar_btn to t_toolbar_btns.


  if is_toolbar_modified is initial.
    set handler me-&gt;toolbar_modification_event for grid.
    set handler me-&gt;alv_grid_user_command for grid.
    is_toolbar_modified = &apos;X&apos;.
  endif.

  &quot;Next trigger the toolbar event (registered with the handlers assigned above as method gui_status)
  &quot;to link a code to the button. Note: without this function call the button is still added however
  &quot;no function code is assigned.
  grid-&gt;set_toolbar_interactive( ).

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="ALV_GRID_USER_COMMAND" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="16 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130408" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="CL_GUI_ALV_GRID" REFCMPNAME="USER_COMMAND" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="ALV_GRID_USER_COMMAND" SCONAME="E_UCOMM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130408" CHANGEDBY="ITAJR" CHANGEDON="20130409" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <source>method alv_grid_user_command.

  data ls_toolbar_btn like line of t_toolbar_btns.

  loop at t_toolbar_btns into ls_toolbar_btn where values-function eq e_ucomm.
    ls_toolbar_btn-button-&gt;zif_ucomm_action_listener~action_raised( ).
  endloop.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="BUILD_FIELD_CATALOG" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="20130407" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="BUILD_FIELD_CATALOG" SCONAME="PT_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="20130319" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STANDARD TABLE"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="BUILD_FIELD_CATALOG" SCONAME="PT_FCAT" VERSION="1" LANGU="E" DESCRIPT="Field Catalog for List Viewer Control" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="20130319" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="LVC_T_FCAT"/>
   <source>method build_field_catalog.

  data:
    tabledesc type ref to cl_abap_tabledescr,
    structype type ref to cl_abap_structdescr,
    component type abap_compdescr,
    typedesc  type ref to cl_abap_typedescr,
    elemdesc  type ref to cl_abap_elemdescr,
    name      type string,
    fnam      type string,
    structnam type string,
    line      type ref to data.

  tabledesc ?= cl_abap_tabledescr=&gt;describe_by_data( pt_table ).
  structype ?= tabledesc-&gt;get_table_line_type( ).

  field-symbols:
    &lt;field&gt;   type any,
    &lt;line&gt;    type any,
    &lt;s_fcat&gt;  like line of pt_fcat.

  create data line like line of pt_table.
  assign line-&gt;* to &lt;line&gt;.

  loop at structype-&gt;components into component.
    assign component sy-tabix of structure &lt;line&gt; to &lt;field&gt;.
*    read table tabledesc-&gt;key index sy-tabix &quot;//TODO does this structure contain all fields of the table or just the keys?

    try.
        elemdesc ?= cl_abap_elemdescr=&gt;describe_by_data( &lt;field&gt; ).

        append initial line to pt_fcat assigning &lt;s_fcat&gt;.


        data flddescr type dfies.
        flddescr = elemdesc-&gt;get_ddic_field( sy-langu ).
        move-corresponding flddescr to &lt;s_fcat&gt;.
*        &lt;s_fcat&gt;-coltext = flddescr-scrtext_l.
*        &lt;s_fcat&gt;-seltext = flddescr-fieldtext.
*        &lt;s_fcat&gt;-domname = flddescr-domname.
*        &lt;s_fcat&gt;-rollname = flddescr-rollname.

        &lt;s_fcat&gt;-fieldname = component-name.
        clear &lt;s_fcat&gt;-F4AVAILABL.

*        if &lt;s_fcat&gt;-tabname eq &lt;s_fcat&gt;-rollname.
*          clear &lt;s_fcat&gt;-tabname.
*        endif.

        name = elemdesc-&gt;help_id.
        split name at &apos;-&apos; into structnam fnam.
        if fnam is not initial.
          &lt;s_fcat&gt;-ref_table = structnam.
          &lt;s_fcat&gt;-ref_field = fnam.
        endif.

*        &lt;s_fcat&gt;-col_opt = &apos;X&apos;.
      catch cx_sy_move_cast_error.
        typedesc ?= cl_abap_elemdescr=&gt;describe_by_data( &lt;field&gt; ).
        message &apos;Automatic field catalog builder is not currently capable of handling deep structures&apos;  type &apos;E&apos;.
    endtry.
  endloop.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="BUILD_TOOLBAR_EXCLUDE_TABLE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method BUILD_TOOLBAR_EXCLUDE_TABLE .
*  //TODO create and return an exclude table from the same interface as remove_standard_toolbar_btns.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="CONFIGURE_ALVGRID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="17 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method configure_alvgrid.

  field-symbols &lt;table&gt; type standard table.

  assign tabref-&gt;* to &lt;table&gt;.

  call method grid-&gt;set_table_for_first_display
    exporting
*      i_buffer_active               =
*      i_bypassing_buffer            =
*      i_consistency_check           =
*      i_structure_name              =
*      is_variant                    =
*      i_save                        =
*      i_default                     = &apos;X&apos;
      is_layout                     = s_layout
*      is_print                      =
*      it_special_groups             =
      it_toolbar_excluding          = t_exclude
*      it_hyperlink                  =
*      it_alv_graphics               =
*      it_except_qinfo               =
    changing
      it_outtab                     = &lt;table&gt;
      it_fieldcatalog               = t_fcat
      it_sort                       = t_sort
*      it_filter                     =
    exceptions
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      others                        = 4.
  if sy-subrc &lt;&gt; 0.
    message id sy-msgid type sy-msgty number sy-msgno with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method constructor.

  super-&gt;constructor(
    exporting
      pv_program_of_screen = &apos;Z_SCREENS&apos;
      pv_screen_number = &apos;0004&apos; ).


  data container_name type c length 3.
  concatenate  &apos;C&apos;  instance_num  into container_name.

  create object container
    exporting
      container_name = &apos;CONTAINER&apos;.
*      container_name = container_name. &quot;//TODO need to create unique screen element container name

  create object grid
    exporting
      i_parent = container.

*  grid-&gt;OPTIMIZE_ALL_COLS( ). &quot;If this class extended the alv class.
  s_layout-cwidth_opt = &apos;X&apos;.

  create data tabref type standard table of char256.

*  Old Function Codes (To add the old style menus)
**********************************************************************
*&apos;&amp;ABC&apos; -&gt; MC_FC_CALL_ABC
*&apos;&amp;ML&apos; -&gt; MC_FC_TO_OFFICE
*&apos;&amp;SERP&apos; -&gt; MC_FC_TO_REP_TREE
*&apos;&amp;AQW&apos; -&gt; MC_FC_WORD_PROCESSOR
*&apos;&amp;XXL&apos; -&gt; MC_FC_CALL_XXL.
*&apos;&amp;OL0&apos; -&gt; MC_FC_CURRENT_VARIANT
*&apos;&amp;OLX&apos; -&gt; MC_FC_CURRENT_VARIANT
*&apos;%PC&apos; -&gt; MC_FC_PC_FILE
*&apos;%SC&apos; -&gt; MC_FC_FIND
*&apos;%SL&apos; -&gt; MC_FC_SEND
*&apos;&amp;AVE&apos; -&gt; MC_FC_SAVE_VARIANT
*&apos;&amp;ERW&apos; -&gt; MC_FC_MAINTAIN_VARIANT
*&apos;&amp;ILT&apos; -&gt; MC_FC_FILTER
*&apos;&amp;OAD&apos; -&gt; MC_FC_LOAD_VARIANT
*&apos;&amp;ODN&apos; -&gt; MC_FC_SORT_DSC
*&apos;&amp;OUP&apos; -&gt; MC_FC_SORT_ASC
*&apos;&amp;ALL&apos; -&gt; MC_FC_SELECT_ALL
*&apos;&amp;SAL&apos; -&gt; MC_FC_DESELECT_ALL
*&apos;&amp;RNT&apos; -&gt; MC_FC_PRINT_BACK
*&apos;&amp;UMC&apos; -&gt; MC_FC_SUM
*&apos;&amp;SUM&apos; -&gt; MC_FC_SUBTOT
*&apos;&amp;MIN&apos; -&gt; mc_fc_minimum
*&apos;&amp;MAX&apos; -&gt; mc_fc_maximum
*&apos;&amp;AVR&apos; -&gt; mc_fc_average
*&apos;&amp;ELP&apos; -&gt; MC_FC_HELP
*&apos;&amp;OPT&apos; -&gt; MC_FC_COL_OPTIMIZE
*&apos;&amp;RNT_PREV&apos; -&gt; MC_FC_PRINT_PREV
*&apos;&amp;ILD&apos; -&gt; MC_FC_DELETE_FILTER
*&apos;&amp;EB1&apos; -&gt; MC_FC_CALL_LINEITEMS
*&apos;&amp;EB2&apos; -&gt; MC_FC_CALL_MASTER_DATA
*&apos;&amp;EB3&apos; -&gt; MC_FC_CALL_MORE
*&apos;&amp;EB9&apos; -&gt; MC_FC_CALL_REPORT
*&apos;&amp;EBN&apos; -&gt; MC_FC_CALL_CHAIN
*&apos;&amp;ETA&apos; -&gt; MC_FC_DETAIL
*&apos;&amp;HTML&apos; -&gt; MC_FC_HTML
*&apos;&amp;CFI&apos; -&gt;  mc_fc_fix_columns
*&apos;&amp;CDF&apos; -&gt; mc_fc_unfix_columns
*&apos;&amp;REFRESH&apos; -&gt; mc_fc_refresh
*&apos;&amp;F4&apos; -&gt; mc_fc_f4
*&apos;&amp;VGRID&apos; -&gt; mc_fc_view_grid
*&apos;&amp;XXL&apos; -&gt; mc_fc_call_xxl
*&apos;&amp;VEXCEL&apos; -&gt; mc_fc_view_excel
*&apos;&amp;CRYSTAL&apos; -&gt; mc_fc_view_crystal
*&apos;&amp;VCRYSTAL&apos; -&gt; mc_fc_view_crystal
*&apos;&amp;CRBATCH&apos; -&gt; mc_fc_call_crbatch
*&apos;&amp;CRDESIG&apos; -&gt; mc_fc_expcrdesig
*&apos;&amp;GRAPH&apos; -&gt; mc_fc_graph
*&apos;&amp;AUF&apos; -&gt; mc_fc_auf
*&apos;&amp;DATA_SAVE&apos; -&gt; mc_fc_data_save
*&apos;&amp;XINT&apos; -&gt; mc_fc_call_xint
*&apos;&amp;INFO&apos; -&gt; mc_fc_info

*&amp;RNT_PREV  Print Preview           MC_FC_PRINT_PREV
*&amp;RNT       Print                   MC_FC_PRINT
*&amp;CRBATCH   Crystal Reports B...
*&amp;F15       Exit
*&amp;AQW       Word Processing...
*&amp;XXL       Spreadsheet...
*%PC        Local File...
*&amp;XINT      Additional Functi...
*&amp;CRTEMPL   Crystal Reports File
*&amp;URL       Copy URL to Clipb...
*%SL        Mail Recipient
*%ML        Folder
*&amp;ALL       Select All
*&amp;SAL       Deselect All
*&amp;ILT       Set Filter
*&amp;ILD       Delete Filter
*&amp;OUP       Sort in Ascending...
*&amp;ODN       Sort in Descendin...
*&amp;SUM       Subtotals...
*%SC        Find
*&amp;F12       Cancel
*&amp;UMC       Total
*&amp;AVR       Mean Value
*&amp;MIN       Minimum
*&amp;MAX       Maximum
*&amp;ABC       ABC Analysis
*&amp;CRDESIG   Crystal Reports D...
*&amp;F03       Back
*&amp;VGRID     SAP List Viewer
*&amp;VEXCEL    Microsoft Excel
*&amp;VLOTUS    Lotus 1-2-3
*&amp;VCRYSTAL  Crystal Reports
*&amp;GRAPH     Graphic
*&amp;AUF       Define Totals Dri...
*&amp;OLX       Change...
*&amp;OAD       Choose...
*&amp;AVE       Save...
*&amp;ERW       Manage...
*&amp;OPT       Optimize Width
*&amp;CFI       Freeze to Column
*&amp;CDF       Unfreeze Columns

*  &amp;ETA
*  &amp;EB9
*  &amp;REFRESH
*  &amp;VEXCEL
*  %SL
*  &amp;OL0
*  &amp;INFO
*  &amp;DATA_SAVE
*  %SC+
*  &amp;ELP
*  &amp;F4
*  &amp;IC1
*  &amp;URL
*  &amp;EB9

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="GET_ALV_GRID" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130320" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="GET_ALV_GRID" SCONAME="PT_ALV_GRID" VERSION="1" LANGU="E" DESCRIPT="ALV List Viewer" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130320" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_GUI_ALV_GRID"/>
   <source>method get_alv_grid.
  pt_alv_grid = grid.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="GET_NEXT_UCOMM" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="GET_NEXT_UCOMM" SCONAME="PV_UCOMM" VERSION="1" LANGU="E" DESCRIPT="Screens, function code triggered by PAI" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130409" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-UCOMM"/>
   <source>method get_next_ucomm.
*  //TODO this should really come from zcl_ucomm_dispatcher for uniqueness.
  add 1 to next_ucomm.
  concatenate &apos;T&apos; next_ucomm into pv_ucomm.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="GET_TABLE_BYREF" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="GET_TABLE_BYREF" SCONAME="PT_TABLEREF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>method get_table_byref.
  pt_tableref = tabref.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="REFRESH_OUTPUT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REFRESH_OUTPUT" SCONAME="PV_IMMEDIATE_REFRESH" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PARVALUE="&apos;&apos;"/>
   <source>method refresh_output.

*  //TODO Check that table has been set

  field-symbols:
    &lt;tabref&gt;  type standard table.

  assign tabref-&gt;* to &lt;tabref&gt;.
* //TODO if equal to &apos;FREED STACK then error - table has been passed as local variable / out of scope
  if sy-subrc eq 0.
    grid-&gt;set_frontend_layout( s_layout ).
    grid-&gt;refresh_table_display( ).

    if pv_immediate_refresh eq &apos;X&apos;.
      cl_gui_cfw=&gt;update_view( ).
    endif.
  else.
    message &apos;ERROR: ALV Grid - table variable no longer exists&apos; type &apos;S&apos; display like &apos;E&apos;.
  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="ALL" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="DETAILS" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="CHECK_ENTRIES" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="REFRESH" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="CUT" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="COPY_TEXT" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="MENU_INCLUDE_" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="UNDO" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="APPEND_ROW" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="INSERT_ROW" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="DELETE_ROW" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="11 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="DUPLICATE_ROW" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="12 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="SORT_IN_ASCEND_ORDER" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="13 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="SORT_INT_DESCND_ORDER" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="14 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="FIND" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="15 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="MENU_FILTER_" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="16 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="MENU_TOTAL" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="17 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="MENU_SUBTOTALS" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="18 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="PRINT" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="19 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="MENU_VIEWS" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="20 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="MENU_EXPORT" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="21 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="CHANGE_LAYOUT_" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="22 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="DISPLAY_GRAPHICS" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="23 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="REMOVE_STANDARD_TOOLBAR_BTNS" SCONAME="END_USER_DOCU_" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="24 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <source>method REMOVE_STANDARD_TOOLBAR_BTNS .

  if all eq &apos;X&apos;.
    s_layout-no_toolbar = &apos;X&apos;.
    &quot;//TODO reset for layout.
    return.
  endif.

  if details eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_detail to t_exclude.
  endif.

* &amp;&amp;SEP00 (Seperator)

  if check_entries eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_check to t_exclude.
  endif.

  if refresh eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_refresh to t_exclude.
  endif.

* &amp;&amp;SEP01 (Seperator)

  if cut eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_loc_cut to t_exclude.
  endif.

  if copy_text eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_loc_copy to t_exclude.
  endif.

  if menu_include_ eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_loc_paste to t_exclude.
  endif.

  if undo eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_loc_undo to t_exclude.
  endif.

* &amp;&amp;SEP02 (Seprator)

  if append_row eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_loc_append_row to t_exclude.
  endif.

  if insert_row eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_loc_insert_row to t_exclude.
  endif.

  if delete_row eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_loc_delete_row to t_exclude.
  endif.

  if duplicate_row eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_loc_copy_row to t_exclude.
  endif.

* &amp;&amp;SEP03 (Separator)

  if sort_in_ascend_order eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_sort_asc to t_exclude.
  endif.

  if sort_int_descnd_order eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_sort_dsc to t_exclude.
  endif.

  if find eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_find to t_exclude.
  endif.

  if menu_filter_ eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_mb_filter to t_exclude.
  endif.

* &amp;&amp;SEP04 (Seperator)

  if menu_total eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_mb_sum to t_exclude.
  endif.

  if menu_subtotals eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_mb_subtot to t_exclude.
  endif.

* &amp;&amp;SEP05 (Seperator)

  if print eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_print_back to t_exclude.
  endif.

  if menu_views eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_mb_view to t_exclude.
  endif.

  if menu_export eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_mb_export to t_exclude.
  endif.

  if change_layout_ eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_current_variant to t_exclude.
  endif.

*  &amp;&amp;SEP06 (Seperator)

  if display_graphics eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_graph to t_exclude.
  endif.

*  &amp;&amp;SEP07 (Seperator)

  if end_user_docu_ eq &apos;X&apos; or all eq &apos;X&apos;.
    append cl_gui_alv_grid=&gt;mc_fc_info to t_exclude.
  endif.

  if is_toolbar_modified is initial.
    set handler me-&gt;toolbar_modification_event for grid.
    set handler me-&gt;alv_grid_user_command for grid.
    is_toolbar_modified = &apos;X&apos;.
  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_LAYOUT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_LAYOUT" SCONAME="PS_LAYOUT" VERSION="1" LANGU="E" DESCRIPT="ALV control: Layout structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_S_LAYO"/>
   <source>method set_layout.
  s_layout = ps_layout.
  refresh_output( ).
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_SORT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_SORT" SCONAME="PT_SORT" VERSION="1" LANGU="E" DESCRIPT="ALV control: Table of sort criteria" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_T_SORT"/>
   <source>method set_sort.
  t_sort = pt_sort.
  grid-&gt;set_sort_criteria( t_sort ).
  refresh_output( ).
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TABLE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130319" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TABLE" SCONAME="PS_LAYOUT" VERSION="1" LANGU="E" DESCRIPT="ALV control: Layout structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_S_LAYO" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TABLE" SCONAME="PT_TOOLBAR_EXCLUDE" VERSION="1" LANGU="E" DESCRIPT="Function Code Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="UI_FUNCTIONS" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TABLE" SCONAME="PT_FCAT" VERSION="1" LANGU="E" DESCRIPT="Field Catalog for List Viewer Control" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_T_FCAT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TABLE" SCONAME="PT_SORT" VERSION="1" LANGU="E" DESCRIPT="ALV control: Table of sort criteria" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_T_SORT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TABLE" SCONAME="PT_TABLE" VERSION="1" LANGU="E" DESCRIPT="Warning - Do not pass a locally defined table." CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130320" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="STANDARD TABLE"/>
   <source>method set_table.

  get reference of pt_table into tabref. &quot;//TODO need warning if the table is local and can loose scope.

  if pt_fcat is not initial.
    t_fcat = pt_fcat.
  else.
    t_fcat = build_field_catalog( pt_table ).
  endif.

  if ps_layout is not initial.
    s_layout = ps_layout.
  endif.

  if pt_sort is not initial.
    t_sort = pt_sort.
  endif.

  if pt_toolbar_exclude is not initial.
    t_exclude = pt_toolbar_exclude.
  endif.

  configure_alvgrid( ).

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TABLE_BYREF" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130405" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TABLE_BYREF" SCONAME="PS_LAYOUT" VERSION="1" LANGU="E" DESCRIPT="ALV control: Layout structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_S_LAYO" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TABLE_BYREF" SCONAME="PT_TOOLBAR_EXCLUDE" VERSION="1" LANGU="E" DESCRIPT="Function Code Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="UI_FUNCTIONS" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TABLE_BYREF" SCONAME="PT_SORT" VERSION="1" LANGU="E" DESCRIPT="ALV control: Table of sort criteria" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_T_SORT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TABLE_BYREF" SCONAME="PT_FCAT" VERSION="1" LANGU="E" DESCRIPT="Field Catalog for List Viewer Control" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130407" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_T_FCAT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TABLE_BYREF" SCONAME="PT_TABLEREF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130405" CHANGEDBY="ITAJR" CHANGEDON="20130407" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <source>method set_table_byref.

* //TODO need check to ensure reference is a valid table.
  tabref = pt_tableref.

  if pt_fcat is not initial.
    t_fcat = pt_fcat.
  else.
    field-symbols &lt;table&gt; type standard table.
    assign pt_tableref-&gt;* to &lt;table&gt;.
    t_fcat = build_field_catalog( &lt;table&gt; ).
  endif.

  if ps_layout is not initial.
    s_layout = ps_layout.
  endif.

  if pt_sort is not initial.
    t_sort = pt_sort.
  endif.

  if pt_toolbar_exclude is not initial.
    t_exclude = pt_toolbar_exclude.
  endif.

  configure_alvgrid( ).

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TITLE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="15 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130408" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="SET_TITLE" SCONAME="PV_TITLE" VERSION="1" LANGU="E" DESCRIPT="ALV Control: Title Line Text" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130408" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="LVC_TITLE"/>
   <source>method set_title.
  grid-&gt;set_gridtitle( pv_title ).
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_GUI_TABLE" CMPNAME="TOOLBAR_MODIFICATION_EVENT" VERSION="1" LANGU="E" DESCRIPT="Internal Use Only" EXPOSURE="0" STATE="1" EDITORDER="18 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDBY="ITAJR" CHANGEDON="20130409" MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="CL_GUI_ALV_GRID" REFCMPNAME="TOOLBAR" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="TOOLBAR_MODIFICATION_EVENT" SCONAME="SENDER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="TOOLBAR_MODIFICATION_EVENT" SCONAME="E_OBJECT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_GUI_TABLE" CMPNAME="TOOLBAR_MODIFICATION_EVENT" SCONAME="E_INTERACTIVE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130409" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <source>method toolbar_modification_event.

  data:
    ls_toolbar_btn  like line of t_toolbar_btns,
    ls_xxclude      like line of t_exclude.


  loop at t_exclude into ls_xxclude.
    delete e_object-&gt;mt_toolbar where function eq ls_xxclude.
  endloop.

  loop at t_toolbar_btns into ls_toolbar_btn.
    append ls_toolbar_btn-values to e_object-&gt;mt_toolbar.
  endloop.

endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IMAGE_UPLOADER" VERSION="1" LANGU="E" DESCRIPT="Automated SE78 Image Upload" UUID="4F6F48FEC943B64BA2BBA1C9E626E873" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ITAJR" CREATEDON="20130314" CHANGEDBY="ITAJR" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="620" CLSBCCAT="00" REFCLSNAME="ZCL_SCREENFRAME">
  <publicSection>class ZCL_IMAGE_UPLOADER definition
  public
  inheriting from ZCL_SCREENFRAME
  final
  create public .

*&quot;* public components of class ZCL_IMAGE_UPLOADER
*&quot;* do not include other source files here!!!
public section.

  methods CONSTRUCTOR .</publicSection>
  <protectedSection>*&quot;* protected components of class ZCL_IMAGE_UPLOADER
*&quot;* do not include other source files here!!!
protected section.</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_IMAGE_UPLOADER
*&quot;* do not include other source files here!!!
private section.

  data O_SCREEN type ref to LCL_GUI_MAIN .
  data O_IMGTABLE type ref to LCL_APP_IMAGETABLE .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes



*----------------------------------------------------------------------*
*       CLASS lcl_listener_btn_exit IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_lsr_btn_exit implementation.

  method zif_button_action_listener~button_pressed.
    leave program.
  endmethod.                    &quot;zif_button_action_listener~BUTTON_PRESSED

endclass.                    &quot;lcl_listener_btn_exit IMPLEMENTATION



*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_listener_btn_folder
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
class lcl_lsr_btn_folder implementation.

  method constructor.

    imgtable = po_imagetable.

  endmethod.                    &quot;constructor


  method zif_button_action_listener~button_pressed.

    data:
      folderpath    type string.

    cl_gui_frontend_services=&gt;directory_browse(
      exporting
        window_title         = &apos;Select Image Folder&apos;
*       initial_folder       = &quot;Desktop defaulted
      changing
        selected_folder      = folderpath
      exceptions
        cntl_error           = 1
        error_no_gui         = 2
        not_supported_by_gui = 3
        others               = 4 ).

    if folderpath is initial.
      return.
    endif.

    concatenate  folderpath  &apos;\&apos;  into folderpath.
    imgtable-&gt;set_folder( folderpath ).

  endmethod.                    &quot;zif_button_action_listener~button_pressed

endclass.               &quot;lcl_listener_btn_folder



*----------------------------------------------------------------------*
*       CLASS lcl_listener_btn_upload IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_lsr_btn_upload implementation.

  method constructor.

    imgtable = po_imagetable.

  endmethod.                    &quot;constructor


  method zif_button_action_listener~button_pressed.

    imgtable-&gt;upload_images( ).

  endmethod.                    &quot;zif_button_action_listener~button_pressed

endclass.                    &quot;lcl_listener_btn_upload IMPLEMENTATION



*----------------------------------------------------------------------*
*       CLASS lcl_imagetable IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_app_imagetable implementation.

  method constructor.

  endmethod.                    &quot;constructor


  method get_table.

    pt_imagetable = t_imageinfos.

  endmethod.                    &quot;get_table


  method set_folder.

    clear t_imageinfos.

    data:
      lt_files  type standard table of file_info,
        ls_file like line of lt_files,
      count     type i.

    cl_gui_frontend_services=&gt;directory_list_files(
      exporting
        directory                   = pv_folderpath
        filter                      = &apos;*.bmp&apos;
        files_only                  = &apos;X&apos;
        directories_only            = &apos;&apos;
      changing
        file_table                  = lt_files
        count                       = count
      exceptions
        cntl_error                  = 1
        directory_list_files_failed = 2
        wrong_parameter             = 3
        error_no_gui                = 4
        not_supported_by_gui        = 5
        others                      = 6 ).

    folderpath = pv_folderpath.


    data:
      ls_imginfo  type tys_imageinfo,
      null        type string.

    loop at lt_files into ls_file.
      ls_imginfo-name = ls_file-filename.

      split ls_file-filename at &apos;.bmp&apos; into  ls_imginfo-sapname  null.
      concatenate  prefix  ls_imginfo-sapname  suffix  into ls_imginfo-sapname.

      append ls_imginfo to t_imageinfos.
    endloop.

    if observer is not initial.
      observer-&gt;folder_changed( folderpath ).
      observer-&gt;table_changed( ).
    endif.

  endmethod.                    &quot;set_folder


  method set_name_affix.

    if pv_prefix ne &apos;.&apos;.
      prefix = pv_prefix.
    endif.

    if pv_suffix ne &apos;.&apos;.
      suffix = pv_suffix.
    endif.


    data null type string.

    field-symbols:
     &lt;imginfo&gt;  like line of t_imageinfos.

    loop at t_imageinfos assigning &lt;imginfo&gt;.
      split &lt;imginfo&gt;-name at &apos;.bmp&apos; into &lt;imginfo&gt;-sapname null.
      concatenate  prefix  &lt;imginfo&gt;-sapname  suffix  into &lt;imginfo&gt;-sapname.
      clear &lt;imginfo&gt;-status.
    endloop.

    if observer is not initial.
      observer-&gt;table_changed( ).
    endif.

  endmethod.                    &quot;set_name_affix


  method existant_name_check.

    data:
      lt_duplicates type table of tdobname,
        ls_duplicate  type tdobname,
      ls_imageinfo  like line of t_imageinfos.

    field-symbols:
     &lt;imginfo&gt;    like line of t_imageinfos,
     &lt;duplicate&gt;  type tdobname,
     &lt;lv_imgnam&gt;  type tdobname.


    if t_imageinfos is initial.
      return.
    endif.

    select
      stxbitmaps~tdname
    into table lt_duplicates
    from stxbitmaps
    for all entries in t_imageinfos
    where tdname = t_imageinfos-sapname.

    loop at t_imageinfos assigning &lt;imginfo&gt;.
      read table lt_duplicates with key table_line = &lt;imginfo&gt;-sapname transporting no fields.
      if sy-subrc eq 0.
        &lt;imginfo&gt;-status = &apos;Image Name Exists&apos;.
      else.
        &lt;imginfo&gt;-status = &apos;Image Name Not Found&apos;.
      endif.
    endloop.

    if observer is not initial.
      observer-&gt;table_changed( ).
    endif.

*Notes:-
*ssfxsfbmp - table containing picture data? (However doesn&apos;t contain all images
*found in stxbitmaps) (Smart forms cache...) ... has to have been displayed then it is in this table.
  endmethod.                    &quot;existant_name_check


  method upload_images.

    data:
      imagepath         type localfile,
      sapname           type stxbitmaps-tdname,
      lv_tasknam(6)     type c value &apos;TASK&apos;,
      msg(80).

    field-symbols:
     &lt;imginfo&gt; like line of t_imageinfos.



    loop at t_imageinfos assigning &lt;imginfo&gt;.
      imginfo_lineptr = sy-tabix.

      &lt;imginfo&gt;-status = &apos;Uploading&apos;.
      if observer is not initial.
        observer-&gt;in_process_table_changed( ).
      endif.

*     if gv_semaphore1 = &apos; &apos;.
*       gv_semaphore1 = &apos;X&apos;.
*       lv_tasknam = &apos;TASK1&apos;.
*       gv_task1_tabix = sy-tabix.
*     else.
*       gv_semaphore2 = &apos;X&apos;.
*       lv_tasknam = &apos;TASK2&apos;.
*       gv_task2_tabix = sy-tabix.
*     endif.

      concatenate  folderpath  &lt;imginfo&gt;-name  into imagepath.

      clear semaphore.
      data retrycount type n. clear retrycount.

      while semaphore is initial.
        call function &apos;ZB_IMAGE_UPLOADER_RFC&apos; starting new task &apos;TASK1&apos;
          calling set_imginfo_status_rfc on end of task
          exporting
            pv_filepath           = imagepath
            pv_sap_zname          = &lt;imginfo&gt;-sapname
            pv_linenum0           = imginfo_lineptr
          exceptions
            communication_failure = 1  message msg
            system_failure        = 2  message msg.
        if sy-subrc eq 1. &quot;RFC task TASK1 already open. (Assuming this is always the issue for 1, check msg)
          message msg type &apos;I&apos;. &quot;//TODO create new task name - or create new task name for each record.
        endif.                  &quot;The number of new processes could be determined by the number of free sessions.
        &quot;//TODO change screen checkbox wording to &quot;Parallel Upload on free sessions&quot;.
        data runningcount type i. clear runningcount.

        while semaphore is initial.
          wait until semaphore eq &apos;X&apos; up to 20 seconds. &quot;//TODO Get the session time limit value for the server.
          if semaphore eq &apos;X&apos;.
            exit.
          endif.

          if check_for_live_process( ) eq &apos;X&apos;.
            if runningcount &lt; 2. &quot;Only check a long running process twice, then give up on it and start the next one.
              add 1 to runningcount.
              &lt;imginfo&gt;-status = &apos;Uploading - Long Process&apos;.
              if observer is not initial.
                observer-&gt;in_process_table_changed( ).
              endif.
            else.
              &lt;imginfo&gt;-status = &apos;Prolonged Upload (Outcome Check Skipped)&apos;.
              semaphore = &apos;X&apos;. &quot;indicate process is over.
              &quot;# User may have the transaction with a process of the same name open and therefore quit but alert user to
              &quot;this fact.
              &quot;Create a new task name in case the old one is still hanging so that a new session can be created.
              &quot;Need to make check on available sessions otherwise another one will not be available to continue.
              &quot;This may mean the process needs to be halted.
              exit.
            endif.
          else. &quot;Process is missing/lost possibly due to time out.
            exit.
          endif.
        endwhile.

        if semaphore is initial. &quot;Process lost / didn&apos;t complete.
          add 1 to retrycount.
          if retrycount &lt; 2.
            &lt;imginfo&gt;-status = &apos;Upload Timed Out - Retrying&apos;.
            if observer is not initial.
              observer-&gt;in_process_table_changed( ).
            endif.
          else.
            &lt;imginfo&gt;-status = &apos;Upload Failed - Timed Out&apos;.
            exit.
          endif.
        endif.

      endwhile.

    endloop.

*   if p_speed = &apos; &apos;.
*   else.
*     wait until gv_semaphore1 eq &apos; &apos; or gv_semaphore2 eq &apos; &apos;.
*   endif.



*    if observer is not initial.
*      observer-&gt;table_changed( ).
*    endif.

  endmethod.                    &quot;upload_images=


  method check_for_live_process.

    data:
      t_worklist  type table of wpinfo.

    call function &apos;TH_WPINFO&apos;
*     EXPORTING
*       SRVNAME          = &apos; &apos;
*       WITH_CPU         = 0
      tables
        wplist          = t_worklist
     exceptions
       send_error       = 1
       others           = 2.

    read table t_worklist with key wp_bname = sy-uname  wp_report = &apos;SAPLSTXBITMAPS&apos; transporting no fields.
    if sy-subrc eq 0.
      pv_is_live = &apos;X&apos;.
    else.
      pv_is_live = &apos; &apos;.
    endif.

    &quot;Defaulted as live for now until a valid check can be made.
    pv_is_live = &apos;X&apos;.


*  Other SM50 related data functions
**********************************************************************
*   data t_userlist type table of uinfo.
*   call function &apos;TH_USER_LIST&apos;
*     tables
*       list = t_userlist.
*   CALL FUNCTION &apos;STRC_SELECT_LOADMASK&apos;.
*   CALL FUNCTION &apos;STRC_SELECT_DISPLAYMASK&apos;.
*   CALL FUNCTION &apos;TH_GET_WP_TRACE&apos;
*   CALL FUNCTION &apos;TH_QUERY_WP_TRACE&apos;
*   CALL FUNCTION &apos;TH_RESET_TRACE&apos;
**********************************************************************

  endmethod.                    &quot;check_for_live_process


  method set_imginfo_status_rfc.

    data:
      linenum type i,
      status(100).

    field-symbols:
     &lt;imginfo&gt; like line of t_imageinfos.

    receive results from function &apos;ZB_IMAGE_UPLOADER_RFC&apos;
      changing
        pv_linenum = linenum
      exceptions
        upload_failed = 1
        others = 2.
    if sy-subrc eq 0.
      status = &apos;Upload Successful&apos;.
    else.
      status = &apos;Upload Failed&apos;.
    endif.


*    if p_task eq &apos;TASK1&apos;.
    read table t_imageinfos index linenum assigning &lt;imginfo&gt;.
    semaphore = &apos; &apos;. &quot;//TODO use a semaphore in each record line so a delayed process does not interfere with a success on a later process.
    &lt;imginfo&gt;-status = status.
*    else.
*      gv_semaphore2 = &apos; &apos;.
*      read table gt_uploadlist index gv_task1_tabix assigning &lt;gs_list&gt;.
*    endif.

  endmethod.                    &quot;rfc_recieve


  method set_observer.

    observer = po_observer.

  endmethod.                    &quot;set_observer

endclass.                    &quot;lcl_imagetable IMPLEMENTATION


*  method upload_images.
*
*    data:
*      imagepath         type localfile,
*      sapname           type stxbitmaps-tdname,
*      lv_tasknam(6)     type c value &apos;TASK&apos;,
*      msg(80).
*
*    field-symbols:
*       &lt;imginfo&gt; like line of t_imageinfos.
*
*
*
*    loop at t_imageinfos assigning &lt;imginfo&gt;.
*      imginfo_lineptr = sy-tabix.
*
*      &lt;imginfo&gt;-status = &apos;Uploading&apos;.
*      o_grid-&gt;set_frontend_layout( s_layout ).
*      o_grid-&gt;refresh_table_display( ).
*      cl_gui_cfw=&gt;update_view( ).
*
**     if gv_semaphore1 = &apos; &apos;.
**       gv_semaphore1 = &apos;X&apos;.
**       lv_tasknam = &apos;TASK1&apos;.
**       gv_task1_tabix = sy-tabix.
**     else.
**       gv_semaphore2 = &apos;X&apos;.
**       lv_tasknam = &apos;TASK2&apos;.
**       gv_task2_tabix = sy-tabix.
**     endif.
*
*      concatenate  folderpath  &lt;imginfo&gt;-name  into imagepath.
*
*      semaphore = &apos;X&apos;.
*
*      data retrycount type i. clear retrycount.
*
*      do.
*        call function &apos;ZB_IMAGE_UPLOADER_RFC&apos; starting new task &apos;TASK1&apos;
*          calling set_imginfo_status_rfc on end of task
*          exporting
*            pv_filepath           = imagepath
*            pv_sap_zname          = &lt;imginfo&gt;-sapname
*            pv_linenum0           = imginfo_lineptr
*          exceptions
*            communication_failure = 1  message msg
*            system_failure        = 2  message msg.
*        if sy-subrc eq 1. &quot;RFC task TASK1 already open. (Assuming this is always the issue for 1, check msg)
*          message msg type &apos;I&apos;.
*        endif.
*
*        &quot;//TODO Place while loop that constantly checks SM50 table for new processes under this username and adds them to a table
*        &quot;to gather all the processes used in this report.
*        &quot;//TODO Make check 3 times consequetively it process is still found then alert user to hanging task else
*        &quot;if process cannot be found then retry, if after 2 times the retry doesn&apos;t work then place message and continue with
*        &quot;next image.
*
*        data runningcount type i. clear runningcount.
*
*        do.
*          wait until semaphore eq &apos; &apos; up to 20 seconds. &quot;//TODO Get the session time limit value for the server.
*          if semaphore eq &apos;X&apos;.
*            data:
*              t_worklist  type table of wpinfo,
*              t_userlist  type table of uinfo.
*
*            call function &apos;TH_WPINFO&apos;
**             EXPORTING
**               SRVNAME          = &apos; &apos;
**               WITH_CPU         = 0
*              tables
*                wplist          = t_worklist
*             exceptions
*               send_error       = 1
*               others           = 2.
*
*            read table t_worklist with key wp_bname = sy-uname wp_report =&apos;SAPLSTXBITMAPS&apos; transporting no fields.
*            if sy-subrc eq 0. &quot;Process is still operating.
*              if runningcount &lt; 2. &quot;Only check a long running process twice, then give up on it and start the next one.
*                add 1 to runningcount.
*                &lt;imginfo&gt;-status = &apos;Uploading - Long Process&apos;.
*                continue.
*              else.
*                &lt;imginfo&gt;-status = &apos;Upload Uncertain - Hanged Process&apos;.
*                &quot;# User may have the transaction with a process of the same name open and therefore quit but alert user to
*                &quot;this fact.
*                &quot;Create a new task name in case the old one is still hanging so that a new session can be created.
*                &quot;Need to make check on available sessions otherwise another one will not be available to continue.
*                &quot;This may mean the process needs to be halted.
*                exit.
*              endif.
*            else. &quot;Process has timed out.
*              if retrycount &lt; 2.
*                add 1 to retrycount.
*                &lt;imginfo&gt;-status = &apos;Upload Timed Out - Retrying&apos;.
*              else.
*                clear retrycount. &quot;Indicate no more retries.
*                &lt;imginfo&gt;-status = &apos;Upload Failed - Timed Out&apos;.
*                exit.
*              endif.
*            endif.
*
*          else.
*            exit. &quot;Exit back into the main loop round the table for the next item.
*          endif.
*        enddo.
*
*        o_grid-&gt;set_frontend_layout( s_layout ).
*        o_grid-&gt;refresh_table_display( ).
*        cl_gui_cfw=&gt;update_view( ).
*
*        if retrycount is initial. &quot;A retry has not been recorded.
*          exit. &quot;Do not retry
*        endif.
*      enddo.
*
*    endloop.
*
**   if p_speed = &apos; &apos;.
**   else.
**     wait until gv_semaphore1 eq &apos; &apos; or gv_semaphore2 eq &apos; &apos;.
**   endif.
*
**           call function &apos;TH_USER_LIST&apos;
**             tables
**               list = t_userlist.
**           CALL FUNCTION &apos;STRC_SELECT_LOADMASK&apos;.
**           CALL FUNCTION &apos;STRC_SELECT_DISPLAYMASK&apos;.
**           CALL FUNCTION &apos;TH_GET_WP_TRACE&apos;
**           CALL FUNCTION &apos;TH_QUERY_WP_TRACE&apos;
**           CALL FUNCTION &apos;TH_RESET_TRACE&apos;
*
**    o_grid-&gt;set_frontend_layout( s_layout ).
**    o_grid-&gt;refresh_table_display( ).
*
*  endmethod.                    &quot;upload_images



*----------------------------------------------------------------------*
*       CLASS lcl_observer_imagetable IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_obr_imagetable implementation.

  method constructor.

    folder_fld = po_folder_fld.
    gui_table = po_gui_table.

  endmethod.                    &quot;constructor

  method lif_obr_imgtable~folder_changed.

    folder_fld-&gt;set_value( pv_newfolder ).

  endmethod.                    &quot;lif_observer_imgtable~folder_changed

  method lif_obr_imgtable~table_changed.

    gui_table-&gt;refresh_output( ).

  endmethod.                    &quot;LIF_OBSERVER_IMGTABLE~table_changed

  method lif_obr_imgtable~in_process_table_changed.

    gui_table-&gt;refresh_output( &apos;X&apos; ).

  endmethod.                    &quot;LIF_OBSERVER_IMGTABLE~in_process_table_changed

endclass.                    &quot;lcl_observer_imagetable IMPLEMENTATION



*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_gui_main
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
class lcl_gui_main implementation.

  method constructor.

    super-&gt;constructor( pv_program_of_screen = &apos;Z_IMAGE_UPLOADER&apos;
                        pv_screen_number = &apos;0001&apos; ).

    get_elements( changing ps_elements = s_elements ).

    s_elements-namescheme_lbl-&gt;set_value( &apos;Uploaded Image Naming Scheme&apos; ).

    s_elements-transportbox_lbl-&gt;set_value( &apos;Image Transport Assignment&apos; ).

    create object imgtable.

    create object gui_table.
    s_elements-tablescreen-&gt;set_subscreen( gui_table ).

    &quot;//TODO need to get table rather than private reference.
    gui_table-&gt;set_table( changing pt_table = imgtable-&gt;t_imageinfos ).


    create object imgtab_obsr
      exporting
        po_folder_fld = s_elements-folder_location_fld
        po_gui_table = gui_table.
    imgtable-&gt;set_observer( imgtab_obsr ).


    constants:
      default_prefix  type tdobname value &apos;ZQUOTEREV&apos;,
      default_suffix  type tdobname value &apos;BIG&apos;.

    s_elements-prefix_fld-&gt;set_value( default_prefix ).
    s_elements-suffix_fld-&gt;set_value( default_suffix ).
    imgtable-&gt;set_name_affix( pv_prefix = default_prefix  pv_suffix = default_suffix ).


    create object check_lsnr
      exporting
        po_imagetable = imgtable.

    s_elements-duplicatename_btn-&gt;add_action_listener( check_lsnr ).

    create object affix_lsnr
      exporting
        po_prefix_fld = s_elements-prefix_fld
        po_suffix_fld = s_elements-suffix_fld
        po_imagetable = imgtable.

    s_elements-prefix_fld-&gt;add_action_listener( affix_lsnr ).
    s_elements-suffix_fld-&gt;add_action_listener( affix_lsnr ).


    create object folder_btn
      exporting
        pv_label = &apos;Open Folder&apos;.

    create object folder_lsnr
      exporting
        po_imagetable = imgtable.
    folder_btn-&gt;add_action_listener( folder_lsnr ).


    create object upload_btn
      exporting
        pv_label = &apos;Upload Images&apos;.

    create object upload_lsnr
      exporting
        po_imagetable = imgtable.
    upload_btn-&gt;add_action_listener( upload_lsnr ).

  endmethod.                    &quot;constructor


  method get_toolbar_buttons.

    append folder_btn to pt_buttons.
    append upload_btn to pt_buttons.

  endmethod.                    &quot;get_toolbar_buttons

endclass.               &quot;lcl_gui_main



*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_listener_btn_check
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
class lcl_lsr_btn_check implementation.

  method constructor.

    imgtable = po_imagetable.

  endmethod.                    &quot;constructor

  method zif_button_action_listener~button_pressed.

    imgtable-&gt;existant_name_check( ).

  endmethod.                    &quot;zif_button_action_listener~button_pressed

endclass.               &quot;lcl_listener_btn_check



*----------------------------------------------------------------------*
*       CLASS lcl_listener_fld_affix IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_lsr_fld_affix implementation.

  method constructor.

    prefix_fld = po_prefix_fld.
    suffix_fld = po_suffix_fld.
    imgtable = po_imagetable.

  endmethod.                    &quot;constructor

  method zif_button_action_listener~button_pressed.

    data:
      lv_prefix  type tdobname,
      lv_suffix  type tdobname.

    prefix_fld-&gt;get_value( changing pv_value = lv_prefix ).
    suffix_fld-&gt;get_value( changing pv_value = lv_suffix ).

    imgtable-&gt;set_name_affix( pv_prefix = lv_prefix  pv_suffix = lv_suffix ).

  endmethod.                    &quot;zif_button_action_listener~button_pressed

endclass.                    &quot;lcl_listener_fld_affix IMPLEMENTATION</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature



*----------------------------------------------------------------------*
*       CLASS lcl_listener_btn_exit DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_lsr_btn_exit definition.

  public section.
    interfaces:
      zif_button_action_listener.

endclass.                    &quot;back_button_listener DEFINITION



class lcl_app_imagetable definition deferred.
*----------------------------------------------------------------------*
*       CLASS lcl_listener_btn_folder DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_lsr_btn_folder definition. &quot;btn_open_folder

  public section.
    methods:
      constructor
            importing
              po_imagetable type ref to lcl_app_imagetable.

    interfaces:
      zif_button_action_listener.

  private section.
    data:
      imgtable    type ref to lcl_app_imagetable.

endclass.                    &quot;lcl_listener_btn_folder DEFINITION



*----------------------------------------------------------------------*
*       INTERFACE lif_observer_imgtable DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
interface lif_obr_imgtable.

  methods:
    folder_changed
          importing
            pv_newfolder  type ibipparms-path,

    table_changed,

    in_process_table_changed.

endinterface.                    &quot;lif_observer_imgtable DEFINITION



class lcl_gui_main definition deferred.
*----------------------------------------------------------------------*
*       CLASS lcl_imagetable DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_app_imagetable definition friends lcl_gui_main.

  public section.

    types:
      begin of tys_imageinfo,
        name    type file_name, &quot;file_info-filename,
        sapname type rstxg_name, &quot;tdobname
        status  type vbsta_d, &quot;Possible other field type - TPM_RECON_STATUS_TEXT
      end of tys_imageinfo,
      tyt_table type table of tys_imageinfo with default key.

    methods:
      constructor,
      get_table
            returning value(pt_imagetable) type tyt_table,
      set_folder
            importing
              pv_folderpath type string,
      set_name_affix
            importing
              pv_prefix type tdobname default &apos;.&apos; &quot;Representing null
              pv_suffix type tdobname default &apos;.&apos;,
      existant_name_check,
      upload_images,
      set_imginfo_status_rfc
            importing
              p_task type clike,
      set_observer
            importing
              po_observer type ref to lif_obr_imgtable.

  private section.
    data:
      t_imageinfos    type table of tys_imageinfo,
      folderpath      type ibipparms-path,
      prefix          type tdobname,
      suffix          type tdobname,
      semaphore       type flag,
      imginfo_lineptr type i,
      observer        type ref to lif_obr_imgtable.

    methods:
      check_for_live_process
            returning
              value(pv_is_live) type flag.

endclass.                    &quot;lcl_imagetable DEFINITION



*----------------------------------------------------------------------*
*       CLASS lcl_listener_btn_upload DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_lsr_btn_upload definition.

  public section.
    methods:
      constructor
            importing
              po_imagetable type ref to lcl_app_imagetable.

    interfaces:
      zif_button_action_listener.

  private section.
    data:
      imgtable  type ref to lcl_app_imagetable.

endclass.                    &quot;lcl_listener_btn_upload DEFINITION



*----------------------------------------------------------------------*
*       CLASS lcl_listener_btn_check DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_lsr_btn_check definition.

  public section.
    methods:
      constructor
            importing
              po_imagetable type ref to lcl_app_imagetable.

    interfaces:
      zif_button_action_listener.

  private section.
    data:
      imgtable  type ref to lcl_app_imagetable.

endclass.                    &quot;lcl_listener_btn_check DEFINITION



*----------------------------------------------------------------------*
*       CLASS lcl_listener_fld_affix DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_lsr_fld_affix definition.

  public section.
    methods:
      constructor
            importing
              po_prefix_fld type ref to zcl_screenfield
              po_suffix_fld type ref to zcl_screenfield
              po_imagetable type ref to lcl_app_imagetable.

    interfaces:
      zif_button_action_listener.

  private section.
    data:
      prefix_fld  type ref to zcl_screenfield,
      suffix_fld  type ref to zcl_screenfield,
      imgtable    type ref to lcl_app_imagetable.

endclass.                    &quot;lcl_listener_fld_affix DEFINITION



*----------------------------------------------------------------------*
*       CLASS lcl_observer_imagetable DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_obr_imagetable definition.

  public section.
    methods:
      constructor
            importing
              po_folder_fld type ref to zcl_screenfield
              po_gui_table  type ref to zcl_gui_table.

    interfaces:
      lif_obr_imgtable.

  private section.
    data:
      folder_fld  type ref to zcl_screenfield,
      gui_table   type ref to zcl_gui_table.

endclass.                    &quot;lcl_observer_imagetable DEFINITION



*----------------------------------------------------------------------*
*       CLASS lcl_gui_main DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_gui_main definition inheriting from zcl_screen.

  public section.
    types:
      tyt_app_buttons type table of ref to zcl_app_button.

    methods:
      constructor,
      get_toolbar_buttons
            exporting
              pt_buttons  type tyt_app_buttons.

  private section.
    data:
      imgtable    type ref to lcl_app_imagetable,
      gui_table   type ref to zcl_gui_table,
      imgtab_obsr type ref to lcl_obr_imagetable,
      check_lsnr  type ref to lcl_lsr_btn_check,
      folder_btn  type ref to zcl_app_button,
      folder_lsnr type ref to lcl_lsr_btn_folder,
      upload_btn  type ref to zcl_app_button,
      upload_lsnr type ref to lcl_lsr_btn_upload,
      affix_lsnr  type ref to lcl_lsr_fld_affix,

      begin of s_elements,
        namescheme_lbl      type ref to zcl_screenfield,
        prefix_fld          type ref to zcl_screenfield,
        suffix_fld          type ref to zcl_screenfield,
        duplicatename_btn   type ref to zcl_tabbutton,
        transportbox_lbl    type ref to zcl_screenfield,
        folder_location_fld type ref to zcl_screenfield,
        tablescreen         type ref to zcl_subscreenarea,
      end of s_elements.

endclass.                    &quot;lcl_gui_main DEFINITION</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCL_IMAGE_UPLOADER" CMPNAME="O_IMGTABLE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ITAJR" CREATEDON="20130317" CHANGEDBY="ITAJR" CHANGEDON="20130411" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="LCL_APP_IMAGETABLE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <attribute CLSNAME="ZCL_IMAGE_UPLOADER" CMPNAME="O_SCREEN" VERSION="1" LANGU="E" DESCRIPT="Links function group screen to object" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ITAJR" CREATEDON="20130314" CHANGEDBY="ITAJR" CHANGEDON="20130319" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="LCL_GUI_MAIN" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="620"/>
  <inheritance CLSNAME="ZCL_IMAGE_UPLOADER" REFCLSNAME="ZCL_SCREENFRAME" VERSION="1" STATE="1" AUTHOR="ITAJR" CREATEDON="20130314" CHANGEDON="00000000"/>
  <method CLSNAME="ZCL_IMAGE_UPLOADER" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ITAJR" CREATEDON="20130314" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="620" BCMTDCAT="00" BCMTDSYN="0">
   <source>method constructor.

  call method super-&gt;constructor.

  set_title( &apos;Image Uploader&apos; ).

  create object o_screen.
  set_screenarea( o_screen ).


* Set Exit Listener Actions
* *********************************************************************
  data:
    lo_frame_toolbar  type ref to zcl_frame_toolbar,
    lo_frame_button   type ref to zcl_frame_button.

  lo_frame_toolbar = get_frame_toolbar( ).

  data lo_exit_listener  type ref to lcl_lsr_btn_exit.
  create object lo_exit_listener.

  lo_frame_button = lo_frame_toolbar-&gt;get_exit_button( ).
  lo_frame_button-&gt;add_action_listener( lo_exit_listener ).
**********************************************************************


  data:
    lo_app_toolbar  type ref to zcl_app_toolbar.

  lo_app_toolbar = get_app_toolbar( ).

* Application Toolbar Buttons
**********************************************************************
  data:
    lt_buttons  type lcl_gui_main=&gt;tyt_app_buttons,
    lo_button   type ref to zcl_app_button.

  o_screen-&gt;get_toolbar_buttons( importing pt_buttons = lt_buttons ).

  loop at lt_buttons into lo_button.
    lo_app_toolbar-&gt;add_button( lo_button ).
  endloop.
**********************************************************************

endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
</nugget>
